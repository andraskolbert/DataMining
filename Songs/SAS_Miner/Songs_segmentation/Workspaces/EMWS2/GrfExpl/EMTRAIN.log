MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "17-12-2015" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "00H41m" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                17-12-2015
Time:                00H41m
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O3MKK2TL "C:\Users\VM-SAS\Documents\GitHub\DataMining\Songs\SAS_Miner\Songs_segmentation\Workspaces\EMWS2\GrfExpl\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O3MKK2TL new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Users\VM-SAS\Documents\GitHub\DataMining\Songs\SAS_Miner\Songs_segmentation\Workspaces\EMWS2\GrfExpl\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "17-12-2015" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "00H41m" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                VM-SAS";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_7PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.03.01M2P081512";
MPRINT(EM_DIAGRAM):   put "EM Version:          12.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\VM-SAS\Documents\GitHub\DataMining\Songs\SAS_Miner\Songs_segmentation\Workspaces\EMWS2\GrfExpl\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\Users\VM-SAS\Documents\GitHub\DataMining\Songs\SAS_Miner\Songs_segmentation\Workspaces\EMWS2\GrfExpl\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\VM-SAS\Documents\GitHub\DataMining\Songs\SAS_Miner\Songs_segmentation\Workspaces\EMWS2\GrfExpl\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Users\VM-SAS\Documents\GitHub\DataMining\Songs\SAS_Miner\Songs_segmentation\Workspaces\EMWS2\GrfExpl\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "17-12-2015" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "00H41m" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                VM-SAS";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\VM-SAS\Documents\GitHub\DataMining\Songs\SAS_Miner\Songs_segmentation\Workspaces\EMWS2\GrfExpl\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\VM-SAS\Documents\GitHub\DataMining\Songs\SAS_Miner\Songs_segmentation\Workspaces\EMWS2\GrfExpl\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\VM-SAS\Documents\GitHub\DataMining\Songs\SAS_Miner\Songs_segmentation\Workspaces\EMWS2\GrfExpl\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\VM-SAS\Documents\GitHub\DataMining\Songs\SAS_Miner\Songs_segmentation\Workspaces\EMWS2\GrfExpl\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
20660      proc freq data=EMWS2.GrfExpl_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS2.GrfExpl_VariableSet noprint;
20661      table ROLE*LEVEL/out=WORK.GrfExplMETA;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.GrfExplMETA;
20662      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 16 observations read from the data set EMWS2.GRFEXPL_VARIABLESET.
NOTE: The data set WORK.GRFEXPLMETA has 2 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

20663      proc print data=WORK.GrfExplMETA label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.GrfExplMETA label noobs;
20664      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
20665      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
20666      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
20667      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
20668      run;

NOTE: There were 2 observations read from the data set WORK.GRFEXPLMETA.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

20669      title10;
MPRINT(EM_DIAGRAM):   title10;
20670      %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * GrfExpl: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * GrfExpl: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'Songs_segmentation';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'songs1';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS2.Ids_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
20985      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
20986      * GrfExpl: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * GrfExpl: Generation of macros and macro variables;
20987      * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
20988      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

20989      %let EMEXCEPTIONSTRING=;
20990      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
20991      * TRAIN: GrfExpl;
MPRINT(EM_DIAGRAM):   * TRAIN: GrfExpl;
20992      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
20993      %let EM_ACTION = TRAIN;
20994      %let syscc = 0;
20995      %macro main;
20996         filename temp catalog 'sashelp.emexpl.graphexplore_macros.source';
20997         %include temp;
20998         filename temp;
20999      
21000         %SetProperties;
21001      
21002         %if %upcase(&EM_ACTION) = CREATE %then %do;
21003      
21004             filename temp catalog 'sashelp.emexpl.graphexplore_create.source';
21005             %include temp;
21006             filename temp;
21007             %create;
21008         %end;
21009         %else
21010         %if %upcase(&EM_ACTION) = TRAIN %then %do;
21011      
21012             filename temp catalog 'sashelp.emexpl.graphexplore_train.source';
21013             %include temp;
21014             filename temp;
21015             %train;
21016      
21017         %end;
21018         %else
21019         %if %upcase(&EM_ACTION) = REPORT %then %do;
21020      
21021             filename temp catalog 'sashelp.emexpl.graphexplore_report.source';
21022             %include temp;
21023             filename temp;
21024      
21025             %report;
21026         %end;
21027      
21028      %mend main;
21029      
21030      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emexpl.graphexplore_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.GRAPHEXPLORE_MACROS.SOURCE.
21031     +%macro SetProperties;
21032     +   %em_checkmacro(name=EM_PROPERTY_INTERVALBYTARGET,      global=Y, value=Y);
21033     +   %em_checkmacro(name=EM_PROPERTY_CLASSBYTARGET,         global=Y, value=Y);
21034     +   %em_checkmacro(name=EM_PROPERTY_DATASOURCE,            global=Y, value=SAMPLE);
21035     +   %em_checkmacro(name=EM_PROPERTY_EMSAMPLEMETHOD,        global=Y, value=FIRSTN);
21036     +   %em_checkmacro(name=EM_PROPERTY_EMSAMPLESIZE,          global=Y, value=DEFAULT);
21037     +   %em_checkmacro(name=EM_PROPERTY_EMRANDOMSEED,          global=Y, value=12345);
21038     +
21039     +%mend SetProperties;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emexpl.graphexplore_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.GRAPHEXPLORE_TRAIN.SOURCE.
21040     +%macro train;
21042     +    %let graphData = &em_import_data;
21043     +    %if "&graphData" eq "" %then
21044     +        %let graphData = &em_import_transaction;
21045     +    %if "&graphData" eq "" %then
21046     +        %let graphData = &em_import_document;
21047     +    %if "&graphData" eq "" %then
21048     +        %let graphData = &em_import_validate;
21049     +    %if "&graphData" eq "" %then
21050     +        %let graphData = &em_import_test;
21051     +    %if "&graphData" eq "" %then
21052     +        %let graphData = &em_import_score;
21054     +    %if "&graphData" eq "" %then %do;
21055     +        %let emexceptionString = exception.server.IMPORT.NODATA;
21056     +        %goto doendm;
21057     +    %end;
21059     +    %em_getname(key=SAMPLE_DATA, type=DATA);
21061     +    filename vartemp catalog 'sashelp.emutil.em_varmacro.source';
21062     +    %include vartemp;
21063     +    filename vartemp;
21065     +    data tempVariableSet;
21066     +       set &em_data_variableset;
21067     +       where (ROLE = 'REJECTED' and USE='Y') or ROLE='FREQ' or ( ROLE ne 'REJECTED' and USE in('Y', 'D'));
21068     +       if _N_< 950 or (ROLE = 'TARGET' and USE in('Y', 'D')) or ROLE='FREQ' then output;
21069     +    run;
21070     +    %em_varMacro(name=varSample, metadata=tempVariableSet, where=, key=NAME, nummacro=numVarSample);
21073     +     %exploreSample(DATA=&graphData, OUTPUT=&EM_USER_SAMPLE_DATA, METADATA=&EM_DATA_VARIABLESET, VARS=%varSample,
21074     +                      METHOD=&EM_PROPERTY_EMSAMPLEMETHOD, SIZE=&EM_PROPERTY_EMSAMPLESIZE,
21075     +                      ALPHA=, PVALUE=, SEED=&EM_PROPERTY_EMRANDOMSEED);
21077     +    %doendm:
21079     +%mend train;
21081     +%train;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename vartemp catalog 'sashelp.emutil.em_varmacro.source';
NOTE: %INCLUDE (level 2) file VARTEMP is file SASHELP.EMUTIL.EM_VARMACRO.SOURCE.
21082     +%macro em_varMacro(name=emMacro, metadata=, where=, key=NAME, nummacro=);
21083     +   filename macFile catalog 'work.emutil.macro.source';
21084     +   %let _METAOBS = 0;
21086     +   %if (%sysfunc(exist(&metadata))<1 and %sysfunc(exist(&metadata, VIEW))<1)
21087     +                   or (&metadata eq ) %then %do;
21088     +       %goto doend;
21089     +   %end;
21090     +   data _null_;
21091     +      length _STRING_ $80;
21092     +      retain _STRING_;
21093     +      set &metadata end=eof;
21094     +      file macFile;
21095     +      %if %nrbquote(&where) ne %then %do;
21096     +          %let whereClause = where (%nrbquote(&where));
21097     +          %unquote(&whereClause);
21098     +      %end;
21099     +      if _N_=1 then do;
21100     +         string = "%"!!"macro &name;";
21101     +         put string;
21102     +      end;
21103     +      if (length(_STRING_) + length(trim(&key))+ 1 < 80) then do;
21104     +         _STRING_ = trim(_STRING_)!!' '!!trim(&key);
21105     +         if eof then do;
21106     +            put _STRING_;
21107     +            string = "%"!!"mend &name;";
21108     +            put string;
21109     +            %if (&nummacro ne ) %then %do;
21110     +                string = strip(put(_N_, best.));
21111     +                put "%" "global &nummacro;";
21112     +                put "%" "let &nummacro = " string ";";
21113     +                call symput('_METAOBS', string);
21114     +            %end;
21115     +         end;
21116     +      end;
21117     +      else do;
21118     +         put _STRING_;
21119     +         _string_ = TRIM(&key);
21120     +         if eof then do;
21121     +            put _STRING_;
21122     +            string = "%"!!"mend &name;";
21123     +            put string;
21124     +        end;
21125     +      end;
21126     +      if eof then do;
21127     +         string = strip(put(_N_, best.));
21128     +         call symput('_METAOBS', string);
21129     +         %if (&nummacro ne ) %then %do;
21130     +             put "%" "global &nummacro;";
21131     +             put "%" "let &nummacro = " string ";";
21132     +         %end;
21133     +      end;
21134     +   run;
21136     +   %doend:
21137     +   %if ^&_METAOBS %then %do;
21138     +       data _null_;
21139     +          file macFile;
21140     +          put "%" "macro &name;";
21141     +          put "%" "mend &name;";
21142     +          %if (&nummacro ne ) %then %do;
21143     +              put "%" "global &nummacro;";
21144     +              put "%" "let &nummacro = 0;";
21145     +          %end;
21146     +      run;
21147     +   %end;
21148     +   %inc macFile;
21149     +   filename macFile;
21150     +%mend em_varMacro;
NOTE: %INCLUDE (level 2) ending.
NOTE: %INCLUDE (level 1) resuming.
MPRINT(TRAIN):   filename vartemp;
NOTE: Fileref VARTEMP has been deassigned.
MPRINT(TRAIN):   data tempVariableSet;
MPRINT(TRAIN):   set EMWS2.GrfExpl_VariableSet;
MPRINT(TRAIN):   where (ROLE = 'REJECTED' and USE='Y') or ROLE='FREQ' or ( ROLE ne 'REJECTED' and USE in('Y', 'D'));
MPRINT(TRAIN):   if _N_< 950 or (ROLE = 'TARGET' and USE in('Y', 'D')) or ROLE='FREQ' then output;
MPRINT(TRAIN):   run;

NOTE: There were 16 observations read from the data set EMWS2.GRFEXPL_VARIABLESET.
      WHERE ((ROLE='REJECTED') and (USE='Y')) or (ROLE='FREQ') or ((ROLE not = 'REJECTED') and USE in ('D', 'Y'));
NOTE: The data set WORK.TEMPVARIABLESET has 16 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_VARMACRO):   filename macFile catalog 'work.emutil.macro.source';
MPRINT(EM_VARMACRO):   data _null_;
MPRINT(EM_VARMACRO):   length _STRING_ $80;
MPRINT(EM_VARMACRO):   retain _STRING_;
MPRINT(EM_VARMACRO):   set tempVariableSet end=eof;
MPRINT(EM_VARMACRO):   file macFile;
MPRINT(EM_VARMACRO):   if _N_=1 then do;
MPRINT(EM_VARMACRO):   string = "%"!!"macro varSample;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   if (length(_STRING_) + length(trim(NAME))+ 1 < 80) then do;
MPRINT(EM_VARMACRO):   _STRING_ = trim(_STRING_)!!' '!!trim(NAME);
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend varSample;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   string = strip(put(_N_, best.));
MPRINT(EM_VARMACRO):   put "%" "global numVarSample;";
MPRINT(EM_VARMACRO):   put "%" "let numVarSample = " string ";";
MPRINT(EM_VARMACRO):   call symput('_METAOBS', string);
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   else do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   _string_ = TRIM(NAME);
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend varSample;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   string = strip(put(_N_, best.));
MPRINT(EM_VARMACRO):   call symput('_METAOBS', string);
MPRINT(EM_VARMACRO):   put "%" "global numVarSample;";
MPRINT(EM_VARMACRO):   put "%" "let numVarSample = " string ";";
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   run;

NOTE: The file MACFILE is:
      Catalog Name=WORK.EMUTIL.MACRO.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=4,
      Created=Qui, 17 de Dez de 2015 00H41m,
      Last Modified=Qui, 17 de Dez de 2015 00H41m,
      Filename=C:\Users\VM-SAS\AppData\Local\Temp\SAS Temporary Files\_TD2568_VM-SAS-PC_\Prc2\emutil.sas7bcat,
      Release Created=9.0301M2,Host Created=X64_7PRO

NOTE: 9 records were written to the file MACFILE.
      The minimum record length was 16.
      The maximum record length was 76.
NOTE: There were 16 observations read from the data set WORK.TEMPVARIABLESET.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

NOTE: %INCLUDE (level 2) file MACFILE is file WORK.EMUTIL.MACRO.SOURCE.
21151     +%macro varSample;
21152     +acousticness artist_name danceability duration energy genre instrumentalness
21153     +key liveness loudness song_hotttnesss song_name speechiness tempo
21154     +time_signature valence
21155     +%mend varSample;
21156     +%global numVarSample;
21157     +%let numVarSample = 16 ;
21158     +%global numVarSample;
21159     +%let numVarSample = 16 ;
NOTE: %INCLUDE (level 2) ending.
NOTE: %INCLUDE (level 1) resuming.
MPRINT(EM_VARMACRO):   filename macFile;
NOTE: Fileref MACFILE has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(EXPLORESAMPLE):   filename x catalog 'sashelp.emutil.exploreobs.source';
NOTE: %INCLUDE (level 2) file X is file SASHELP.EMUTIL.EXPLOREOBS.SOURCE.
21160     +/*------------------------------------------------------------------
21161     +  MACRO EXPLOREOBS
21163     +  SUPPORT:  SASDHD - David Duling
21164     +  PRODUCT:  Enterprise Miner
21166     +  DESCRIPTION:
21167     +  Generates maximum and default numbers of observations to
21168     +  download for visualization depending on the record length.
21170     +  Values were determined by trial and error using typical
21171     +  Windows workstation configurations.
21173     +  Discrete sets of values are returned so that user experience
21174     +  will be consitent with similar sized data sets.
21176     +  These macro variables are set:
21177     +  _exploreobs_max -- maximum number of obs downloadable
21178     +  _exploreobs_def -- default number of obs to be downloaded
21179     +  _exploreobs_recl - record length.  Might be useful for reporting.
21181     +  Use the _exploreobs_max to set limit the GUI selection of
21182     +  observations for downloading.  The GUI selection for obs
21183     +  could be reduced to "Default" and "Max".
21185     +  Parameters
21186     +  data=   libname.memname of input data
21187     +  vars=   subset list of variables.
21188     +          downloading 1 out of 500 really does work like downloading
21189     +          1 out of 1 vars.  Users may select a subset of vars for
21190     +                   visualizations.  Pass in the list as space delimited
21191     +          var names.  If vars is not specified, the record length
21192     +          of the entire data will be used.
21193     +  NBYTES=   maximum number of bytes that shouldn't be exceeded.
21195     +  Control
21196     +  Users may control the values by entering these macro variables.
21197     +            EM_EXPLOREOBS_MAX
21198     +            EM_EXPLOREOBS_DEFAULT
21199     +  These values override the computed values.
21201     +  Debugging
21202     +  %let _exploreobs_debug=1 ;
21203     +--------------------------------------------------------------------
21204     +  HISTORY: 20APR2004. sasdhd. pushed.
21205     +           18DEC2004. sasdhd. S0280556.
21206     +           07SEP2007. sasdhd. HK1009586
21207     +--------------------------------------------------------------------*/
21209     +%macro exploreobs(data=,vars=, nbytes=) ;
21211     +   /*--- variable definitions ---*/
21212     +   %global _exploreobs_max _exploreobs_def _exploreobs_recl _exploreobs_debug ;
21213     +   %local xobs xvars xlen vlen xi vname vlist ;
21214     +   %local _exp_source _exp_notes ;
21216     +   /*--- USER definitions ---*/
21217     +   %global EM_EXPLOREOBS_MAX EM_EXPLOREOBS_DEFAULT ;
21219     +   /*--- variable intializations ---*/
21220     +   %let _exploreobs_max=0 ;
21221     +   %let _exploreobs_def=0 ;
21222     +   %let _exploreobs_recl=0 ;
21223     +   %let xvars= 0 ;
21224     +   %let xlen = 0 ;
21225     +   %let xobs = 0 ;
21227     +   /*--- data error checks ---*/
21228     +   %if "&data" eq "" %then %do ;
21229     +            %put NOTE: DATA is not specified. ;
21230     +            %goto term ;
21231     +      %end ;
21233     +   %let dsid=%sysfunc(open(&data)) ;
21234     +   %if not &dsid %then %do ;
21235     +            %put NOTE: DATA &data is not available. ;
21236     +            %goto term ;
21237     +      %end ;
21239     +   /*--- if a vars list exists generate a subset ---*/
21240     +   %if &vars ne %then %do ;
21241     +         %let dsid=%sysfunc(close(&dsid)) ;
21242     +         %if &_exploreobs_debug ne 1 %then %do ;
21243     +                  %let _exp_source=%sysfunc(getoption(SOURCE)) ;
21244     +            %let _exp_notes =%sysfunc(getoption(NOTES)) ;
21245     +                  options nosource nonotes ;
21246     +         %end ;
21247     +         data _exploreobs_temp_data ;
21248     +         set &data(obs=0) ;
21249     +          keep &vars ;
21250     +         run;
21251     +         %if &_exploreobs_debug ne 1 %then %do ;
21252     +                  options &_exp_source &_exp_notes ;
21253     +         %end ;
21254     +         %let dsid=%sysfunc(open(_exploreobs_temp_data)) ;
21255     +         %if &dsid eq 0 %then %do ;
21256     +                  %put NOTE: Sample is not available.;
21257     +                  %goto term ;
21258     +            %end ;
21259     +      %end ;
21261     +   /*--- get var attributes ---*/
21262     +   %let xvars=%sysfunc(attrn(&dsid,nvars)) ;
21263     +   %let xobs= %sysfunc(attrn(&dsid,nobs )) ;
21264     +   %let xlen= %sysfunc(attrn(&dsid,lrecl)) ;
21265     +   %let dsid= %sysfunc(close(&dsid)) ;
21267     +   /*--- set default and max obs ---*/
21268     +   %let _exploreobs_recl=%eval(&xlen) ;
21269     +   %if &_exploreobs_recl eq 0 %then %do ;
21270     +             %let _exploreobs_max= 0 ;
21271     +             %let _exploreobs_def= 0 ;
21272     +             %goto term ;
21274     +   %end ;
21275     +   %else
21276     +   %if &_exploreobs_recl le 32 %then %do ;
21277     +             %let _exploreobs_max=100000 ;
21278     +             %let _exploreobs_def= 10000 ;
21279     +   %end ;
21280     +   %else
21281     +   %if &_exploreobs_recl le 128 %then %do ;
21282     +             %let _exploreobs_max=60000 ;
21283     +             %let _exploreobs_def= 6000 ;
21284     +   %end ;
21285     +   %else
21286     +   %if &_exploreobs_recl lt 1000 %then %do ;
21287     +             %let _exploreobs_max=20000 ;
21288     +             %let _exploreobs_def= 2000 ;
21289     +   %end ;
21290     +   %else
21291     +   %if &_exploreobs_recl lt 5000 %then %do ;
21292     +             %let _exploreobs_max= 10000 ;
21293     +             %let _exploreobs_def=  1000 ;
21294     +   %end ;
21295     +   %else
21296     +   %if &_exploreobs_recl lt 20000 %then %do ;
21297     +             %let _exploreobs_max= 5000 ;
21298     +             %let _exploreobs_def=  500 ;
21299     +   %end ;
21300     +   %else %do ;
21301     +             %let _exploreobs_max= 1000 ;
21302     +             %let _exploreobs_def=  200 ;
21303     +   %end ;
21305     +   /*--- Users options ---*/
21306     +   %if &EM_EXPLOREOBS_MAX ne %then %do ;
21307     +            %let _exploreobs_max= %eval(&EM_EXPLOREOBS_MAX) ;
21308     +   %end;
21309     +   %if &EM_EXPLOREOBS_DEFAULT ne %then %do ;
21310     +            %let _exploreobs_def= %eval(&EM_EXPLOREOBS_DEFAULT) ;
21311     +   %end;
21313     +    /*--- S0868273 ---*/
21314     +    %if "&NBYTES" ne "" %then %do;
21315     +       %let nbytes_nrows = %eval(&nbytes/ &_exploreobs_recl);
21316     +       %if &EM_EXPLOREOBS_MAX ne %then %do ;
21317     +           %let _exploreobs_max   = %sysfunc(min(&nbytes_nrows , &EM_EXPLOREOBS_MAX));
21318     +       %end;
21320     +       %if &EM_EXPLOREOBS_DEFAULT ne %then %do ;
21321     +          %let nbytes_nrows      = %eval(&nbytes_nrows/10);
21322     +          %let _exploreobs_def   = %sysfunc(min(&nbytes_nrows , &EM_EXPLOREOBS_DEFAULT));
21323     +          %if ^&_exploreobs_def %then
21324     +              %let _exploreobs_def = 1;
21326     +       %end;
21327     +    %end;
21329     +   /*--- Terminate ---*/
21330     +   %term:
21332     +   %put NOTE: EXPLOREOBS &data : vars= &xvars : recl= &_exploreobs_recl : max=&_exploreobs_max : def= &_exploreobs_def ;
21333     +%mend ;
NOTE: %INCLUDE (level 2) ending.
NOTE: %INCLUDE (level 1) resuming.
MPRINT(EXPLORESAMPLE):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(EXPLOREOBS):   options nosource nonotes ;
MPRINT(EXPLOREOBS):   data _exploreobs_temp_data ;
MPRINT(EXPLOREOBS):   set EMWS2.Ids_DATA(obs=0) ;
MPRINT(EXPLOREOBS):   keep acousticness artist_name danceability duration energy genre instrumentalness key liveness loudness song_hotttnesss song_name speechiness tempo time_signature valence ;
MPRINT(EXPLOREOBS):   run;
MPRINT(EXPLOREOBS):   options SOURCE NOTES ;
NOTE: EXPLOREOBS EMWS2.Ids_DATA : vars= 16 : recl= 288 : max=20000 : def= 2000
MPRINT(EXPLORESAMPLE):   ;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EXPLORESAMPLE):  ;
*------------------------------------------------------------*
* FirstN/Top sample
*------------------------------------------------------------*
MPRINT(EXPLORESAMPLE):   data EMWS2.GrfExpl_SAMPLE_DATA;
MPRINT(EXPLORESAMPLE):   set EMWS2.Ids_DATA(obs= 2000 Keep=acousticness artist_name danceability duration energy genre instrumentalness key liveness loudness song_hotttnesss song_name speechiness tempo time_signature valence );
MPRINT(EXPLORESAMPLE):   run;

NOTE: View EMWS2.IDS_DATA.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
NOTE: There were 2272 observations read from the data set SONGS.SONGSNOMISSING.
NOTE: There were 2000 observations read from the data set EMWS2.IDS_DATA.
NOTE: The data set EMWS2.GRFEXPL_SAMPLE_DATA has 2000 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
      

MPRINT(TRAIN):  ;
MPRINT(MAIN):  ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename vartemp catalog 'sashelp.emutil.em_varmacro.source';
NOTE: %INCLUDE (level 1) file VARTEMP is file SASHELP.EMUTIL.EM_VARMACRO.SOURCE.
21336     +%macro em_varMacro(name=emMacro, metadata=, where=, key=NAME, nummacro=);
21337     +   filename macFile catalog 'work.emutil.macro.source';
21338     +   %let _METAOBS = 0;
21340     +   %if (%sysfunc(exist(&metadata))<1 and %sysfunc(exist(&metadata, VIEW))<1)
21341     +                   or (&metadata eq ) %then %do;
21342     +       %goto doend;
21343     +   %end;
21344     +   data _null_;
21345     +      length _STRING_ $80;
21346     +      retain _STRING_;
21347     +      set &metadata end=eof;
21348     +      file macFile;
21349     +      %if %nrbquote(&where) ne %then %do;
21350     +          %let whereClause = where (%nrbquote(&where));
21351     +          %unquote(&whereClause);
21352     +      %end;
21353     +      if _N_=1 then do;
21354     +         string = "%"!!"macro &name;";
21355     +         put string;
21356     +      end;
21357     +      if (length(_STRING_) + length(trim(&key))+ 1 < 80) then do;
21358     +         _STRING_ = trim(_STRING_)!!' '!!trim(&key);
21359     +         if eof then do;
21360     +            put _STRING_;
21361     +            string = "%"!!"mend &name;";
21362     +            put string;
21363     +            %if (&nummacro ne ) %then %do;
21364     +                string = strip(put(_N_, best.));
21365     +                put "%" "global &nummacro;";
21366     +                put "%" "let &nummacro = " string ";";
21367     +                call symput('_METAOBS', string);
21368     +            %end;
21369     +         end;
21370     +      end;
21371     +      else do;
21372     +         put _STRING_;
21373     +         _string_ = TRIM(&key);
21374     +         if eof then do;
21375     +            put _STRING_;
21376     +            string = "%"!!"mend &name;";
21377     +            put string;
21378     +        end;
21379     +      end;
21380     +      if eof then do;
21381     +         string = strip(put(_N_, best.));
21382     +         call symput('_METAOBS', string);
21383     +         %if (&nummacro ne ) %then %do;
21384     +             put "%" "global &nummacro;";
21385     +             put "%" "let &nummacro = " string ";";
21386     +         %end;
21387     +      end;
21388     +   run;
21390     +   %doend:
21391     +   %if ^&_METAOBS %then %do;
21392     +       data _null_;
21393     +          file macFile;
21394     +          put "%" "macro &name;";
21395     +          put "%" "mend &name;";
21396     +          %if (&nummacro ne ) %then %do;
21397     +              put "%" "global &nummacro;";
21398     +              put "%" "let &nummacro = 0;";
21399     +          %end;
21400     +      run;
21401     +   %end;
21402     +   %inc macFile;
21403     +   filename macFile;
21404     +%mend em_varMacro;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   filename vartemp;
NOTE: Fileref VARTEMP has been deassigned.
MPRINT(TRAIN):   data tempVariableSet;
MPRINT(TRAIN):   set EMWS2.GrfExpl_VariableSet;
MPRINT(TRAIN):   where (ROLE = 'REJECTED' and USE='Y') or ROLE='FREQ' or ( ROLE ne 'REJECTED' and USE in('Y', 'D'));
MPRINT(TRAIN):   if _N_< 950 or (ROLE = 'TARGET' and USE in('Y', 'D')) or ROLE='FREQ' then output;
MPRINT(TRAIN):   run;

NOTE: There were 16 observations read from the data set EMWS2.GRFEXPL_VARIABLESET.
      WHERE ((ROLE='REJECTED') and (USE='Y')) or (ROLE='FREQ') or ((ROLE not = 'REJECTED') and USE in ('D', 'Y'));
NOTE: The data set WORK.TEMPVARIABLESET has 16 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_VARMACRO):   filename macFile catalog 'work.emutil.macro.source';
MPRINT(EM_VARMACRO):   data _null_;
MPRINT(EM_VARMACRO):   length _STRING_ $80;
MPRINT(EM_VARMACRO):   retain _STRING_;
MPRINT(EM_VARMACRO):   set tempVariableSet end=eof;
MPRINT(EM_VARMACRO):   file macFile;
MPRINT(EM_VARMACRO):   if _N_=1 then do;
MPRINT(EM_VARMACRO):   string = "%"!!"macro varSample;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   if (length(_STRING_) + length(trim(NAME))+ 1 < 80) then do;
MPRINT(EM_VARMACRO):   _STRING_ = trim(_STRING_)!!' '!!trim(NAME);
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend varSample;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   string = strip(put(_N_, best.));
MPRINT(EM_VARMACRO):   put "%" "global numVarSample;";
MPRINT(EM_VARMACRO):   put "%" "let numVarSample = " string ";";
MPRINT(EM_VARMACRO):   call symput('_METAOBS', string);
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   else do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   _string_ = TRIM(NAME);
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend varSample;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   string = strip(put(_N_, best.));
MPRINT(EM_VARMACRO):   call symput('_METAOBS', string);
MPRINT(EM_VARMACRO):   put "%" "global numVarSample;";
MPRINT(EM_VARMACRO):   put "%" "let numVarSample = " string ";";
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   run;

NOTE: The file MACFILE is:
      Catalog Name=WORK.EMUTIL.MACRO.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=5,
      Created=Qui, 17 de Dez de 2015 00H41m,
      Last Modified=Qui, 17 de Dez de 2015 00H41m,
      Filename=C:\Users\VM-SAS\AppData\Local\Temp\SAS Temporary Files\_TD2568_VM-SAS-PC_\Prc2\emutil.sas7bcat,
      Release Created=9.0301M2,Host Created=X64_7PRO

NOTE: 9 records were written to the file MACFILE.
      The minimum record length was 16.
      The maximum record length was 76.
NOTE: There were 16 observations read from the data set WORK.TEMPVARIABLESET.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: %INCLUDE (level 1) file MACFILE is file WORK.EMUTIL.MACRO.SOURCE.
21405     +%macro varSample;
21406     +acousticness artist_name danceability duration energy genre instrumentalness
21407     +key liveness loudness song_hotttnesss song_name speechiness tempo
21408     +time_signature valence
21409     +%mend varSample;
21410     +%global numVarSample;
21411     +%let numVarSample = 16 ;
21412     +%global numVarSample;
21413     +%let numVarSample = 16 ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_VARMACRO):   filename macFile;
NOTE: Fileref MACFILE has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(EXPLORESAMPLE):   filename x catalog 'sashelp.emutil.exploreobs.source';
NOTE: %INCLUDE (level 1) file X is file SASHELP.EMUTIL.EXPLOREOBS.SOURCE.
21414     +/*------------------------------------------------------------------
21415     +  MACRO EXPLOREOBS
21417     +  SUPPORT:  SASDHD - David Duling
21418     +  PRODUCT:  Enterprise Miner
21420     +  DESCRIPTION:
21421     +  Generates maximum and default numbers of observations to
21422     +  download for visualization depending on the record length.
21424     +  Values were determined by trial and error using typical
21425     +  Windows workstation configurations.
21427     +  Discrete sets of values are returned so that user experience
21428     +  will be consitent with similar sized data sets.
21430     +  These macro variables are set:
21431     +  _exploreobs_max -- maximum number of obs downloadable
21432     +  _exploreobs_def -- default number of obs to be downloaded
21433     +  _exploreobs_recl - record length.  Might be useful for reporting.
21435     +  Use the _exploreobs_max to set limit the GUI selection of
21436     +  observations for downloading.  The GUI selection for obs
21437     +  could be reduced to "Default" and "Max".
21439     +  Parameters
21440     +  data=   libname.memname of input data
21441     +  vars=   subset list of variables.
21442     +          downloading 1 out of 500 really does work like downloading
21443     +          1 out of 1 vars.  Users may select a subset of vars for
21444     +                   visualizations.  Pass in the list as space delimited
21445     +          var names.  If vars is not specified, the record length
21446     +          of the entire data will be used.
21447     +  NBYTES=   maximum number of bytes that shouldn't be exceeded.
21449     +  Control
21450     +  Users may control the values by entering these macro variables.
21451     +            EM_EXPLOREOBS_MAX
21452     +            EM_EXPLOREOBS_DEFAULT
21453     +  These values override the computed values.
21455     +  Debugging
21456     +  %let _exploreobs_debug=1 ;
21457     +--------------------------------------------------------------------
21458     +  HISTORY: 20APR2004. sasdhd. pushed.
21459     +           18DEC2004. sasdhd. S0280556.
21460     +           07SEP2007. sasdhd. HK1009586
21461     +--------------------------------------------------------------------*/
21463     +%macro exploreobs(data=,vars=, nbytes=) ;
21465     +   /*--- variable definitions ---*/
21466     +   %global _exploreobs_max _exploreobs_def _exploreobs_recl _exploreobs_debug ;
21467     +   %local xobs xvars xlen vlen xi vname vlist ;
21468     +   %local _exp_source _exp_notes ;
21470     +   /*--- USER definitions ---*/
21471     +   %global EM_EXPLOREOBS_MAX EM_EXPLOREOBS_DEFAULT ;
21473     +   /*--- variable intializations ---*/
21474     +   %let _exploreobs_max=0 ;
21475     +   %let _exploreobs_def=0 ;
21476     +   %let _exploreobs_recl=0 ;
21477     +   %let xvars= 0 ;
21478     +   %let xlen = 0 ;
21479     +   %let xobs = 0 ;
21481     +   /*--- data error checks ---*/
21482     +   %if "&data" eq "" %then %do ;
21483     +            %put NOTE: DATA is not specified. ;
21484     +            %goto term ;
21485     +      %end ;
21487     +   %let dsid=%sysfunc(open(&data)) ;
21488     +   %if not &dsid %then %do ;
21489     +            %put NOTE: DATA &data is not available. ;
21490     +            %goto term ;
21491     +      %end ;
21493     +   /*--- if a vars list exists generate a subset ---*/
21494     +   %if &vars ne %then %do ;
21495     +         %let dsid=%sysfunc(close(&dsid)) ;
21496     +         %if &_exploreobs_debug ne 1 %then %do ;
21497     +                  %let _exp_source=%sysfunc(getoption(SOURCE)) ;
21498     +            %let _exp_notes =%sysfunc(getoption(NOTES)) ;
21499     +                  options nosource nonotes ;
21500     +         %end ;
21501     +         data _exploreobs_temp_data ;
21502     +         set &data(obs=0) ;
21503     +          keep &vars ;
21504     +         run;
21505     +         %if &_exploreobs_debug ne 1 %then %do ;
21506     +                  options &_exp_source &_exp_notes ;
21507     +         %end ;
21508     +         %let dsid=%sysfunc(open(_exploreobs_temp_data)) ;
21509     +         %if &dsid eq 0 %then %do ;
21510     +                  %put NOTE: Sample is not available.;
21511     +                  %goto term ;
21512     +            %end ;
21513     +      %end ;
21515     +   /*--- get var attributes ---*/
21516     +   %let xvars=%sysfunc(attrn(&dsid,nvars)) ;
21517     +   %let xobs= %sysfunc(attrn(&dsid,nobs )) ;
21518     +   %let xlen= %sysfunc(attrn(&dsid,lrecl)) ;
21519     +   %let dsid= %sysfunc(close(&dsid)) ;
21521     +   /*--- set default and max obs ---*/
21522     +   %let _exploreobs_recl=%eval(&xlen) ;
21523     +   %if &_exploreobs_recl eq 0 %then %do ;
21524     +             %let _exploreobs_max= 0 ;
21525     +             %let _exploreobs_def= 0 ;
21526     +             %goto term ;
21528     +   %end ;
21529     +   %else
21530     +   %if &_exploreobs_recl le 32 %then %do ;
21531     +             %let _exploreobs_max=100000 ;
21532     +             %let _exploreobs_def= 10000 ;
21533     +   %end ;
21534     +   %else
21535     +   %if &_exploreobs_recl le 128 %then %do ;
21536     +             %let _exploreobs_max=60000 ;
21537     +             %let _exploreobs_def= 6000 ;
21538     +   %end ;
21539     +   %else
21540     +   %if &_exploreobs_recl lt 1000 %then %do ;
21541     +             %let _exploreobs_max=20000 ;
21542     +             %let _exploreobs_def= 2000 ;
21543     +   %end ;
21544     +   %else
21545     +   %if &_exploreobs_recl lt 5000 %then %do ;
21546     +             %let _exploreobs_max= 10000 ;
21547     +             %let _exploreobs_def=  1000 ;
21548     +   %end ;
21549     +   %else
21550     +   %if &_exploreobs_recl lt 20000 %then %do ;
21551     +             %let _exploreobs_max= 5000 ;
21552     +             %let _exploreobs_def=  500 ;
21553     +   %end ;
21554     +   %else %do ;
21555     +             %let _exploreobs_max= 1000 ;
21556     +             %let _exploreobs_def=  200 ;
21557     +   %end ;
21559     +   /*--- Users options ---*/
21560     +   %if &EM_EXPLOREOBS_MAX ne %then %do ;
21561     +            %let _exploreobs_max= %eval(&EM_EXPLOREOBS_MAX) ;
21562     +   %end;
21563     +   %if &EM_EXPLOREOBS_DEFAULT ne %then %do ;
21564     +            %let _exploreobs_def= %eval(&EM_EXPLOREOBS_DEFAULT) ;
21565     +   %end;
21567     +    /*--- S0868273 ---*/
21568     +    %if "&NBYTES" ne "" %then %do;
21569     +       %let nbytes_nrows = %eval(&nbytes/ &_exploreobs_recl);
21570     +       %if &EM_EXPLOREOBS_MAX ne %then %do ;
21571     +           %let _exploreobs_max   = %sysfunc(min(&nbytes_nrows , &EM_EXPLOREOBS_MAX));
21572     +       %end;
21574     +       %if &EM_EXPLOREOBS_DEFAULT ne %then %do ;
21575     +          %let nbytes_nrows      = %eval(&nbytes_nrows/10);
21576     +          %let _exploreobs_def   = %sysfunc(min(&nbytes_nrows , &EM_EXPLOREOBS_DEFAULT));
21577     +          %if ^&_exploreobs_def %then
21578     +              %let _exploreobs_def = 1;
21580     +       %end;
21581     +    %end;
21583     +   /*--- Terminate ---*/
21584     +   %term:
21586     +   %put NOTE: EXPLOREOBS &data : vars= &xvars : recl= &_exploreobs_recl : max=&_exploreobs_max : def= &_exploreobs_def ;
21587     +%mend ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EXPLORESAMPLE):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(EXPLOREOBS):   options nosource nonotes ;
MPRINT(EXPLOREOBS):   data _exploreobs_temp_data ;
MPRINT(EXPLOREOBS):   set EMWS2.Ids_DATA(obs=0) ;
MPRINT(EXPLOREOBS):   keep acousticness artist_name danceability duration energy genre instrumentalness key liveness loudness song_hotttnesss song_name speechiness tempo time_signature valence ;
MPRINT(EXPLOREOBS):   run;
MPRINT(EXPLOREOBS):   options SOURCE NOTES ;
NOTE: EXPLOREOBS EMWS2.Ids_DATA : vars= 16 : recl= 288 : max=20000 : def= 2000
MPRINT(EXPLORESAMPLE):   ;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EXPLORESAMPLE):  ;
*------------------------------------------------------------*
* FirstN/Top sample
*------------------------------------------------------------*
MPRINT(EXPLORESAMPLE):   data EMWS2.GrfExpl_SAMPLE_DATA;
MPRINT(EXPLORESAMPLE):   set EMWS2.Ids_DATA(obs= 2000 Keep=acousticness artist_name danceability duration energy genre instrumentalness key liveness loudness song_hotttnesss song_name speechiness tempo time_signature valence );
MPRINT(EXPLORESAMPLE):   run;

NOTE: View EMWS2.IDS_DATA.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      
NOTE: There were 2272 observations read from the data set SONGS.SONGSNOMISSING.
NOTE: There were 2000 observations read from the data set EMWS2.IDS_DATA.
NOTE: The data set EMWS2.GRFEXPL_SAMPLE_DATA has 2000 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: GrfExpl;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
21590      *------------------------------------------------------------*;
21591      * End TRAIN: GrfExpl;
21592      *------------------------------------------------------------*;
21593      

21594      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
21595      * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
21596      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
21597      ;
MPRINT(EM_DIAGRAM):   ;
21598      ;
MPRINT(EM_DIAGRAM):   ;
21599      ;
MPRINT(EM_DIAGRAM):   ;
21600      ;
MPRINT(EM_DIAGRAM):   ;
21601      quit;
MPRINT(EM_DIAGRAM):   quit;
21602      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
21603      * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
21604      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
21605      /*; *"; *'; */
21606      ;
MPRINT(EM_DIAGRAM):   ;
21607      run;
MPRINT(EM_DIAGRAM):   run;
21608      quit;
MPRINT(EM_DIAGRAM):   quit;
21609      /* Reset EM Options */
21610      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
21611      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
21612      goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
