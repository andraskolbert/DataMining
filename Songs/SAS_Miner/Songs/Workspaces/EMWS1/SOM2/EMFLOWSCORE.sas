*****************************************;
*** Begin Scoring Code from PROC DMVQ ***;
*****************************************;


*** Begin Class Look-up, Standardization, Replacement ;
drop _dm_bad; _dm_bad = 0;

*** Standardize energy ;
drop T_energy ;
if missing( energy ) then T_energy = .;
else T_energy = (energy - 0.56955758084358) * 3.08903086708385;

*** Standardize tempo ;
drop T_tempo ;
if missing( tempo ) then T_tempo = .;
else T_tempo = (tempo - 117.088713093145) * 0.03360099229288;

*** Standardize valence ;
drop T_valence ;
if missing( valence ) then T_valence = .;
else T_valence = (valence - 0.41813308567662) * 3.94460445422988;

*** End Class Look-up, Standardization, Replacement ;


*** Omitted Cases;
if _dm_bad then do;
   SOM_SEGMENT = .; Distance = .;
   goto SOM2vlex ;
end; *** omitted;

*** Compute Distances and Cluster Membership;
label SOM_SEGMENT = 'SOM Segment ID' ;
label Distance = 'Distance' ;
array SOM2vads [25] _temporary_;
drop _vqclus _vqmvar _vqnvar;
_vqmvar = 0;
do _vqclus = 1 to 25; SOM2vads [_vqclus] = 0; end;
if not missing( T_energy ) then do;
   SOM2vads [1] + ( T_energy - -0.74294939017 )**2;
   SOM2vads [2] + ( T_energy - -0.34092525665621 )**2;
   SOM2vads [3] + ( T_energy - 0.06109887685758 )**2;
   SOM2vads [4] + ( T_energy - 0.46312301037138 )**2;
   SOM2vads [5] + ( T_energy - 0.86514714388518 )**2;
   SOM2vads [6] + ( T_energy - -0.7734988285988 )**2;
   SOM2vads [7] + ( T_energy - -0.371474695085 )**2;
   SOM2vads [8] + ( T_energy - 0.03054943842879 )**2;
   SOM2vads [9] + ( T_energy - 0.43257357194259 )**2;
   SOM2vads [10] + ( T_energy - 0.83459770545638 )**2;
   SOM2vads [11] + ( T_energy - -0.80404826702759 )**2;
   SOM2vads [12] + ( T_energy - -0.40202413351379 )**2;
   SOM2vads [13] + ( T_energy - 0 )**2;
   SOM2vads [14] + ( T_energy - 0.40202413351379 )**2;
   SOM2vads [15] + ( T_energy - 0.80404826702759 )**2;
   SOM2vads [16] + ( T_energy - -0.83459770545638 )**2;
   SOM2vads [17] + ( T_energy - -0.43257357194259 )**2;
   SOM2vads [18] + ( T_energy - -0.03054943842879 )**2;
   SOM2vads [19] + ( T_energy - 0.371474695085 )**2;
   SOM2vads [20] + ( T_energy - 0.7734988285988 )**2;
   SOM2vads [21] + ( T_energy - -0.86514714388518 )**2;
   SOM2vads [22] + ( T_energy - -0.46312301037138 )**2;
   SOM2vads [23] + ( T_energy - -0.06109887685758 )**2;
   SOM2vads [24] + ( T_energy - 0.34092525665621 )**2;
   SOM2vads [25] + ( T_energy - 0.74294939017 )**2;
end;
else _vqmvar + 1;
if not missing( T_tempo ) then do;
   SOM2vads [1] + ( T_tempo - -1.35833209139003 )**2;
   SOM2vads [2] + ( T_tempo - -1.00887922395277 )**2;
   SOM2vads [3] + ( T_tempo - -0.65942635651551 )**2;
   SOM2vads [4] + ( T_tempo - -0.30997348907824 )**2;
   SOM2vads [5] + ( T_tempo - 0.03947937835901 )**2;
   SOM2vads [6] + ( T_tempo - -1.02861891313227 )**2;
   SOM2vads [7] + ( T_tempo - -0.67916604569501 )**2;
   SOM2vads [8] + ( T_tempo - -0.32971317825775 )**2;
   SOM2vads [9] + ( T_tempo - 0.0197396891795 )**2;
   SOM2vads [10] + ( T_tempo - 0.36919255661676 )**2;
   SOM2vads [11] + ( T_tempo - -0.69890573487452 )**2;
   SOM2vads [12] + ( T_tempo - -0.34945286743726 )**2;
   SOM2vads [13] + ( T_tempo - 0 )**2;
   SOM2vads [14] + ( T_tempo - 0.34945286743726 )**2;
   SOM2vads [15] + ( T_tempo - 0.69890573487452 )**2;
   SOM2vads [16] + ( T_tempo - -0.36919255661676 )**2;
   SOM2vads [17] + ( T_tempo - -0.0197396891795 )**2;
   SOM2vads [18] + ( T_tempo - 0.32971317825775 )**2;
   SOM2vads [19] + ( T_tempo - 0.67916604569501 )**2;
   SOM2vads [20] + ( T_tempo - 1.02861891313227 )**2;
   SOM2vads [21] + ( T_tempo - -0.03947937835901 )**2;
   SOM2vads [22] + ( T_tempo - 0.30997348907824 )**2;
   SOM2vads [23] + ( T_tempo - 0.65942635651551 )**2;
   SOM2vads [24] + ( T_tempo - 1.00887922395277 )**2;
   SOM2vads [25] + ( T_tempo - 1.35833209139003 )**2;
end;
else _vqmvar + 1;
if not missing( T_valence ) then do;
   SOM2vads [1] + ( T_valence - -0.16337975912193 )**2;
   SOM2vads [2] + ( T_valence - 0.20089355474781 )**2;
   SOM2vads [3] + ( T_valence - 0.56516686861756 )**2;
   SOM2vads [4] + ( T_valence - 0.92944018248732 )**2;
   SOM2vads [5] + ( T_valence - 1.29371349635707 )**2;
   SOM2vads [6] + ( T_valence - -0.44596319343072 )**2;
   SOM2vads [7] + ( T_valence - -0.08168987956096 )**2;
   SOM2vads [8] + ( T_valence - 0.28258343430878 )**2;
   SOM2vads [9] + ( T_valence - 0.64685674817853 )**2;
   SOM2vads [10] + ( T_valence - 1.01113006204829 )**2;
   SOM2vads [11] + ( T_valence - -0.7285466277395 )**2;
   SOM2vads [12] + ( T_valence - -0.36427331386975 )**2;
   SOM2vads [13] + ( T_valence - 0 )**2;
   SOM2vads [14] + ( T_valence - 0.36427331386975 )**2;
   SOM2vads [15] + ( T_valence - 0.7285466277395 )**2;
   SOM2vads [16] + ( T_valence - -1.01113006204829 )**2;
   SOM2vads [17] + ( T_valence - -0.64685674817853 )**2;
   SOM2vads [18] + ( T_valence - -0.28258343430878 )**2;
   SOM2vads [19] + ( T_valence - 0.08168987956096 )**2;
   SOM2vads [20] + ( T_valence - 0.44596319343072 )**2;
   SOM2vads [21] + ( T_valence - -1.29371349635707 )**2;
   SOM2vads [22] + ( T_valence - -0.92944018248732 )**2;
   SOM2vads [23] + ( T_valence - -0.56516686861756 )**2;
   SOM2vads [24] + ( T_valence - -0.20089355474781 )**2;
   SOM2vads [25] + ( T_valence - 0.16337975912193 )**2;
end;
else _vqmvar + 1;
_vqnvar = 3 - _vqmvar;
if _vqnvar <= 1.0231815394945E-12 then do;
   SOM_SEGMENT = .; Distance = .;
end;
else do;
   SOM_SEGMENT = 1; Distance = SOM2vads [1];
   _vqfzdst = Distance * 0.99999999999988; drop _vqfzdst;
   do _vqclus = 2 to 25;
      if SOM2vads [_vqclus] < _vqfzdst then do;
         SOM_SEGMENT = _vqclus; Distance = SOM2vads [_vqclus];
         _vqfzdst = Distance * 0.99999999999988;
      end;
   end;
   Distance = sqrt(Distance * (3 / _vqnvar));
end;

*** SOM Row and Column;
label SOM_DIMENSION1 = 'SOM Dimension1' ;
label SOM_DIMENSION2 = 'SOM Dimension2' ;
label SOM_ID = 'SOM ID' ;
length SOM_ID $8;
if SOM_SEGMENT > 0 then do;
   SOM_DIMENSION1 = 1 + floor(( SOM_SEGMENT - 1) / 5);
   SOM_DIMENSION2 = 1 + mod( SOM_SEGMENT - 1, 5 );
   SOM_ID = put( SOM_DIMENSION1 ,8. );
   SOM_ID = left( SOM_ID );
   _vqlen = 1 + length( SOM_ID ); drop _vqlen;
   substr( SOM_ID , _vqlen , 1 ) = ':';
   length _dm8 $8; _dm8 = put( SOM_DIMENSION2 , 8. );
   _dm8 = left(_dm8); drop _dm8;
   substr( SOM_ID , _vqlen+1 ) = _dm8;
end;
else do; SOM_DIMENSION1 = .; SOM_DIMENSION2 = .; SOM_ID = ' '; end;
SOM2vlex :;

***************************************;
*** End Scoring Code from PROC DMVQ ***;
***************************************;
