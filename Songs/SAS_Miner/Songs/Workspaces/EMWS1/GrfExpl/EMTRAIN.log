MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "15 December 2015" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16:42:12 o'clock" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                15 December 2015
Time:                16:42:12 o'clock
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O0D77LC2 "F:\Dropbox\NOVA\1st\DataMining\Project\DataMining\Songs\SAS_Miner\Songs\Workspaces\EMWS1\GrfExpl\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O0D77LC2 new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "F:\Dropbox\NOVA\1st\DataMining\Project\DataMining\Songs\SAS_Miner\Songs\Workspaces\EMWS1\GrfExpl\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "15 December 2015" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16:42:12 o'clock" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                -Andris";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_8PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.03.01M2P081512";
MPRINT(EM_DIAGRAM):   put "EM Version:          12.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "F:\Dropbox\NOVA\1st\DataMining\Project\DataMining\Songs\SAS_Miner\Songs\Workspaces\EMWS1\GrfExpl\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "F:\Dropbox\NOVA\1st\DataMining\Project\DataMining\Songs\SAS_Miner\Songs\Workspaces\EMWS1\GrfExpl\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "F:\Dropbox\NOVA\1st\DataMining\Project\DataMining\Songs\SAS_Miner\Songs\Workspaces\EMWS1\GrfExpl\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "F:\Dropbox\NOVA\1st\DataMining\Project\DataMining\Songs\SAS_Miner\Songs\Workspaces\EMWS1\GrfExpl\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "15 December 2015" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16:42:12 o'clock" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                -Andris";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "F:\Dropbox\NOVA\1st\DataMining\Project\DataMining\Songs\SAS_Miner\Songs\Workspaces\EMWS1\GrfExpl\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "F:\Dropbox\NOVA\1st\DataMining\Project\DataMining\Songs\SAS_Miner\Songs\Workspaces\EMWS1\GrfExpl\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "F:\Dropbox\NOVA\1st\DataMining\Project\DataMining\Songs\SAS_Miner\Songs\Workspaces\EMWS1\GrfExpl\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'F:\Dropbox\NOVA\1st\DataMining\Project\DataMining\Songs\SAS_Miner\Songs\Workspaces\EMWS1\GrfExpl\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
26553      proc freq data=EMWS1.GrfExpl_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS1.GrfExpl_VariableSet noprint;
26554      table ROLE*LEVEL/out=WORK.GrfExplMETA;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.GrfExplMETA;
26555      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 17 observations read from the data set EMWS1.GRFEXPL_VARIABLESET.
NOTE: The data set WORK.GRFEXPLMETA has 5 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.05 seconds
      cpu time            0.01 seconds
      

26556      proc print data=WORK.GrfExplMETA label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.GrfExplMETA label noobs;
26557      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
26558      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
26559      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
26560      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
26561      run;

NOTE: There were 5 observations read from the data set WORK.GRFEXPLMETA.
NOTE: The PROCEDURE PRINT printed page 4.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

26562      title10;
MPRINT(EM_DIAGRAM):   title10;
26563      %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * GrfExpl: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * GrfExpl: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'Songs';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Songs';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Ids_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
26888      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
26889      * GrfExpl: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * GrfExpl: Generation of macros and macro variables;
26890      * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
26891      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

26892      %let EMEXCEPTIONSTRING=;
26893      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
26894      * TRAIN: GrfExpl;
MPRINT(EM_DIAGRAM):   * TRAIN: GrfExpl;
26895      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
26896      %let EM_ACTION = TRAIN;
26897      %let syscc = 0;
26898      %macro main;
26899         filename temp catalog 'sashelp.emexpl.graphexplore_macros.source';
26900         %include temp;
26901         filename temp;
26902      
26903         %SetProperties;
26904      
26905         %if %upcase(&EM_ACTION) = CREATE %then %do;
26906      
26907             filename temp catalog 'sashelp.emexpl.graphexplore_create.source';
26908             %include temp;
26909             filename temp;
26910             %create;
26911         %end;
26912         %else
26913         %if %upcase(&EM_ACTION) = TRAIN %then %do;
26914      
26915             filename temp catalog 'sashelp.emexpl.graphexplore_train.source';
26916             %include temp;
26917             filename temp;
26918             %train;
26919      
26920         %end;
26921         %else
26922         %if %upcase(&EM_ACTION) = REPORT %then %do;
26923      
26924             filename temp catalog 'sashelp.emexpl.graphexplore_report.source';
26925             %include temp;
26926             filename temp;
26927      
26928             %report;
26929         %end;
26930      
26931      %mend main;
26932      
26933      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emexpl.graphexplore_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.GRAPHEXPLORE_MACROS.SOURCE.
26934     +%macro SetProperties;
26935     +   %em_checkmacro(name=EM_PROPERTY_INTERVALBYTARGET,      global=Y, value=Y);
26936     +   %em_checkmacro(name=EM_PROPERTY_CLASSBYTARGET,         global=Y, value=Y);
26937     +   %em_checkmacro(name=EM_PROPERTY_DATASOURCE,            global=Y, value=SAMPLE);
26938     +   %em_checkmacro(name=EM_PROPERTY_EMSAMPLEMETHOD,        global=Y, value=FIRSTN);
26939     +   %em_checkmacro(name=EM_PROPERTY_EMSAMPLESIZE,          global=Y, value=DEFAULT);
26940     +   %em_checkmacro(name=EM_PROPERTY_EMRANDOMSEED,          global=Y, value=12345);
26941     +
26942     +%mend SetProperties;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emexpl.graphexplore_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.GRAPHEXPLORE_TRAIN.SOURCE.
26943     +%macro train;
26945     +    %let graphData = &em_import_data;
26946     +    %if "&graphData" eq "" %then
26947     +        %let graphData = &em_import_transaction;
26948     +    %if "&graphData" eq "" %then
26949     +        %let graphData = &em_import_document;
26950     +    %if "&graphData" eq "" %then
26951     +        %let graphData = &em_import_validate;
26952     +    %if "&graphData" eq "" %then
26953     +        %let graphData = &em_import_test;
26954     +    %if "&graphData" eq "" %then
26955     +        %let graphData = &em_import_score;
26957     +    %if "&graphData" eq "" %then %do;
26958     +        %let emexceptionString = exception.server.IMPORT.NODATA;
26959     +        %goto doendm;
26960     +    %end;
26962     +    %em_getname(key=SAMPLE_DATA, type=DATA);
26964     +    filename vartemp catalog 'sashelp.emutil.em_varmacro.source';
26965     +    %include vartemp;
26966     +    filename vartemp;
26968     +    data tempVariableSet;
26969     +       set &em_data_variableset;
26970     +       where (ROLE = 'REJECTED' and USE='Y') or ROLE='FREQ' or ( ROLE ne 'REJECTED' and USE in('Y', 'D'));
26971     +       if _N_< 950 or (ROLE = 'TARGET' and USE in('Y', 'D')) or ROLE='FREQ' then output;
26972     +    run;
26973     +    %em_varMacro(name=varSample, metadata=tempVariableSet, where=, key=NAME, nummacro=numVarSample);
26976     +     %exploreSample(DATA=&graphData, OUTPUT=&EM_USER_SAMPLE_DATA, METADATA=&EM_DATA_VARIABLESET, VARS=%varSample,
26977     +                      METHOD=&EM_PROPERTY_EMSAMPLEMETHOD, SIZE=&EM_PROPERTY_EMSAMPLESIZE,
26978     +                      ALPHA=, PVALUE=, SEED=&EM_PROPERTY_EMRANDOMSEED);
26980     +    %doendm:
26982     +%mend train;
26984     +%train;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename vartemp catalog 'sashelp.emutil.em_varmacro.source';
NOTE: %INCLUDE (level 2) file VARTEMP is file SASHELP.EMUTIL.EM_VARMACRO.SOURCE.
26985     +%macro em_varMacro(name=emMacro, metadata=, where=, key=NAME, nummacro=);
26986     +   filename macFile catalog 'work.emutil.macro.source';
26987     +   %let _METAOBS = 0;
26989     +   %if (%sysfunc(exist(&metadata))<1 and %sysfunc(exist(&metadata, VIEW))<1)
26990     +                   or (&metadata eq ) %then %do;
26991     +       %goto doend;
26992     +   %end;
26993     +   data _null_;
26994     +      length _STRING_ $80;
26995     +      retain _STRING_;
26996     +      set &metadata end=eof;
26997     +      file macFile;
26998     +      %if %nrbquote(&where) ne %then %do;
26999     +          %let whereClause = where (%nrbquote(&where));
27000     +          %unquote(&whereClause);
27001     +      %end;
27002     +      if _N_=1 then do;
27003     +         string = "%"!!"macro &name;";
27004     +         put string;
27005     +      end;
27006     +      if (length(_STRING_) + length(trim(&key))+ 1 < 80) then do;
27007     +         _STRING_ = trim(_STRING_)!!' '!!trim(&key);
27008     +         if eof then do;
27009     +            put _STRING_;
27010     +            string = "%"!!"mend &name;";
27011     +            put string;
27012     +            %if (&nummacro ne ) %then %do;
27013     +                string = strip(put(_N_, best.));
27014     +                put "%" "global &nummacro;";
27015     +                put "%" "let &nummacro = " string ";";
27016     +                call symput('_METAOBS', string);
27017     +            %end;
27018     +         end;
27019     +      end;
27020     +      else do;
27021     +         put _STRING_;
27022     +         _string_ = TRIM(&key);
27023     +         if eof then do;
27024     +            put _STRING_;
27025     +            string = "%"!!"mend &name;";
27026     +            put string;
27027     +        end;
27028     +      end;
27029     +      if eof then do;
27030     +         string = strip(put(_N_, best.));
27031     +         call symput('_METAOBS', string);
27032     +         %if (&nummacro ne ) %then %do;
27033     +             put "%" "global &nummacro;";
27034     +             put "%" "let &nummacro = " string ";";
27035     +         %end;
27036     +      end;
27037     +   run;
27039     +   %doend:
27040     +   %if ^&_METAOBS %then %do;
27041     +       data _null_;
27042     +          file macFile;
27043     +          put "%" "macro &name;";
27044     +          put "%" "mend &name;";
27045     +          %if (&nummacro ne ) %then %do;
27046     +              put "%" "global &nummacro;";
27047     +              put "%" "let &nummacro = 0;";
27048     +          %end;
27049     +      run;
27050     +   %end;
27051     +   %inc macFile;
27052     +   filename macFile;
27053     +%mend em_varMacro;
NOTE: %INCLUDE (level 2) ending.
NOTE: %INCLUDE (level 1) resuming.
MPRINT(TRAIN):   filename vartemp;
NOTE: Fileref VARTEMP has been deassigned.
MPRINT(TRAIN):   data tempVariableSet;
MPRINT(TRAIN):   set EMWS1.GrfExpl_VariableSet;
MPRINT(TRAIN):   where (ROLE = 'REJECTED' and USE='Y') or ROLE='FREQ' or ( ROLE ne 'REJECTED' and USE in('Y', 'D'));
MPRINT(TRAIN):   if _N_< 950 or (ROLE = 'TARGET' and USE in('Y', 'D')) or ROLE='FREQ' then output;
MPRINT(TRAIN):   run;

NOTE: There were 17 observations read from the data set EMWS1.GRFEXPL_VARIABLESET.
      WHERE ((ROLE='REJECTED') and (USE='Y')) or (ROLE='FREQ') or ((ROLE not = 'REJECTED') and USE in ('D', 'Y'));
NOTE: The data set WORK.TEMPVARIABLESET has 17 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_VARMACRO):   filename macFile catalog 'work.emutil.macro.source';
MPRINT(EM_VARMACRO):   data _null_;
MPRINT(EM_VARMACRO):   length _STRING_ $80;
MPRINT(EM_VARMACRO):   retain _STRING_;
MPRINT(EM_VARMACRO):   set tempVariableSet end=eof;
MPRINT(EM_VARMACRO):   file macFile;
MPRINT(EM_VARMACRO):   if _N_=1 then do;
MPRINT(EM_VARMACRO):   string = "%"!!"macro varSample;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   if (length(_STRING_) + length(trim(NAME))+ 1 < 80) then do;
MPRINT(EM_VARMACRO):   _STRING_ = trim(_STRING_)!!' '!!trim(NAME);
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend varSample;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   string = strip(put(_N_, best.));
MPRINT(EM_VARMACRO):   put "%" "global numVarSample;";
MPRINT(EM_VARMACRO):   put "%" "let numVarSample = " string ";";
MPRINT(EM_VARMACRO):   call symput('_METAOBS', string);
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   else do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   _string_ = TRIM(NAME);
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend varSample;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   string = strip(put(_N_, best.));
MPRINT(EM_VARMACRO):   call symput('_METAOBS', string);
MPRINT(EM_VARMACRO):   put "%" "global numVarSample;";
MPRINT(EM_VARMACRO):   put "%" "let numVarSample = " string ";";
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   run;

NOTE: The file MACFILE is:
      Catalog Name=WORK.EMUTIL.MACRO.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=4,
      Created=15 Dec 2015 Tue 16:42:13 o'clock,
      Last Modified=15 Dec 2015 Tue 16:42:13 o'clock,
      Filename=C:\Users\-Andris\AppData\Local\Temp\SAS Temporary Files\_TD7504_ANDRAS_\Prc2\emutil.sas7bcat,
      Release Created=9.0301M2,Host Created=X64_8PRO

NOTE: 9 records were written to the file MACFILE.
      The minimum record length was 16.
      The maximum record length was 76.
NOTE: There were 17 observations read from the data set WORK.TEMPVARIABLESET.
NOTE: DATA statement used (Total process time):
      real time           0.10 seconds
      cpu time            0.00 seconds
      

NOTE: %INCLUDE (level 2) file MACFILE is file WORK.EMUTIL.MACRO.SOURCE.
27054     +%macro varSample;
27055     +ID acousticness artist_name danceability duration energy genre
27056     +instrumentalness key liveness loudness song_hotttnesss song_name speechiness
27057     +tempo time_signature valence
27058     +%mend varSample;
27059     +%global numVarSample;
27060     +%let numVarSample = 17 ;
27061     +%global numVarSample;
27062     +%let numVarSample = 17 ;
NOTE: %INCLUDE (level 2) ending.
NOTE: %INCLUDE (level 1) resuming.
MPRINT(EM_VARMACRO):   filename macFile;
NOTE: Fileref MACFILE has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(EXPLORESAMPLE):   filename x catalog 'sashelp.emutil.exploreobs.source';
NOTE: %INCLUDE (level 2) file X is file SASHELP.EMUTIL.EXPLOREOBS.SOURCE.
27063     +/*------------------------------------------------------------------
27064     +  MACRO EXPLOREOBS
27066     +  SUPPORT:  SASDHD - David Duling
27067     +  PRODUCT:  Enterprise Miner
27069     +  DESCRIPTION:
27070     +  Generates maximum and default numbers of observations to
27071     +  download for visualization depending on the record length.
27073     +  Values were determined by trial and error using typical
27074     +  Windows workstation configurations.
27076     +  Discrete sets of values are returned so that user experience
27077     +  will be consitent with similar sized data sets.
27079     +  These macro variables are set:
27080     +  _exploreobs_max -- maximum number of obs downloadable
27081     +  _exploreobs_def -- default number of obs to be downloaded
27082     +  _exploreobs_recl - record length.  Might be useful for reporting.
27084     +  Use the _exploreobs_max to set limit the GUI selection of
27085     +  observations for downloading.  The GUI selection for obs
27086     +  could be reduced to "Default" and "Max".
27088     +  Parameters
27089     +  data=   libname.memname of input data
27090     +  vars=   subset list of variables.
27091     +          downloading 1 out of 500 really does work like downloading
27092     +          1 out of 1 vars.  Users may select a subset of vars for
27093     +                   visualizations.  Pass in the list as space delimited
27094     +          var names.  If vars is not specified, the record length
27095     +          of the entire data will be used.
27096     +  NBYTES=   maximum number of bytes that shouldn't be exceeded.
27098     +  Control
27099     +  Users may control the values by entering these macro variables.
27100     +            EM_EXPLOREOBS_MAX
27101     +            EM_EXPLOREOBS_DEFAULT
27102     +  These values override the computed values.
27104     +  Debugging
27105     +  %let _exploreobs_debug=1 ;
27106     +--------------------------------------------------------------------
27107     +  HISTORY: 20APR2004. sasdhd. pushed.
27108     +           18DEC2004. sasdhd. S0280556.
27109     +           07SEP2007. sasdhd. HK1009586
27110     +--------------------------------------------------------------------*/
27112     +%macro exploreobs(data=,vars=, nbytes=) ;
27114     +   /*--- variable definitions ---*/
27115     +   %global _exploreobs_max _exploreobs_def _exploreobs_recl _exploreobs_debug ;
27116     +   %local xobs xvars xlen vlen xi vname vlist ;
27117     +   %local _exp_source _exp_notes ;
27119     +   /*--- USER definitions ---*/
27120     +   %global EM_EXPLOREOBS_MAX EM_EXPLOREOBS_DEFAULT ;
27122     +   /*--- variable intializations ---*/
27123     +   %let _exploreobs_max=0 ;
27124     +   %let _exploreobs_def=0 ;
27125     +   %let _exploreobs_recl=0 ;
27126     +   %let xvars= 0 ;
27127     +   %let xlen = 0 ;
27128     +   %let xobs = 0 ;
27130     +   /*--- data error checks ---*/
27131     +   %if "&data" eq "" %then %do ;
27132     +            %put NOTE: DATA is not specified. ;
27133     +            %goto term ;
27134     +      %end ;
27136     +   %let dsid=%sysfunc(open(&data)) ;
27137     +   %if not &dsid %then %do ;
27138     +            %put NOTE: DATA &data is not available. ;
27139     +            %goto term ;
27140     +      %end ;
27142     +   /*--- if a vars list exists generate a subset ---*/
27143     +   %if &vars ne %then %do ;
27144     +         %let dsid=%sysfunc(close(&dsid)) ;
27145     +         %if &_exploreobs_debug ne 1 %then %do ;
27146     +                  %let _exp_source=%sysfunc(getoption(SOURCE)) ;
27147     +            %let _exp_notes =%sysfunc(getoption(NOTES)) ;
27148     +                  options nosource nonotes ;
27149     +         %end ;
27150     +         data _exploreobs_temp_data ;
27151     +         set &data(obs=0) ;
27152     +          keep &vars ;
27153     +         run;
27154     +         %if &_exploreobs_debug ne 1 %then %do ;
27155     +                  options &_exp_source &_exp_notes ;
27156     +         %end ;
27157     +         %let dsid=%sysfunc(open(_exploreobs_temp_data)) ;
27158     +         %if &dsid eq 0 %then %do ;
27159     +                  %put NOTE: Sample is not available.;
27160     +                  %goto term ;
27161     +            %end ;
27162     +      %end ;
27164     +   /*--- get var attributes ---*/
27165     +   %let xvars=%sysfunc(attrn(&dsid,nvars)) ;
27166     +   %let xobs= %sysfunc(attrn(&dsid,nobs )) ;
27167     +   %let xlen= %sysfunc(attrn(&dsid,lrecl)) ;
27168     +   %let dsid= %sysfunc(close(&dsid)) ;
27170     +   /*--- set default and max obs ---*/
27171     +   %let _exploreobs_recl=%eval(&xlen) ;
27172     +   %if &_exploreobs_recl eq 0 %then %do ;
27173     +             %let _exploreobs_max= 0 ;
27174     +             %let _exploreobs_def= 0 ;
27175     +             %goto term ;
27177     +   %end ;
27178     +   %else
27179     +   %if &_exploreobs_recl le 32 %then %do ;
27180     +             %let _exploreobs_max=100000 ;
27181     +             %let _exploreobs_def= 10000 ;
27182     +   %end ;
27183     +   %else
27184     +   %if &_exploreobs_recl le 128 %then %do ;
27185     +             %let _exploreobs_max=60000 ;
27186     +             %let _exploreobs_def= 6000 ;
27187     +   %end ;
27188     +   %else
27189     +   %if &_exploreobs_recl lt 1000 %then %do ;
27190     +             %let _exploreobs_max=20000 ;
27191     +             %let _exploreobs_def= 2000 ;
27192     +   %end ;
27193     +   %else
27194     +   %if &_exploreobs_recl lt 5000 %then %do ;
27195     +             %let _exploreobs_max= 10000 ;
27196     +             %let _exploreobs_def=  1000 ;
27197     +   %end ;
27198     +   %else
27199     +   %if &_exploreobs_recl lt 20000 %then %do ;
27200     +             %let _exploreobs_max= 5000 ;
27201     +             %let _exploreobs_def=  500 ;
27202     +   %end ;
27203     +   %else %do ;
27204     +             %let _exploreobs_max= 1000 ;
27205     +             %let _exploreobs_def=  200 ;
27206     +   %end ;
27208     +   /*--- Users options ---*/
27209     +   %if &EM_EXPLOREOBS_MAX ne %then %do ;
27210     +            %let _exploreobs_max= %eval(&EM_EXPLOREOBS_MAX) ;
27211     +   %end;
27212     +   %if &EM_EXPLOREOBS_DEFAULT ne %then %do ;
27213     +            %let _exploreobs_def= %eval(&EM_EXPLOREOBS_DEFAULT) ;
27214     +   %end;
27216     +    /*--- S0868273 ---*/
27217     +    %if "&NBYTES" ne "" %then %do;
27218     +       %let nbytes_nrows = %eval(&nbytes/ &_exploreobs_recl);
27219     +       %if &EM_EXPLOREOBS_MAX ne %then %do ;
27220     +           %let _exploreobs_max   = %sysfunc(min(&nbytes_nrows , &EM_EXPLOREOBS_MAX));
27221     +       %end;
27223     +       %if &EM_EXPLOREOBS_DEFAULT ne %then %do ;
27224     +          %let nbytes_nrows      = %eval(&nbytes_nrows/10);
27225     +          %let _exploreobs_def   = %sysfunc(min(&nbytes_nrows , &EM_EXPLOREOBS_DEFAULT));
27226     +          %if ^&_exploreobs_def %then
27227     +              %let _exploreobs_def = 1;
27229     +       %end;
27230     +    %end;
27232     +   /*--- Terminate ---*/
27233     +   %term:
27235     +   %put NOTE: EXPLOREOBS &data : vars= &xvars : recl= &_exploreobs_recl : max=&_exploreobs_max : def= &_exploreobs_def ;
27236     +%mend ;
NOTE: %INCLUDE (level 2) ending.
NOTE: %INCLUDE (level 1) resuming.
MPRINT(EXPLORESAMPLE):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(EXPLOREOBS):   options nosource nonotes ;
MPRINT(EXPLOREOBS):   data _exploreobs_temp_data ;
MPRINT(EXPLOREOBS):   set EMWS1.Ids_DATA(obs=0) ;
MPRINT(EXPLOREOBS):   keep ID acousticness artist_name danceability duration energy genre instrumentalness key liveness loudness song_hotttnesss song_name speechiness tempo time_signature valence ;
MPRINT(EXPLOREOBS):   run;
MPRINT(EXPLOREOBS):   options SOURCE NOTES ;
NOTE: EXPLOREOBS EMWS1.Ids_DATA : vars= 17 : recl= 288 : max=20000 : def= 2000
MPRINT(EXPLORESAMPLE):   ;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EXPLORESAMPLE):  ;
*------------------------------------------------------------*
* FirstN/Top sample
*------------------------------------------------------------*
MPRINT(EXPLORESAMPLE):   data EMWS1.GrfExpl_SAMPLE_DATA;
MPRINT(EXPLORESAMPLE):   set EMWS1.Ids_DATA(obs= 2000 Keep=ID acousticness artist_name danceability duration energy genre instrumentalness key liveness loudness song_hotttnesss song_name speechiness tempo time_signature valence );
MPRINT(EXPLORESAMPLE):   run;

NOTE: View EMWS1.IDS_DATA.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
NOTE: There were 2276 observations read from the data set DM.SONGS_WITHID.
NOTE: There were 2000 observations read from the data set EMWS1.IDS_DATA.
NOTE: The data set EMWS1.GRFEXPL_SAMPLE_DATA has 2000 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

MPRINT(TRAIN):  ;
MPRINT(MAIN):  ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename vartemp catalog 'sashelp.emutil.em_varmacro.source';
NOTE: %INCLUDE (level 1) file VARTEMP is file SASHELP.EMUTIL.EM_VARMACRO.SOURCE.
27239     +%macro em_varMacro(name=emMacro, metadata=, where=, key=NAME, nummacro=);
27240     +   filename macFile catalog 'work.emutil.macro.source';
27241     +   %let _METAOBS = 0;
27243     +   %if (%sysfunc(exist(&metadata))<1 and %sysfunc(exist(&metadata, VIEW))<1)
27244     +                   or (&metadata eq ) %then %do;
27245     +       %goto doend;
27246     +   %end;
27247     +   data _null_;
27248     +      length _STRING_ $80;
27249     +      retain _STRING_;
27250     +      set &metadata end=eof;
27251     +      file macFile;
27252     +      %if %nrbquote(&where) ne %then %do;
27253     +          %let whereClause = where (%nrbquote(&where));
27254     +          %unquote(&whereClause);
27255     +      %end;
27256     +      if _N_=1 then do;
27257     +         string = "%"!!"macro &name;";
27258     +         put string;
27259     +      end;
27260     +      if (length(_STRING_) + length(trim(&key))+ 1 < 80) then do;
27261     +         _STRING_ = trim(_STRING_)!!' '!!trim(&key);
27262     +         if eof then do;
27263     +            put _STRING_;
27264     +            string = "%"!!"mend &name;";
27265     +            put string;
27266     +            %if (&nummacro ne ) %then %do;
27267     +                string = strip(put(_N_, best.));
27268     +                put "%" "global &nummacro;";
27269     +                put "%" "let &nummacro = " string ";";
27270     +                call symput('_METAOBS', string);
27271     +            %end;
27272     +         end;
27273     +      end;
27274     +      else do;
27275     +         put _STRING_;
27276     +         _string_ = TRIM(&key);
27277     +         if eof then do;
27278     +            put _STRING_;
27279     +            string = "%"!!"mend &name;";
27280     +            put string;
27281     +        end;
27282     +      end;
27283     +      if eof then do;
27284     +         string = strip(put(_N_, best.));
27285     +         call symput('_METAOBS', string);
27286     +         %if (&nummacro ne ) %then %do;
27287     +             put "%" "global &nummacro;";
27288     +             put "%" "let &nummacro = " string ";";
27289     +         %end;
27290     +      end;
27291     +   run;
27293     +   %doend:
27294     +   %if ^&_METAOBS %then %do;
27295     +       data _null_;
27296     +          file macFile;
27297     +          put "%" "macro &name;";
27298     +          put "%" "mend &name;";
27299     +          %if (&nummacro ne ) %then %do;
27300     +              put "%" "global &nummacro;";
27301     +              put "%" "let &nummacro = 0;";
27302     +          %end;
27303     +      run;
27304     +   %end;
27305     +   %inc macFile;
27306     +   filename macFile;
27307     +%mend em_varMacro;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   filename vartemp;
NOTE: Fileref VARTEMP has been deassigned.
MPRINT(TRAIN):   data tempVariableSet;
MPRINT(TRAIN):   set EMWS1.GrfExpl_VariableSet;
MPRINT(TRAIN):   where (ROLE = 'REJECTED' and USE='Y') or ROLE='FREQ' or ( ROLE ne 'REJECTED' and USE in('Y', 'D'));
MPRINT(TRAIN):   if _N_< 950 or (ROLE = 'TARGET' and USE in('Y', 'D')) or ROLE='FREQ' then output;
MPRINT(TRAIN):   run;

NOTE: There were 17 observations read from the data set EMWS1.GRFEXPL_VARIABLESET.
      WHERE ((ROLE='REJECTED') and (USE='Y')) or (ROLE='FREQ') or ((ROLE not = 'REJECTED') and USE in ('D', 'Y'));
NOTE: The data set WORK.TEMPVARIABLESET has 17 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_VARMACRO):   filename macFile catalog 'work.emutil.macro.source';
MPRINT(EM_VARMACRO):   data _null_;
MPRINT(EM_VARMACRO):   length _STRING_ $80;
MPRINT(EM_VARMACRO):   retain _STRING_;
MPRINT(EM_VARMACRO):   set tempVariableSet end=eof;
MPRINT(EM_VARMACRO):   file macFile;
MPRINT(EM_VARMACRO):   if _N_=1 then do;
MPRINT(EM_VARMACRO):   string = "%"!!"macro varSample;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   if (length(_STRING_) + length(trim(NAME))+ 1 < 80) then do;
MPRINT(EM_VARMACRO):   _STRING_ = trim(_STRING_)!!' '!!trim(NAME);
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend varSample;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   string = strip(put(_N_, best.));
MPRINT(EM_VARMACRO):   put "%" "global numVarSample;";
MPRINT(EM_VARMACRO):   put "%" "let numVarSample = " string ";";
MPRINT(EM_VARMACRO):   call symput('_METAOBS', string);
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   else do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   _string_ = TRIM(NAME);
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend varSample;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   string = strip(put(_N_, best.));
MPRINT(EM_VARMACRO):   call symput('_METAOBS', string);
MPRINT(EM_VARMACRO):   put "%" "global numVarSample;";
MPRINT(EM_VARMACRO):   put "%" "let numVarSample = " string ";";
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   run;

NOTE: The file MACFILE is:
      Catalog Name=WORK.EMUTIL.MACRO.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=5,
      Created=15 Dec 2015 Tue 16:42:13 o'clock,
      Last Modified=15 Dec 2015 Tue 16:42:13 o'clock,
      Filename=C:\Users\-Andris\AppData\Local\Temp\SAS Temporary Files\_TD7504_ANDRAS_\Prc2\emutil.sas7bcat,
      Release Created=9.0301M2,Host Created=X64_8PRO

NOTE: 9 records were written to the file MACFILE.
      The minimum record length was 16.
      The maximum record length was 76.
NOTE: There were 17 observations read from the data set WORK.TEMPVARIABLESET.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

NOTE: %INCLUDE (level 1) file MACFILE is file WORK.EMUTIL.MACRO.SOURCE.
27308     +%macro varSample;
27309     +ID acousticness artist_name danceability duration energy genre
27310     +instrumentalness key liveness loudness song_hotttnesss song_name speechiness
27311     +tempo time_signature valence
27312     +%mend varSample;
27313     +%global numVarSample;
27314     +%let numVarSample = 17 ;
27315     +%global numVarSample;
27316     +%let numVarSample = 17 ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_VARMACRO):   filename macFile;
NOTE: Fileref MACFILE has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(EXPLORESAMPLE):   filename x catalog 'sashelp.emutil.exploreobs.source';
NOTE: %INCLUDE (level 1) file X is file SASHELP.EMUTIL.EXPLOREOBS.SOURCE.
27317     +/*------------------------------------------------------------------
27318     +  MACRO EXPLOREOBS
27320     +  SUPPORT:  SASDHD - David Duling
27321     +  PRODUCT:  Enterprise Miner
27323     +  DESCRIPTION:
27324     +  Generates maximum and default numbers of observations to
27325     +  download for visualization depending on the record length.
27327     +  Values were determined by trial and error using typical
27328     +  Windows workstation configurations.
27330     +  Discrete sets of values are returned so that user experience
27331     +  will be consitent with similar sized data sets.
27333     +  These macro variables are set:
27334     +  _exploreobs_max -- maximum number of obs downloadable
27335     +  _exploreobs_def -- default number of obs to be downloaded
27336     +  _exploreobs_recl - record length.  Might be useful for reporting.
27338     +  Use the _exploreobs_max to set limit the GUI selection of
27339     +  observations for downloading.  The GUI selection for obs
27340     +  could be reduced to "Default" and "Max".
27342     +  Parameters
27343     +  data=   libname.memname of input data
27344     +  vars=   subset list of variables.
27345     +          downloading 1 out of 500 really does work like downloading
27346     +          1 out of 1 vars.  Users may select a subset of vars for
27347     +                   visualizations.  Pass in the list as space delimited
27348     +          var names.  If vars is not specified, the record length
27349     +          of the entire data will be used.
27350     +  NBYTES=   maximum number of bytes that shouldn't be exceeded.
27352     +  Control
27353     +  Users may control the values by entering these macro variables.
27354     +            EM_EXPLOREOBS_MAX
27355     +            EM_EXPLOREOBS_DEFAULT
27356     +  These values override the computed values.
27358     +  Debugging
27359     +  %let _exploreobs_debug=1 ;
27360     +--------------------------------------------------------------------
27361     +  HISTORY: 20APR2004. sasdhd. pushed.
27362     +           18DEC2004. sasdhd. S0280556.
27363     +           07SEP2007. sasdhd. HK1009586
27364     +--------------------------------------------------------------------*/
27366     +%macro exploreobs(data=,vars=, nbytes=) ;
27368     +   /*--- variable definitions ---*/
27369     +   %global _exploreobs_max _exploreobs_def _exploreobs_recl _exploreobs_debug ;
27370     +   %local xobs xvars xlen vlen xi vname vlist ;
27371     +   %local _exp_source _exp_notes ;
27373     +   /*--- USER definitions ---*/
27374     +   %global EM_EXPLOREOBS_MAX EM_EXPLOREOBS_DEFAULT ;
27376     +   /*--- variable intializations ---*/
27377     +   %let _exploreobs_max=0 ;
27378     +   %let _exploreobs_def=0 ;
27379     +   %let _exploreobs_recl=0 ;
27380     +   %let xvars= 0 ;
27381     +   %let xlen = 0 ;
27382     +   %let xobs = 0 ;
27384     +   /*--- data error checks ---*/
27385     +   %if "&data" eq "" %then %do ;
27386     +            %put NOTE: DATA is not specified. ;
27387     +            %goto term ;
27388     +      %end ;
27390     +   %let dsid=%sysfunc(open(&data)) ;
27391     +   %if not &dsid %then %do ;
27392     +            %put NOTE: DATA &data is not available. ;
27393     +            %goto term ;
27394     +      %end ;
27396     +   /*--- if a vars list exists generate a subset ---*/
27397     +   %if &vars ne %then %do ;
27398     +         %let dsid=%sysfunc(close(&dsid)) ;
27399     +         %if &_exploreobs_debug ne 1 %then %do ;
27400     +                  %let _exp_source=%sysfunc(getoption(SOURCE)) ;
27401     +            %let _exp_notes =%sysfunc(getoption(NOTES)) ;
27402     +                  options nosource nonotes ;
27403     +         %end ;
27404     +         data _exploreobs_temp_data ;
27405     +         set &data(obs=0) ;
27406     +          keep &vars ;
27407     +         run;
27408     +         %if &_exploreobs_debug ne 1 %then %do ;
27409     +                  options &_exp_source &_exp_notes ;
27410     +         %end ;
27411     +         %let dsid=%sysfunc(open(_exploreobs_temp_data)) ;
27412     +         %if &dsid eq 0 %then %do ;
27413     +                  %put NOTE: Sample is not available.;
27414     +                  %goto term ;
27415     +            %end ;
27416     +      %end ;
27418     +   /*--- get var attributes ---*/
27419     +   %let xvars=%sysfunc(attrn(&dsid,nvars)) ;
27420     +   %let xobs= %sysfunc(attrn(&dsid,nobs )) ;
27421     +   %let xlen= %sysfunc(attrn(&dsid,lrecl)) ;
27422     +   %let dsid= %sysfunc(close(&dsid)) ;
27424     +   /*--- set default and max obs ---*/
27425     +   %let _exploreobs_recl=%eval(&xlen) ;
27426     +   %if &_exploreobs_recl eq 0 %then %do ;
27427     +             %let _exploreobs_max= 0 ;
27428     +             %let _exploreobs_def= 0 ;
27429     +             %goto term ;
27431     +   %end ;
27432     +   %else
27433     +   %if &_exploreobs_recl le 32 %then %do ;
27434     +             %let _exploreobs_max=100000 ;
27435     +             %let _exploreobs_def= 10000 ;
27436     +   %end ;
27437     +   %else
27438     +   %if &_exploreobs_recl le 128 %then %do ;
27439     +             %let _exploreobs_max=60000 ;
27440     +             %let _exploreobs_def= 6000 ;
27441     +   %end ;
27442     +   %else
27443     +   %if &_exploreobs_recl lt 1000 %then %do ;
27444     +             %let _exploreobs_max=20000 ;
27445     +             %let _exploreobs_def= 2000 ;
27446     +   %end ;
27447     +   %else
27448     +   %if &_exploreobs_recl lt 5000 %then %do ;
27449     +             %let _exploreobs_max= 10000 ;
27450     +             %let _exploreobs_def=  1000 ;
27451     +   %end ;
27452     +   %else
27453     +   %if &_exploreobs_recl lt 20000 %then %do ;
27454     +             %let _exploreobs_max= 5000 ;
27455     +             %let _exploreobs_def=  500 ;
27456     +   %end ;
27457     +   %else %do ;
27458     +             %let _exploreobs_max= 1000 ;
27459     +             %let _exploreobs_def=  200 ;
27460     +   %end ;
27462     +   /*--- Users options ---*/
27463     +   %if &EM_EXPLOREOBS_MAX ne %then %do ;
27464     +            %let _exploreobs_max= %eval(&EM_EXPLOREOBS_MAX) ;
27465     +   %end;
27466     +   %if &EM_EXPLOREOBS_DEFAULT ne %then %do ;
27467     +            %let _exploreobs_def= %eval(&EM_EXPLOREOBS_DEFAULT) ;
27468     +   %end;
27470     +    /*--- S0868273 ---*/
27471     +    %if "&NBYTES" ne "" %then %do;
27472     +       %let nbytes_nrows = %eval(&nbytes/ &_exploreobs_recl);
27473     +       %if &EM_EXPLOREOBS_MAX ne %then %do ;
27474     +           %let _exploreobs_max   = %sysfunc(min(&nbytes_nrows , &EM_EXPLOREOBS_MAX));
27475     +       %end;
27477     +       %if &EM_EXPLOREOBS_DEFAULT ne %then %do ;
27478     +          %let nbytes_nrows      = %eval(&nbytes_nrows/10);
27479     +          %let _exploreobs_def   = %sysfunc(min(&nbytes_nrows , &EM_EXPLOREOBS_DEFAULT));
27480     +          %if ^&_exploreobs_def %then
27481     +              %let _exploreobs_def = 1;
27483     +       %end;
27484     +    %end;
27486     +   /*--- Terminate ---*/
27487     +   %term:
27489     +   %put NOTE: EXPLOREOBS &data : vars= &xvars : recl= &_exploreobs_recl : max=&_exploreobs_max : def= &_exploreobs_def ;
27490     +%mend ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EXPLORESAMPLE):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(EXPLOREOBS):   options nosource nonotes ;
MPRINT(EXPLOREOBS):   data _exploreobs_temp_data ;
MPRINT(EXPLOREOBS):   set EMWS1.Ids_DATA(obs=0) ;
MPRINT(EXPLOREOBS):   keep ID acousticness artist_name danceability duration energy genre instrumentalness key liveness loudness song_hotttnesss song_name speechiness tempo time_signature valence ;
MPRINT(EXPLOREOBS):   run;
MPRINT(EXPLOREOBS):   options SOURCE NOTES ;
NOTE: EXPLOREOBS EMWS1.Ids_DATA : vars= 17 : recl= 288 : max=20000 : def= 2000
MPRINT(EXPLORESAMPLE):   ;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EXPLORESAMPLE):  ;
*------------------------------------------------------------*
* FirstN/Top sample
*------------------------------------------------------------*
MPRINT(EXPLORESAMPLE):   data EMWS1.GrfExpl_SAMPLE_DATA;
MPRINT(EXPLORESAMPLE):   set EMWS1.Ids_DATA(obs= 2000 Keep=ID acousticness artist_name danceability duration energy genre instrumentalness key liveness loudness song_hotttnesss song_name speechiness tempo time_signature valence );
MPRINT(EXPLORESAMPLE):   run;

NOTE: View EMWS1.IDS_DATA.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
NOTE: There were 2276 observations read from the data set DM.SONGS_WITHID.
NOTE: There were 2000 observations read from the data set EMWS1.IDS_DATA.
NOTE: The data set EMWS1.GRFEXPL_SAMPLE_DATA has 2000 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
      

MPRINT(TRAIN):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: GrfExpl;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
27493      *------------------------------------------------------------*;
27494      * End TRAIN: GrfExpl;
27495      *------------------------------------------------------------*;
27496      

27497      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
27498      * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
27499      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
27500      ;
MPRINT(EM_DIAGRAM):   ;
27501      ;
MPRINT(EM_DIAGRAM):   ;
27502      ;
MPRINT(EM_DIAGRAM):   ;
27503      ;
MPRINT(EM_DIAGRAM):   ;
27504      quit;
MPRINT(EM_DIAGRAM):   quit;
27505      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
27506      * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
27507      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
27508      /*; *"; *'; */
27509      ;
MPRINT(EM_DIAGRAM):   ;
27510      run;
MPRINT(EM_DIAGRAM):   run;
27511      quit;
MPRINT(EM_DIAGRAM):   quit;
27512      /* Reset EM Options */
27513      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
27514      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
27515      goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
