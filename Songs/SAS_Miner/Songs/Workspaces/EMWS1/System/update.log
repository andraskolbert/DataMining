NOTE: PROCEDURE PRINTTO used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

1 
Traverser: Traverser invoked.  MPCONNECT command is sas. 
Traverser: Beginning flow traversal 
*------------------------------------------------------------* 
* 
* Ids2 : Beginning Update 
* datetime : 16DEC2015:17:09:21 
* 
*------------------------------------------------------------* 
*------------------------------------------------------------* 
* 
* Ids2 : End Update 
* datetime : 16DEC2015:17:09:21 
* 
*------------------------------------------------------------* 
traverser_readyNode_note 
*------------------------------------------------------------* 
* 
* VarClus : Beginning Update 
* datetime : 16DEC2015:17:09:21 
* 
*------------------------------------------------------------* 
PERFORMANCE  DETAILS
38551      %let emexceptionString =;
38552      %let EMEXCEPTIONSTRING=;
38553      *------------------------------------------------------------*;
38554      * UPDATE: VarClus;
38555      *------------------------------------------------------------*;
38556      %let EM_ACTION = UPDATE;
38557      %let syscc = 0;
38558      
38559      %macro main;
38560      
38561         filename temp catalog 'sashelp.emexpl.variableclustering_macros.source';
38562         %include temp;
38563         filename temp catalog 'sashelp.emexpl.variableclustering_macros2.source';
38564         %include temp;
38565         filename temp;
38566      
38567        %SetProperties;
38568      
38569         %if %upcase(&EM_ACTION) = CREATE %then %do;
38570             filename temp catalog 'sashelp.emexpl.variableclustering_create.source';
38571             %include temp;
38572             filename temp;
38573             %create;
38574         %end;
38575         %else
38576         %if %upcase(&EM_ACTION) = TRAIN %then %do;
38577              filename temp catalog 'sashelp.emexpl.variableclustering_train.source';
38578                 %include temp;
38579                 filename temp;
38580                 %train;
38581         %end;
38582         %else
38583         %if %upcase(&EM_ACTION) = SCORE %then %do;
38584                 filename temp catalog 'sashelp.emexpl.variableclustering_score.source';
38585                 %include temp;
38586                 filename temp;
38587                 %score;
38588         %end;
38589         %else
38590         %if %upcase(&EM_ACTION) = REPORT %then %do;
38591                 filename temp catalog 'sashelp.emexpl.variableclustering_report.source';
38592                 %include temp;
38593                 filename temp;
38594                 %report;
38595         %end;
38596         /*
38597         %if %upcase(&EM_ACTION) = OPENTESTTABLE %then %do;
38598             %put 'OPENING TABLE';
38599         %end;
38600         %if %upcase(&EM_ACTION) = CLOSETESTTABLE %then %do;
38601             %put 'CLOSE TABLE';
38602         %end;
38603         */
38604      %mend main;
38605      %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS.SOURCE.
38607     +/* Initialize property macro variables */
38608     +%macro SetProperties;
38609     +   %em_checkmacro(name=EM_PROPERTY_MAXCLUS,       global=Y, value=DEFAULT);
38610     +   %em_checkmacro(name=EM_PROPERTY_HIDEVARIABLE,  global=Y, value=Y);
38611     +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,   global=Y, value=SHORT);
38612     +   %em_checkmacro(name=EM_PROPERTY_CLUSSOURCE,    global=Y, value=CORR);
38613     +   %em_checkmacro(name=EM_PROPERTY_CLUSCOMP,      global=Y, value=PRINCIPAL);
38614     +   %em_checkmacro(name=EM_PROPERTY_CLUSHIERACHY,      global=Y, value=Y);
38615     +   %em_checkmacro(name=EM_PROPERTY_INCLUDECLASSVAR,      global=Y, value=N);
38616     +   %em_checkmacro(name=EM_PROPERTY_EXPORTEDCOMP,      global=Y, value=CLUSTERCOMP);
38617     +   %em_checkmacro(name=EM_PROPERTY_MAXEIGEN,         global=Y, value=DEFAULT);
38618     +   %em_checkmacro(name=EM_PROPERTY_PROPORTION,      global=Y, value=DEFAULT);
38619     +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,      global=Y, value=SHORT);
38620     +   %em_checkmacro(name=EM_PROPERTY_TWOSTAGECLUS,      global=Y, value=AUTO);
38621     +   %em_checkmacro(name=EM_PROPERTY_SUPPRESSSAMPWARN,      global=Y, value=N);
38623     +%mend SetProperties;
38625     +%Macro MakeDummyVariables(indata=,
38626     +                          outvar=,
38627     +                          outdata=,
38628     +                          fileref=,
38629     +                          recreatecmeta=N, /* optional */
38630     +                          incmeta=,     /* optional */
38631     +                          outcmeta=,    /* optional */
38632     +                          ndummyvars=_ndummyvars
38633     +                          );
38634     +    %global &ndummyvars;
38636     +    proc dmdb batch data=&indata out=_dmdbdat dmdbcat=_dmdbcat classout=_classout;;
38637     +       class
38638     +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
38639     +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
38640     +    ;
38641     +    run;
38642     +    %let &ndummyvars = 0;
38643     +    data _null_;
38644     +    %let dsid = %sysfunc(open(work._classout));
38645     +      %let &ndummyvars = %sysfunc(attrn(&dsid, NOBS));
38646     +    %let dsid = %sysfunc(close(&dsid));
38647     +    run;
38649     +    proc dmzip data=_dmdbdat dmdbcat=_dmdbcat;
38650     +       input
38651     +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
38652     +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
38653     +        / level=nominal stdize=no;
38654     +       make outvar = &outvar;
38655     +       score data = &indata out =&outdata;
38656     +       code  file=  "&fileref";
38657     +    run;
38658     +    %if &recreatecmeta eq Y %then %do;
38659     +    proc contents data =&outvar out=_tmpds(keep=NAME LABEL);
38660     +    data _tmpds;
38661     +        set _tmpds;
38662     +           ROLE = 'INPUT';
38663     +           LEVEL = 'INTERVAL';
38664     +           CREATOR='DMZIP';
38665     +           if NAME = '_TYPE_' then delete;
38666     +    run;
38667     +    data &outcmeta;
38668     +         set &incmeta _tmpds;
38669     +    run;
38670     +    %end;
38671     +    proc datasets lib=work nolist;
38672     +      delete  _dmdbdat _dmdbcat _classout
38673     +    %if &recreatecmeta eq Y %then %do;
38674     +    _tmpds
38675     +    %end;
38676     +    ;
38677     +    quit;
38678     +%Mend MakeDummyVariables;
38680     +/*--- Determine Optimal Number of Cluster ----
38681     +%macro FindClusNum(statds=, groupds=, minvariation=);
38682     +   %global optnclus;
38683     +   data varclus_tmp(drop=_NAME_);
38684     +      set &statDs;
38685     +      where _type_ ='PROPOR';
38686     +   run;
38687     +   proc sort data=varclus_tmp;
38688     +      by _NCL_;
38689     +   run;
38690     +   proc transpose data=varclus_tmp out=varclus_tmp;
38691     +      by _NCL_;
38692     +      var %EM_INTERVAL_INPUT
38693     +      %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
38694     +      %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
38695     +      %let nvar = %sysfunc(attrn(&dsid, NVAR));
38696     +          %do i = 2 %to &nvar;
38697     +          %let varname = %sysfunc(varname(&dsid, &i));
38698     +          &varname
38699     +          %end;
38700     +      %end;
38701     +   ;
38702     +   run;
38704     +   %if &minVariation eq %then %do;
38705     +       %let minVariation = &EM_PROPERTY_MINVARIATION;
38706     +   %end;
38707     +   %if ^(0<&minVariation<100) %then %do;
38708     +       %let minVariation = 90;
38709     +   %end;
38711     +   data _null_;
38712     +      set varclus_tmp end=eof;
38713     +      by _NCL_;
38714     +      retain flag 0;
38715     +      if first._ncl_ then flag=0;
38716     +      if .<col1 < &minVariation then flag=1;
38717     +      if last._ncl_ and ^flag then do;
38718     +         call symput('OPTNCL', _ncl_);
38719     +         stop;
38720     +      end;
38721     +     if eof then call symput('OPTNCL', _ncl_);
38722     +   run;
38724     +   %let optnclus = &OPTNCL;
38726     +   data varclus_tmp(drop=_NCL_ _NAME_);
38727     +      set &statDs;
38728     +      where _type_ in('RSQUARED' 'GROUP') and _NCL_=&OPTNCL;
38729     +   run;
38730     +   proc sort data=varclus_tmp;
38731     +      by _TYPE_;
38732     +   run;
38733     +   proc transpose data=varclus_tmp out=varclus_tmp;
38734     +      by _TYPE_;
38735     +   run;
38736     +   proc sort data=varclus_tmp;
38737     +      by _name_ _type_;
38738     +   run;
38740     +  proc transpose data=varclus_tmp out=&groupds;
38741     +      by _NAME_;
38742     +   run;
38743     +   proc sort data=&groupDs(rename=(col1=Cluster col2=Rsquare _NAME_=VARIABLE));
38744     +      by Cluster descending Rsquare;
38745     +      where Cluster ne 0;
38746     +   run;
38747     +   proc datasets lib=work nolist mt=(DATA VIEW);
38748     +      delete varclus_tmp;
38749     +   run;
38750     +   quit;
38751     +%mend findClusNum;
38752     +*/
38754     +%macro getNclusfromTrain(inoutstat=, nc=);
38755     +%global &nc;
38756     +data _null_;
38757     +    set &inoutstat end=eof;
38758     +    if eof then do;
38759     +    call symput("&nc", _ncl_);
38760     +    end;
38761     +run;
38762     +%mend  getNclusfromTrain;
38764     +%macro MakeDeltaCode(groupds=, outstatscore=, deltacodefile=);
38766     +     *--- Build Code to Modify Metadata ---*;
38767     +     filename X "&deltacodefile";
38768     +     data _null_;
38769     +        FILE X;
38770     +        set &groupds end=eof;
38771     +        /*by Cluster;*/
38772     +         if _N_=1 then do;
38773     +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
38774     +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
38775     +           %end;
38776     +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
38777     +           put "if upcase(strip(NAME)) in (";
38778     +        end;
38779     +        if Strip(upcase(Selected)) eq 'YES' then do;
38780     +           string = '"'!!trim(left(VARIABLE))!!'"';
38781     +           put string;
38782     +        end;
38783     +        if eof then do;
38784     +           put ') then ROLE="INPUT";';
38785     +           put 'else ROLE="REJECTED";';
38786     +           put 'end;';
38788     +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
38789     +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
38790     +           %end;
38791     +        end;
38792     +     run;
38793     +     quit;
38795     +     filename X;
38797     +     quit;
38798     +%mend MakeDeltaCode;
38800     +%macro MakeVarClusCorrData(statds=, corrds=, corrplotds= );
38801     +    %if ^%sysfunc(exist(&statds)) %then %do;
38802     +         %goto doendc;
38803     +    %end;
38805     +    data &corrds(drop=_TYPE_ _NCL_) ;
38806     +       set &statds;
38807     +       where _type_ eq 'CORR' ;
38808     +    run ;
38809     +    proc sort data=&corrds;
38810     +       by _NAME_ ;
38811     +    run ;
38812     +    proc transpose data=&corrds out=&corrplotds name=_TMP_;
38813     +      BY _NAME_ ;
38814     +    run ;
38815     +    data &corrplotds;
38816     +       length _Y_ $100;
38817     +       set &corrplotDs;
38818     +       if _LABEL_ ne '' then _Y_=_LABEL_ ; else _Y_=_TMP_ ;
38819     +    run ;
38820     +    data varclus_match(rename=(_TMP_= _NAME_ _LABEL_=_X_));
38821     +       set &corrplotds;
38822     +       where _LABEL_ ne '' ;
38823     +       keep _TMP_ _LABEL_ ;
38824     +    run ;
38825     +    data _null_;
38826     +       nobs=0;
38827     +       dsid = open('varclus_match');
38828     +       if dsid then do;
38829     +          nobs = attrn(dsid, 'NOBS');
38830     +          dsid = close(dsid);
38831     +       end;
38832     +       call symput ('CORR_NOBS', nobs);
38833     +    run;
38834     +    %if &corr_nobs %then %do;
38835     +        proc sort data=varclus_match;
38836     +           by _name_;
38837     +        run ;
38838     +        proc sort data=&corrplotds;
38839     +           by _name_;
38840     +        run ;
38841     +        data &corrplotds(keep= _X_ _Y_ col1 rename=(col1=Correlation)) ;
38842     +           merge varclus_match &corrplotds;
38843     +           by _NAME_ ;
38844     +           if _X_ eq '' then _X_=_NAME_ ;
38845     +           label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
38846     +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
38847     +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
38849     +       run ;
38850     +    %end;
38851     +    %else %do;
38852     +        proc sort data=&corrplotds;
38853     +           by _name_;
38854     +        run ;
38855     +        data &corrplotds(keep= _NAME_ _Y_ col1 rename=(_NAME_=_X_ col1=Correlation)) ;
38856     +           set &corrplotds;
38857     +           label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
38858     +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
38859     +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
38861     +        run ;
38862     +    %end;
38863     +    proc sort data=&corrplotds;
38864     +       by _X_ _Y_;
38865     +    run ;
38866     +    proc datasets lib=work nolist mt=(DATA VIEW);
38867     +       delete varclus_match;
38868     +    run;
38869     +    quit;
38871     +%doendc:
38873     +%mend MakeVarClusCorrData;
38875     +%macro MakeStatPlotData(statds= , outstatplotds=);
38876     +   %if %sysfunc(exist(&statds)) %then %do;
38878     +       data varclus_tmp(drop=_NAME_ _NCL_) ;
38879     +          set &statDs;
38880     +          where _type_ in('MEAN', 'STD', 'N');
38881     +       run ;
38882     +       proc transpose data=varclus_tmp out=&outstatplotds;
38883     +          id _TYPE_ ;
38884     +       run ;
38885     +       data &outstatplotds;
38886     +          set &outstatplotds(obs=1000);
38887     +          label _name_= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_name, noquote))";
38888     +          label _label_="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
38889     +          if MEAN ne 0 then SCALEDSTD= STD / MEAN ;
38890     +          else SCALEDSTD= STD ;
38891     +          label SCALEDSTD = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_scaledstd, noquote))";
38892     +       run ;
38893     +       proc sort data=&outstatplotds;
38894     +          by descending SCALEDSTD ;
38895     +       run ;
38896     +       proc datasets lib=work nolist mt=(DATA VIEW);
38897     +          delete varclus_tmp;
38898     +       run;
38899     +       quit;
38900     +    %end;
38902     +%mend MakeStatPlotData;
38905     +%macro CreateScoreCode(indata=, ncluscomp=, fileref=);
38906     +     %EM_GETNAME(KEY=OUTSTATSCORE, type=DATA);
38907     +    data &EM_USER_OUTSTATSCORE;
38908     +          set &indata;
38909     +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
38910     +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
38911     +          if _TYPE_ = 'STD' then _NAME_='STD';
38912     +          DROP _TYPE_ _NCL_;
38913     +     run;
38915     +     filename _file_  "&fileRef";
38917     +     data _null_;
38918     +        FILE _file_ MOD;
38919     +        put ' ';
38920     +        put '/*-------------------------------------------------*/';
38921     +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_begin , noquote))" '*/';
38922     +        put '/*-------------------------------------------------*/';
38923     +        put ' ';
38924     +        %let dsid = %sysfunc(open(&EM_USER_OUTSTATSCORE));
38926     +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
38927     +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
38929     +        %let k = 1;
38930     +        %do %while(^%sysfunc(fetch(&dsid)));
38931     +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
38932     +                %if &k > 2 %then %do;
38933     +                 %let cn = %eval(&k-2);
38934     +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_cluscompnum, noquote, &cn))"  "------ */";
38935     +                %end;
38936     +                %let k = %eval(&k+1);
38937     +        %end;
38939     +        %let rc = %sysfunc(rewind(&dsid));
38941     +        %do i= 2 %to &nvar;
38942     +            %let _varname =  %sysfunc(varname(&dsid, &i));
38943     +            %do %while(^%sysfunc(fetch(&dsid)));
38944     +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
38945     +                %if &_name = MEAN %then
38946     +                %let _mean = %sysfunc(getvarn(&dsid, &i));
38947     +                %else %if &_name = STD %then
38948     +                %let _std = %sysfunc(getvarn(&dsid, &i));
38949     +                %else %do;
38950     +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
38951     +                      %let abscoeff = %sysfunc(abs(&coeff));
38952     +                          %if &abscoeff >  0 %then %do;
38953     +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
38954     +                           %end;
38955     +                 %end;
38956     +             %end;
38957     +             %let rc = %sysfunc(rewind(&dsid));
38958     +         %end;
38960     +        %let dsid= %sysfunc(close(&dsid));
38961     +       run;
38962     +%mend CreateScoreCode;
38966     +/*----------------------------------------------------------
38967     +    Instead of using %MakeRSquareData,
38968     +    %MakeVarClusResultTable at macro2.source is used
38969     + +----------------------------------------------------------*/
38972     +%macro MakeRSquareData(indata=, inClusRSquare=, outdata=, ncluster=);
38974     +/* modifying  from ods rsquare = data */
38976     +data &outdata(drop= ControlVar  NumberOfClusters CurrentCluster);
38977     +    Length Cluster $16;
38978     +    length Variable $32;
38979     +    Length VariableLabel $64;
38980     +    set &indata; retain CurrentCluster;
38981     +    if NumberOfClusters ^= &ncluster then delete;
38982     +    if strip(Cluster) eq '' then Cluster = CurrentCluster;
38983     +    CurrentCluster = Cluster;
38984     +   run;
38985     +proc sort data =&outdata ;
38986     +     by Cluster RsquareRatio;
38987     +run;
38988     +data _tmprsq(drop=index);
38989     +     set &outdata; by Cluster;
38990     +     if first.Cluster then do;
38991     +     index = strip(scan(Cluster,2 ));
38992     +     Variable = "Clus"||index;
38993     +     VariableLabel = "Cluster Component "||index;
38994     +     OwnCluster = 1;
38995     +     NextClosest = .;
38996     +     RsquareRatio = 0;
38997     +     output;
38998     +     end;
38999     +run;
39001     +proc sort data = _tmprsq ;
39002     +     by Cluster RsquareRatio;
39003     +run;
39004     +data &outdata;
39005     +     set &outdata _tmprsq;
39006     +by Cluster;
39007     +run;
39010     +/* Just create the Selected variable with all YES */
39012     +data &outdata;
39013     +    set &outdata; by cluster;
39014     +    length Selected $8;
39015     +    Selected = 'YES';
39016     +    label  OwnCluster = 'R-Sqaure with Cluster Component';
39017     +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
39018     +    rename OwnCluster = RSqWithClusterComp;
39019     +    rename NextClosest = RSqWithNextClusComp;
39020     +run;
39023     +/* Selected = Y/N will be done %score section -----
39025     +%if &EM_PROPERTY_EXPORTEDCOMP ne CLUSTERCOMP %then %do;
39026     +data &outdata;
39027     +    set &outdata; by cluster;
39028     +    length Selected $8;
39029     +    if first.Cluster then Selected = 'YES';
39030     +    else Selected = 'NO';
39031     +    label  OwnCluster = 'R-Sqaure with Cluster Component';
39032     +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
39033     +    rename OwnCluster = RSqWithClusterComp;
39034     +    rename NextClosest = RSqWithNextClusComp;
39035     +run;
39036     +%end;
39037     +%else %do;
39038     +data &outdata;
39039     +    set &outdata; by cluster;
39040     +    if last.Cluster then Selected = 'YES';
39041     +    else Selected = 'NO';
39042     +    label  OwnCluster = 'R-Sqaure with Cluster Component';
39043     +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
39044     +    rename OwnCluster = RSqWithClusterComp;
39045     +    rename NextClosest = RSqWithNextClusComp;
39046     +run;
39047     +%end;
39048     +---------------------------------------------------------------*/
39050     +%if %sysfunc(exist(&inClusRSquare)) %then %do;
39051     +/* to calculate NextClosestClusRsq */
39052     +proc transpose data = &inClusRSquare  out=_clusRsq;
39053     +      by cluster;
39054     +      run;
39055     +data _clusRsq;
39056     +     set _clusRsq;
39057     +     if strip(upcase(Cluster)) eq strip(upcase(_NAME_)) then delete;
39058     +run;
39060     +proc sort data=_clusRsq;
39061     +    by cluster col1;
39062     +    run;
39063     +data _clusRsq(drop=_NAME_ _LABEL_);
39064     +     set _clusRsq; by cluster;
39065     +     if last.Cluster then output;
39066     +     label  COL1 = 'R-Sqaure with Next Cluster Component';
39067     +     rename COL1 = RSqWithNextClusComp;
39068     +     rename Cluster = Variable;
39069     +     label  Cluster = "Variable";
39070     +run;
39072     +proc sort data =&outdata;
39073     +     by Variable;
39074     +run;
39075     +data &outdata;
39076     +    merge &outdata _clusRsq;
39077     +    by Variable;
39078     +run;
39079     +proc sort data =&outdata;
39080     +by Cluster  RsquareRatio;
39081     +run;
39082     +quit;
39083     +%end;
39085     +proc datasets lib = work nolist;
39086     +     delete _tmprsq _clusRsq;
39087     +     run;
39088     +quit;
39090     +%mend MakeRSquareData;
39093     +/*-------------------------------------------------------------------------*/
39097     +%macro ModifyCorr(indata=,
39098     +                  outdata=,
39099     +                  rsquare = Y
39100     +                  );
39101     +    data corr_tmp;
39102     +        set &indata;
39103     +    run;
39104     +     proc sql;
39105     +           update &indata
39106     +           set
39107     +     %let dsid = %sysfunc(open(work.corr_tmp));
39108     +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
39109     +          %do i = 4 %to &nvar;
39110     +          %let _name = %sysfunc(varname(&dsid, &i));
39111     +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
39112     +            %else  %let _name_md = &_name;
39113     +            %if &i < &nvar %then %do;
39114     +               &_name = 1- &_name_md ,
39115     +            %end;
39116     +            %else %do;
39117     +               &_name = &_name_md where _TYPE_ contains 'CORR' ;
39118     +            %end;
39119     +          %end;
39120     +      %let dsid= %sysfunc(close(&dsid));
39122     +      select * from &indata;
39123     +      run;
39124     +      proc datasets lib = work nolist;
39125     +           delete corr_tmp;
39126     +      run;
39127     +      quit;
39129     + %mend ModifyCorr;
39131     + %macro MakeClusStructCorrData(indata=,outdata=, ncluster=, Rsquare=N);
39132     +    data &outdata(drop= _NCL_  _TYPE_);
39133     +       set &indata;
39134     +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
39135     +       rename _NAME_ = Cluster;
39136     +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
39137     +    run;
39138     +    %if &RSquare eq Y %then %do;
39139     +     data corr_tmp;
39140     +        set &outdata;
39141     +     run;
39143     +     data &outdata(drop=i);
39144     +          set &outdata;
39145     +          %let dsid = %sysfunc(open(work.corr_tmp));
39146     +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
39147     +          %do i = 2 %to &nvar;
39148     +            %let _name = %sysfunc(varname(&dsid, &i));
39149     +            %let _name_md = &_name.**2;
39150     +                &_name = &_name_md;
39151     +          %end;
39152     +      %let dsid= %sysfunc(close(&dsid));
39153     +      run;
39154     +      proc datasets lib = work nolist;
39155     +           delete corr_tmp;
39156     +      run;
39158     +    %end;
39159     +     quit;
39160     +%mend MakeClusStructCorrData;
39162     +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, RSquare=N, makeplotds=N, plotds=);
39163     +    data &outdata(drop= _NCL_  _TYPE_);
39164     +       set &indata;
39165     +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
39166     +       rename _NAME_ = Cluster;
39167     +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
39168     +    run;
39169     +    data corr_tmp;
39170     +        set &outdata;
39171     +    run;
39173     +    %let dsid = %sysfunc(open(work.corr_tmp));
39174     +    %let nclus2= %eval(&ncluster+1);
39175     +    data &outdata;
39176     +         set &outdata;
39177     +          %do i = 2 %to &nclus2;
39178     +          %let i_1 = %eval(&i-1);
39179     +            %let _name = %sysfunc(varname(&dsid, &i));
39180     +            %let _newName = Clus&i_1;
39181     +                rename &_name = &_newName; ;
39182     +                *label &_name ="Cluster &i_1";
39183     +                label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
39184     +          %end;
39185     +          keep Cluster
39186     +          %do i = 2 %to &nclus2;
39187     +                %let _name = %sysfunc(varname(&dsid, &i));
39188     +                &_name
39189     +          %end;
39190     +          ;
39191     +    %let dsid= %sysfunc(close(&dsid));
39192     +     run;
39193     +     quit;
39195     +    %if &RSquare eq Y %then %do;
39197     +       data corr_tmp;
39198     +        set &outdata;
39199     +     run;
39201     +     data &outdata(drop=i);
39202     +          set &outdata;
39203     +          %let dsid = %sysfunc(open(work.corr_tmp));
39204     +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
39205     +          %do i = 2 %to &nvar;
39206     +            %let _name = %sysfunc(varname(&dsid, &i));
39207     +            %let _name_md = &_name.**2;
39208     +                &_name = &_name_md;
39209     +          %end;
39210     +      %let dsid= %sysfunc(close(&dsid));
39211     +      run;
39212     +    %end;
39214     +    %if &makeplotds eq Y %then %do;
39215     +     proc transpose data = &outdata
39216     +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
39217     +          by cluster;
39218     +     run;
39219     +     data &plotds;
39220     +          set  &plotds;
39221     +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
39222     +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
39223     +     run;
39224     +     %end;
39225     +     proc datasets lib = work nolist;
39226     +           delete corr_tmp;
39227     +     run;
39228     +     quit;
39229     +%mend MakeInterClusCorrData;
39232     +%macro MakeClusConstellData(indata=, outlink=, outnode=);
39234     +data &outlink(drop = Selected);
39235     +     set &indata;
39236     +     LINKID = _N_;
39237     +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
39238     +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
39239     +run;
39240     +data &outnode(keep=NODEID TYPE LABEL);
39241     +    set &indata;
39242     +    length TYPE $16;
39243     +    rename Variable = NODEID;
39244     +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
39245     +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
39246     +    then  TYPE = "CLUSTER";
39247     +    else  TYPE="VARIABLE";
39248     +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
39249     +run;
39250     +quit;
39251     +%mend MakeClusConstellData;
39255     +%macro MakeClusConstellData(indata=, outlink=, outnode=);
39257     +data &outlink(drop = Selected);
39258     +     set &indata;
39259     +     LINKID = _N_;
39260     +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
39261     +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
39262     +run;
39263     +data &outnode(keep=NODEID TYPE LABEL);
39264     +    set &indata;
39265     +    length TYPE $16;
39266     +    rename Variable = NODEID;
39267     +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
39268     +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
39269     +    then  TYPE = "CLUSTER";
39270     +    else  TYPE="VARIABLE";
39271     +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
39272     +run;
39273     +quit;
39274     +%mend MakeClusConstellData;
39277     +/*--- This will work only when inds is not a view data -------
39279     +%macro getNVarNObs(inds=, nvar=, nobs=);
39281     +    %global &nvar;
39282     +    %global &nobs;
39283     +    data _null_;
39284     +         dsid = open("&inds");
39285     +         nv = attrn(dsid, 'NVAR');
39286     +         no = attrn(dsid, 'NOBS');
39287     +         dsid = close(dsid);
39288     +         call symput("&nvar", nv);
39289     +         call symput("&nobs", no);
39290     +    run;
39291     +    quit;
39292     +%mend  getNVarNObs;
39294     ++---------------------------------------------------------------*/
39297     +%macro getNVar(inds=, nvar=);
39298     +    %global &nvar;
39299     +    data _null_;
39300     +         dsid = open("&inds");
39301     +         nv = attrn(dsid, 'NVAR');
39302     +         dsid = close(dsid);
39303     +         call symput("&nvar", nv);
39304     +    run;
39305     +    quit;
39306     +%mend  getNVar;
39310     +%macro getNObs(inds=, nobs=);
39311     +    %global &nobs;
39312     +    data _null_;
39313     +        set &inds end=eof;
39314     +        if eof then call symput("&nobs", _N_);
39315     +    run;
39316     +    quit;
39317     +%mend  getNObs;
39319     +%Macro CreateVarclusMeta(trainnum=);
39320     +   %EM_GETNAME(KEY=VARCLUSMETA, TYPE=DATA);
39321     +    data &EM_USER_VARCLUSMETA;
39322     +         length TrainNum 8.;
39323     +         length NewTrain $8;
39324     +         length NGCluster 8.;
39325     +         length ExportedComp $16;
39326     +         length HideVariable $8;
39327     +         TrainNum = &trainnum;
39328     +         NewTrain = "Y";
39329     +         ExportedComp = "&EM_PROPERTY_EXPORTEDCOMP";
39330     +         HideVariable = "&EM_PROPERTY_HIDEVARIABLE";
39331     +         NGCluster = 0; /* zero means no twostage */
39332     +   run;
39333     +   quit;
39334     +%mend CreateVarclusMeta;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS2.SOURCE.
39336     +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, globalclusid=, RSquare=N, makeplotds=N, plotds=);
39337     +    data &outdata(drop= _NCL_  _TYPE_);
39338     +       set &indata;
39339     +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
39340     +       %if &globalclusid ne %then %do;
39341     +       _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
39342     +       rename _NAME_ = Cluster;
39343     +       %end;
39344     +       %else %do;
39345     +        _NAME_ = upcase(_NAME_);
39346     +       rename _NAME_ = Cluster;
39347     +       %end;
39348     +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
39349     +    run;
39350     +    data corr_tmp;
39351     +        set &outdata;
39352     +    run;
39354     +    %let dsid = %sysfunc(open(work.corr_tmp));
39355     +    %let nclus2= %eval(&ncluster+1);
39356     +    data &outdata;
39357     +         set &outdata;
39358     +          %do i = 2 %to &nclus2;
39359     +          %let i_1 = %eval(&i-1);
39360     +            %let _name = %sysfunc(varname(&dsid, &i));
39361     +            %if &globalclusid ne %then
39362     +                %do; %let _newName = GC&globalclusid._CLUS&i_1;
39363     +                     rename &_name = &_newName;
39364     +                     *label &_name ="GC &globalclusid : Cluster &i_1";
39365     +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gc_clusternum, noquote,  &globalclusid, &i_1))";
39366     +                %end;
39367     +            %else
39368     +                %do; %let _newName = CLUS&i_1;
39369     +                     rename &_name = &_newName;
39370     +                     *label &_name ="Cluster &i_1";
39371     +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
39372     +                %end;
39373     +          %end;
39374     +          keep Cluster
39375     +          %do i = 2 %to &nclus2;
39376     +                %let _name = %sysfunc(varname(&dsid, &i));
39377     +                &_name
39378     +          %end;
39379     +          ;
39380     +    %let dsid= %sysfunc(close(&dsid));
39381     +     run;
39382     +     quit;
39384     +    %if &RSquare eq Y %then %do;
39386     +       data corr_tmp;
39387     +        set &outdata;
39388     +     run;
39390     +     data &outdata;
39391     +          set &outdata;
39392     +          %let dsid = %sysfunc(open(work.corr_tmp));
39393     +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
39394     +          %do i = 2 %to &nvar;
39395     +            %let _name = %sysfunc(varname(&dsid, &i));
39396     +            %let _name_md = &_name.**2;
39397     +                &_name = &_name_md;
39398     +          %end;
39399     +      %let dsid= %sysfunc(close(&dsid));
39400     +      run;
39401     +    %end;
39403     +    %if &makeplotds eq Y %then %do;
39404     +     proc transpose data = &outdata
39405     +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
39406     +          by cluster;
39407     +     run;
39408     +     data &plotds;
39409     +          set  &plotds;
39410     +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
39411     +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
39412     +          label  Correlation="%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
39413     +     run;
39414     +     %end;
39415     +     proc datasets lib = work nolist;
39416     +           delete corr_tmp;
39417     +     run;
39418     +     quit;
39419     +%mend MakeInterClusCorrData;
39421     +%macro MakeOwnRSquare(indata=, outdata=, ncluster=, globalclusid=);
39422     +    data _tmpds(drop= _NCL_);
39423     +       set &indata;
39424     +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) in ('GROUP','RSQUARED')) then delete;
39425     +       %if &globalclusid ne %then %do;
39426     +           _NAME_ = "GC&globalclusid.";
39427     +       rename _NAME_ = Cluster;
39428     +       %end;
39429     +       %else %do;
39430     +        _NAME_ = "CLUS";
39431     +        rename _NAME_ = Cluster;
39432     +       %end;
39433     +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
39434     +    run;
39435     +    proc transpose data =_tmpds out =&outdata;
39436     +    run;
39438     +    data &outdata(drop=COL1);
39439     +        %if &globalclusid ne %then %do;
39440     +        length GCluster $16;
39441     +        %end;
39442     +        length Cluster $32;
39443     +        length _NAME_ $32;
39444     +         set &outdata;
39445     +         _NAME_ = upcase(_NAME_);
39446     +         rename _NAME_=Variable;
39447     +         *label _NAME_="Variable";
39448     +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
39449     +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
39450     +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
39452     +         %if &globalclusid ne %then %do;
39453     +          GCluster = "GC&globalclusid";
39454     +          Cluster = "GC&globalclusid._CLUS"||strip(COL1);
39455     +         %end;
39456     +         %else %do;
39457     +         Cluster = "CLUS"||strip(COL1);
39458     +        %end;
39459     +         rename COL2 = RSqWithOwnClusComp;
39460     +         *label COL2 = "R-Square With Own Cluster Component";
39461     +         label COL2 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
39463     +   run;
39464     +   proc sort data =&outdata;
39465     +        by Cluster RSqWithOwnClusComp;
39466     +   run;
39467     +   proc datasets lib = work nolist;
39468     +           delete _tmpds;
39469     +   run;
39470     +   quit;
39471     +%mend MakeOwnRSquare;
39473     +%macro MakeClusStructCorrData(indata=, outdata=, globalclusid=, ncluster=, Rsquare=N);
39474     +    data &outdata(drop= _NCL_  _TYPE_);
39475     +       %if &globalclusid ne %then %do;
39476     +        length GCluster $16;
39477     +        %end;
39478     +       set &indata;
39479     +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
39480     +       %if &globalclusid ne %then %do;
39481     +         GCluster = "GC&globalclusid";
39482     +         _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
39483     +         rename _NAME_ = Cluster;
39484     +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
39485     +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
39487     +       %end;
39488     +       %else %do;
39489     +         _NAME_ = upcase(_NAME_);
39490     +         rename _NAME_ = Cluster;
39491     +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
39492     +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
39494     +       %end;
39495     +     run;
39496     +    %if &RSquare eq Y %then %do;
39497     +     data corr_tmp;
39498     +          set &outdata;
39499     +     run;
39500     +     %let istart = 2;
39501     +     %if &globalclusid ne %then %let istart = 3;
39502     +     data &outdata;
39503     +          set &outdata;
39504     +          %let dsid = %sysfunc(open(work.corr_tmp));
39505     +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
39506     +          %do i =&istart %to &nvar;
39507     +            %let _name = %sysfunc(varname(&dsid, &i));
39508     +            %let _name_md = &_name.**2;
39509     +                &_name = &_name_md;
39510     +          %end;
39511     +      %let dsid= %sysfunc(close(&dsid));
39512     +      run;
39513     +      proc datasets lib = work nolist;
39514     +           delete corr_tmp;
39515     +      run;
39516     +    %end;
39517     +     quit;
39518     +%mend MakeClusStructCorrData;
39520     +/*
39521     +%MakeClusStructCorrData(indata=playpen._outstat, outdata=_structrsq , ncluster=7, Rsquare=Y);
39522     +*/
39524     +%macro FindNextClosestClusByVar(indata=, outdata=, globalclusid=, ncluster=);
39526     +     /* The indata should be the outdata
39527     +        from %MakeClusStructCorrData(indata=, outdata=, ); */
39529     +     proc sort data =&indata out=_tmpclusRsq;
39530     +     by cluster;
39531     +     run;
39533     +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
39534     +      by cluster;
39535     +     run;
39537     +     proc sort data=_tmpclusRsq;
39538     +        by _NAME_ COL1;
39539     +     run;
39541     +     data _tmpclusRsq;
39542     +         length _NAME_ $32;
39543     +         set _tmpclusRsq; by _NAME_;
39544     +          _NAME_ = upcase(_NAME_);
39545     +          %if &ncluster ne 1 %then %do;
39546     +             if last._NAME_ then delete;
39547     +          %end;
39548     +          %else %do;
39549     +             COL1 = 0;
39550     +          %end;
39551     +     run;
39552     +     /* need to sort again */
39553     +     proc sort data=_tmpclusRsq;
39554     +        by _NAME_ COL1;
39555     +     run;
39557     +     data &outdata;
39558     +         set _tmpclusRsq; by _NAME_;
39559     +         Cluster = upcase(Cluster);
39560     +         if last._NAME_ then output;
39561     +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
39562     +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
39563     +         rename COL1 = RSqWithNextClusComp;
39564     +         Cluster = upcase(Cluster);
39565     +         rename Cluster = ClosestCluster;
39566     +         *label  Cluster = "Next Closest Cluster";
39567     +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
39568     +         rename _NAME_ = Variable;
39569     +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
39570     +    run;
39573     +    %if &globalclusid ne %then %do;
39574     +    data &outdata;
39575     +       length GCluster $16;
39576     +       set &outdata;
39577     +       GCluster = "GC&globalclusid";
39578     +       run;
39579     +    %end;
39580     +    proc datasets lib = work nolist;
39581     +           delete _tmpclusRsq;
39582     +    run;
39583     +    quit;
39584     +%mend FindNextClosestClusByVar;
39587     +%macro FindNextClosestClusByCluster(indata=, outdata=, globalclusid=, ncluster=);
39588     +     /* The indata should be the outdata from %MakeInterClusCorrData(indata=, outdata=, ); */
39589     +     proc sort data =&indata out=_tmpclusRsq;
39590     +     by cluster;
39591     +     run;
39592     +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
39593     +     by cluster;
39594     +     run;
39595     +     proc sort data=_tmpclusRsq;
39596     +        by _NAME_ col1;
39597     +     run;
39598     +     data _tmpclusRsq;
39599     +         length _NAME_ $32;
39600     +         set _tmpclusRsq; by _NAME_;
39601     +          _NAME_ = upcase(_NAME_);
39602     +          %if &ncluster ne 1 %then %do;
39603     +             if last._NAME_ then delete;
39604     +          %end;
39605     +          %else %do;
39606     +             COL1 = 0;
39607     +          %end;
39608     +     run;
39609     +     data &outdata;
39610     +         set _tmpclusRsq; by _NAME_;
39611     +         Cluster = upcase(Cluster);
39612     +         if last._NAME_ then output;
39613     +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
39614     +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
39615     +         rename COL1 = RSqWithNextClusComp;
39616     +         Cluster = upcase(Cluster);
39617     +         rename Cluster = ClosestCluster;
39618     +         *label  Cluster = "Next Closest Cluster";
39619     +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
39620     +         rename _NAME_ = Variable;
39621     +         *label  _NAME_ = "Variable";
39622     +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
39624     +    run;
39625     +    %if &globalclusid ne %then %do;
39626     +    data &outdata;
39627     +       length GCluster $16;
39628     +       set &outdata;
39629     +       GCluster = "GC&globalclusid";
39630     +       run;
39631     +    %end;
39633     +    proc datasets lib = work nolist;
39634     +           delete _tmpclusRsq;
39635     +    run;
39637     +    quit;
39638     +%mend FindNextClosestClusByCluster;
39640     +%macro MakeVarClusResultTable(indata1=, indata2=, indata3=, outdata=, globalclusid=, ncluster=, selectedcomp=clustercomp);
39641     +/*----
39642     +  indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq,
39643     +-----------*/
39645     +proc sort data =&indata1;
39646     +    by Variable;
39647     +run;
39648     +proc sort data =&indata2;
39649     +    by Variable;
39650     +run;
39651     +data &outdata;
39652     +    merge &indata1 &indata2;
39653     +    by Variable;
39654     +    length Type $16;
39655     +    Type = 'Variable';
39656     +    *label Type ='Type';
39657     +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
39658     +run;
39661     +data &indata3;
39662     +    set  &indata3 ;
39663     +    length RSqWithOwnClusComp 8.;
39664     +    Cluster = Variable;
39665     +    RSqWithOwnClusComp = 1;
39666     +    *label RSqWithOwnClusComp = "R-Square With Own Cluster Component";
39667     +    label RSqWithOwnClusComp = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
39668     +    length Type $16;
39669     +    Type = 'ClusterComp';
39670     +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
39672     +;
39673     +run;
39675     +proc sort data=&outdata;
39676     +    by Cluster;
39677     +run;
39678     +proc sort data =&indata3;
39679     +    by Cluster;
39680     +run;
39682     +data &outdata;
39683     +     set &outdata &indata3;
39684     +     by Cluster;
39685     +run;
39688     +/* Create the Selected variable with all YES */
39690     +data &outdata;
39691     +     set &outdata;
39692     +     length RsqRatio 8.;
39693     +     length Selected $8;
39694     +     *label RSqRatio = "1-R**2 Ratio";
39695     +     label RSqRatio =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_oneminusrsq, noquote))" ;
39696     +     *label Selected = "Variable Selected";
39697     +     label Selected = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_varselected, noquote))" ;
39698     +     RsqRatio = (1-RSqWithOwnClusComp)/(1-RSqWithNextClusComp);
39699     +     Selected ='YES';
39700     +     rename _LABEL_ = Label;
39701     +     label _LABEL_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
39702     +run;
39705     +/*----  Selected = Y/N will be assigened at the %score                   -------+
39706     +        Just create the Selected variable with all YES at the step above
39707     + +------------------------------------------------------------------------------+
39709     +proc sort data=&outdata;
39710     +    by Cluster RsqRatio;
39711     +run;
39713     +%if &selectedcomp eq CLUSTERCOMP %then %do;
39714     +data &outdata;
39715     +     set &outdata; by Cluster;
39716     +     length Selected $8;
39717     +     label Selected = "Variable Selected";
39718     +     if  first.Cluster then Selected ='Yes';
39719     +     else Selected = 'No';
39720     +    run;
39721     +%end;
39722     +%else %do;
39723     +data &outdata(drop = _var _varchange);
39724     +     set &outdata; retain _var 0; by Cluster;
39725     +     length Selected $8;
39726     +     label Selected = "Variable Selected";
39727     +     if first.Cluster then  _varchange = 0;
39728     +     else _varchange =1;
39729     +     if _var ne _varchange then  Selected  = 'Yes';
39730     +     else Selected = 'No';
39731     +     if last.cluster then  _var = 0;
39732     +     else _var = _varchange;
39733     +run;
39734     +%end;
39736     +--------------------------------------------------------------*/
39738     +quit;
39739     +%mend MakeVarClusResultTable;
39741     +%Macro MakePlotDataFromCorrTable(indata=, outdata=, globalclusid=);
39742     +     proc sort data =&indata;
39743     +        by cluster;
39744     +     run;
39745     +     proc transpose data =&indata
39746     +          out=&outdata(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
39747     +          by cluster;
39748     +     run;
39749     +     data &outdata;
39750     +          set  &outdata;
39751     +          label x= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
39752     +          label Y= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
39753     +          label Correlation = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))" ;
39754     +     run;
39755     +     %if &globalclusid ne %then %do;
39756     +     data &outdata;
39757     +          Length GCluster $16;
39758     +          label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
39759     +          set  &outdata;
39760     +          GCluster ="GC&globalclusid.";
39761     +          run;
39762     +     %end;
39764     +%Mend MakePlotDataFromCorrTable;
39767     +%macro MakeCorrelation(indata=,
39768     +                       outstat=_tmpoutstat,
39769     +                       corrmatrix=N,
39770     +                       outcorr=_tmpoutcorr,
39771     +                       includeclassvar=N,
39772     +                       target=,
39773     +                       freq=,
39774     +                       weight=);
39775     +   %if &target eq  %then %do;
39777     +       proc varclus data=&indata outstat=&outstat hi maxclusters=1 noprint;
39778     +            var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED
39779     +       %if &includeclassvar eq Y %then %do;
39780     +          %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
39781     +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
39782     +          %do i = 2 %to &nvar;
39783     +          %let varname = %sysfunc(varname(&dsid, &i));
39784     +          &varname
39785     +          %end;
39786     +       %end;
39787     +       ;
39788     +      %if &freq ne  %then %do;
39789     +          freq &freq;
39790     +      %end;
39791     +      %if &weight ne  %then %do;
39792     +          weight &weight;
39793     +      %end;
39795     +      run;
39796     +      %if &corrmatrix eq Y %then %do;
39797     +      data  &outcorr (drop = _NCL_ _TYPE_);
39798     +           set  &outstat ;
39799     +           if _TYPE_ ='CORR' then output;
39800     +      run;
39801     +      %end;
39802     +    %end;
39803     +    %else %do;
39804     +       proc corr data=&indata outp=&outstat noprint;
39805     +            var
39806     +       %let dsid = %sysfunc(open(&indata));
39807     +       %let nvar = %sysfunc(attrn(&dsid, NVAR));
39808     +          %do i = 1 %to &nvar;
39809     +              %let _name = %sysfunc(varname(&dsid, &i));
39810     +              %if &_name ne &target %then;
39811     +              &_name
39812     +           %end;
39813     +        %let dsid= %sysfunc(close(&dsid));
39814     +        ;
39815     +        with &target;
39816     +        run;
39817     +    %end;
39818     +    quit;
39819     +%mend MakeCorrelation;
39822     +%macro MakeCorrelationDistance(indata=,
39823     +                               outdata=,
39824     +                               rsquare = N
39825     +                               );
39826     +    data corr_tmp;
39827     +        set &indata;
39828     +        if _N_ = 1 then do;
39829     +           output;
39830     +           stop;
39831     +         end;
39832     +    run;
39833     +    %if &outdata ne  %then %let  _outdata = &outdata;
39834     +    %else %let _outdata = &indata;
39836     +    data &_outdata;
39837     +         set &indata;
39839     +         %let dsid = %sysfunc(open(work.corr_tmp));
39840     +         %let nvar = %sysfunc(attrn(&dsid, NVAR));
39841     +          %do i = 2 %to &nvar;
39842     +              %let _name = %sysfunc(varname(&dsid, &i));
39843     +              %if &rsquare eq Y %then %let _name_md = &_name.**2;
39844     +              %else  %let _name_md = &_name;
39845     +              &_name = 1- &_name_md;
39846     +          %end;
39847     +      %let dsid= %sysfunc(close(&dsid));
39848     +      run;
39849     +      proc datasets lib = work nolist;
39850     +           delete corr_tmp;
39851     +      run;
39852     +      quit;
39853     +  %mend MakeCorrelationDistance;
39856     +%macro UpdateOutStatCorrToDistance(indata=, /* indata should be a outstat from proc varclus */
39857     +                                   rsquare = N
39858     +                                   );
39859     +    data corr_tmp;
39860     +        set &indata;
39861     +    run;
39862     +    proc sql noprint;
39863     +           update &indata
39864     +           set
39865     +     %let dsid = %sysfunc(open(work.corr_tmp));
39866     +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
39867     +          %do i = 4 %to &nvar;
39868     +          %let _name = %sysfunc(varname(&dsid, &i));
39869     +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
39870     +            %else  %let _name_md = &_name;
39871     +            %if &i < &nvar %then %do;
39872     +               &_name = 1- &_name_md ,
39873     +            %end;
39874     +            %else %do;
39875     +               &_name = &_name_md where _TYPE_ eq 'CORR' ;
39876     +            %end;
39877     +          %end;
39878     +      %let dsid= %sysfunc(close(&dsid));
39880     +      select * from &indata;
39881     +      run;
39882     +     data &indata( drop = _NCL_);
39883     +           set &indata;
39884     +           if _TYPE_ not in ('CORR', 'STD', 'N', 'MEAN') then delete;
39885     +           if _TYPE_ ='CORR' then _TYPE_ ='DISTANCE';
39886     +     run;
39887     +     data &indata(DROP = _NCL_);
39888     +           set &indata;
39889     +           if _TYPE_ = 'CORR' then _TYPE_ ='DISTANCE';
39890     +           if _TYPE_ not in ('DISTANCE', 'N', 'STD', 'MEAN') then delete;
39891     +           rename _NAME_ = _VAR_;
39892     +     run;
39893     +     proc datasets lib = work nolist;
39894     +           delete corr_tmp;
39895     +     run;
39896     +     quit;
39897     + %mend UpdateOutStatCorrToDistance;
39900     +%macro HierClusWithCorr(indata= ,
39901     +                        ncluster=,
39902     +                        method = Ward,
39903     +                        outtree = _outtree,
39904     +                        idvar =_VAR_,
39905     +                        outdata=,
39906     +                        rescore = N,
39907     +                        newncluster=
39908     +                        );
39909     +      %global &newncluster;
39910     +      %if &rescore ne Y %then %do;
39911     +      proc cluster data=&indata(type=Distance where=(upcase(strip(_TYPE_)) = "DISTANCE"))
39912     +                   method=&method outtree=&outtree noprint;
39913     +           id &idvar;
39914     +      run;
39915     +      %end;
39916     +      proc tree data=&outtree nclusters = &ncluster out=&outdata noprint;
39917     +      run;
39918     +      /* ----- Check some variables like CL1, CL5..., remove them ----*/
39919     +      proc contents data =&indata out=_outcontent(keep=NAME) noprint;
39920     +      run;
39921     +      data _outcontent;
39922     +          set _outcontent;
39923     +          if NAME in ('_TYPE_' , '_VAR_') then delete;
39924     +          index = 1;
39925     +          rename NAME = _NAME_;
39926     +      run;
39927     +      proc sort data=_outcontent;
39928     +          by _NAME_;
39929     +      run;
39930     +      proc sort data =&outdata;
39931     +           by _NAME_;
39932     +      run;
39933     +      data &outdata(drop=index);
39934     +          merge &outdata _outcontent;
39935     +          by _NAME_;
39936     +          if index = . then delete;
39937     +      run;
39938     +      /*-----------------------------------------------------------*/
39939     +      data &outdata;
39940     +           length CLUSNAME $16;
39941     +           set &outdata;
39942     +           if CLUSTER > &ncluster then delete;
39943     +           CLUSNAME='GC'||strip(CLUSTER);
39944     +           *label CLUSNAME = "Cluster Name";
39945     +           label CLUSNAME  = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername, noquote))" ;
39946     +           rename _NAME_ = VARIABLE ;
39947     +           *label _NAME_ = "Variable";
39948     +           *label CLUSTER = "Cluster";
39949     +           label _NAME_ ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
39950     +           label CLUSTER ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
39951     +      run;
39952     +      proc sort data=&outdata out=&outdata;
39953     +           by CLUSTER;
39954     +      run;
39955     +      proc means data =&outdata noprint;
39956     +           output out=_meanout;
39957     +      run;
39958     +      data _null_;
39959     +            set _meanout;
39960     +            if strip(_STAT_) eq 'MAX' then do;
39961     +            call symput("&newncluster", CLUSTER);
39962     +            stop;
39963     +            end;
39964     +      run;
39966     +      proc datasets lib = work nolist;
39967     +           delete _outcontent _meanout;
39968     +      run;
39969     +      quit;
39970     +%mend  HierClusWithCorr;
39972     +%macro CreateScoreCode2(indata=, ncluscomp=, globalclusid=, fileref=);
39974     +     data _tmpindata;
39975     +          set &indata;
39976     +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
39977     +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
39978     +          if _TYPE_ = 'STD' then _NAME_='STD';
39979     +          if _TYPE_ = 'SCORE' then _NAME_=upcase("GC&globalclusid._"||_NAME_);
39980     +          DROP _TYPE_ _NCL_;
39981     +     run;
39983     +     filename _file_  "&fileRef";
39985     +     data _null_;
39986     +        FILE _file_ MOD;
39987     +        put ' ';
39988     +        put "/*-------------------------------------------------*/";
39989     +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_gclus, noquote, &globalclusid))" '*/';
39990     +        put "/*-------------------------------------------------*/";
39991     +        put ' ';
39992     +        %let dsid = %sysfunc(open(work._tmpindata));
39994     +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
39995     +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
39996     +        %let k = 1;
39997     +        %do %while(^%sysfunc(fetch(&dsid)));
39998     +               %let _name = %sysfunc(getvarc(&dsid, &vn_name));
39999     +               %if &k > 2 %then %do;
40000     +                %let cn = %eval(&k-2);
40001     +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_gcluscompnum, noquote, &globalclusid, &cn))" "------ */";
40002     +                %end;
40003     +                %let k = %eval(&k+1);
40005     +        %end;
40006     +        %let rc = %sysfunc(rewind(&dsid));
40008     +        %do j= 2 %to &nvar;
40009     +            %let _varname = %sysfunc(varname(&dsid, &j));
40010     +            %do %while(^%sysfunc(fetch(&dsid)));
40011     +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
40012     +                %if &_name = MEAN %then
40013     +                %let _mean = %sysfunc(getvarn(&dsid, &j));
40014     +                %else %if &_name = STD %then
40015     +                %let _std = %sysfunc(getvarn(&dsid, &j));
40016     +                %else %do;
40017     +                      %let coeff =  %sysfunc(getvarn(&dsid, &j));
40018     +                      %let abscoeff = %sysfunc(abs(&coeff));
40019     +                          %if &abscoeff >  0 %then %do;
40020     +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
40021     +                           %end;
40022     +                 %end;
40023     +             %end;
40024     +             %let rc = %sysfunc(rewind(&dsid));
40025     +         %end;
40027     +        %let dsid= %sysfunc(close(&dsid));
40029     +     run;
40031     +     filename _file_;
40032     +     proc datasets lib = work nolist;
40033     +           delete _tmpindata;
40034     +     run;
40035     +     quit;
40036     +%mend CreateScoreCode2;
40039     +%macro MakeDeltaCode2(groupds=,deltacodefile=);
40041     +     /*--- Build Code to Modify Metadata ---*/
40042     +     filename X "&deltacodefile";
40043     +     data _null_;
40044     +        FILE X;
40045     +        set &groupds end=eof;
40046     +        if _N_=1 then do;
40047     +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
40048     +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
40049     +           %end;
40050     +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
40051     +           put "if upcase(strip(NAME)) in (";
40052     +        end;
40053     +        if Strip(upcase(Selected)) eq 'YES' then do;
40054     +           string = '"'!!trim(left(VARIABLE))!!'"';
40055     +           put string;
40056     +        end;
40057     +        if eof then do;
40058     +           put ') then ROLE="INPUT";';
40059     +           put 'else ROLE="REJECTED";';
40060     +           put 'end;';
40062     +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
40063     +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
40064     +           %end;
40065     +        end;
40066     +     run;
40067     +     quit;
40069     +     filename X;
40070     +     quit;
40071     +%mend MakeDeltaCode2;
40073     +%macro getInitialGClusterNumber(indata=, ninput=, ndummy=0, div=100, ngc=);
40074     +  %global &ngc;
40075     +  data _null_;
40076     +  %if &indata ne %then %do;
40077     +      %let dsid = %sysfunc(open(&indata));
40078     +           %let nvar = %sysfunc(attrn(&dsid, NVAR));
40079     +      %let dsid = %sysfunc(close(&dsid));
40080     +  %end;
40081     +  %else %do;
40082     +       %let nvar = %eval(&ninput+&ndummy); ;
40083     +  %end;
40084     +  %let numgc = %eval(&nvar/&div+2);
40085     +  %let &ngc = &numgc;
40086     +   run;
40087     +  quit;
40088     +%mend getInitialGClusterNumber;
40091     +%macro MakeGobalConstellData(indata=, outlink=, outnode=);
40092     +data &outlink(drop = Selected);
40093     +     set &indata;
40094     +     LINKID = _N_;
40095     +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid, noquote))" ;
40096     +run;
40097     +data &outnode(keep=NODEID TYPE LABEL);
40098     +    set &indata;
40099     +    length TYPE $16;
40100     +    rename VARIABLE = NODEID;
40101     +    *label  CLUSNAME="Node ID";
40102     +    label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
40103     +    TYPE = "VARIABLE";
40104     +    *label TYPE = "Node Type";
40105     +    label TYPE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
40106     +    run;
40107     +data _tmp(keep=NODEID TYPE LABEL);
40108     +    set &indata;
40109     +    length TYPE $16;
40110     +    rename CLUSNAME = NODEID;
40111     +    label  CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
40112     +    TYPE = "GCLUSTER";
40113     +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
40114     +    run;
40115     +proc sort data=_tmp;
40116     +    by NODEID;
40117     +run;
40118     +data _tmp;
40119     +    set _tmp; by NODEID;
40120     +    if first.NODEID then output;
40121     +run;
40122     +proc sort data=&outnode;
40123     +    by NODEID;
40124     +run;
40125     +data  &outnode;
40126     +    set _tmp &outnode;
40127     +run;
40128     +proc datasets lib = work nolist;
40129     +     delete _tmp;
40130     +run;
40131     +quit;
40132     +%mend MakeGobalConstellData;
40134     +/* Make contellation plot data among GCLUSTERS */
40136     +%Macro MakeGClusterConstData(indata=, inoutrsq=, outnode=, outlink=);
40138     +data &outlink(keep = _NAME_ _PARENT_ _LABEL_ LINKID);
40139     +     set &indata;
40140     +     LINKID = _N_;
40141     +     if upcase(substr(strip(_NAME_),1, 2))="CL" then do;
40142     +        _NAME_ = "ROOT"||upcase(substr(strip(_NAME_),5));
40143     +     end;
40144     +     if _PARENT_ ne " " and upcase(substr(strip(_PARENT_),1, 2))="CL" then do;
40145     +        _PARENT_ = "ROOT"||upcase(substr(strip(_PARENT_),5));
40146     +     end;
40147     +     if upcase(substr(strip(_LABEL_),1, 2))="CL" then do;
40148     +        _LABEL_ = "ROOT"||upcase(substr(strip(_LABEL_),5));
40149     +    end;
40150     +run;
40152     +data _tmp_outrsquare;
40153     +        set &inoutrsq;
40154     +        if upcase(strip(TYPE)) = 'CLUSTERCOMP' then delete;
40155     +run;
40157     +proc freq data =_tmp_outrsquare noprint;
40158     +         tables GCluster/out=_tmp_GCLUSFREQ(rename=(GCLUSTER=_NAME_));
40159     +run;
40161     +data &outnode(keep=_NAME_ TYPE LABEL);
40162     +    set &outlink;
40163     +    length TYPE $16;
40164     +    length LABEL $100;
40165     +    /*label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;*/
40167     +    if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
40168     +    TYPE = "GCLUSTER";
40169     +    LABEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
40170     +    end;
40171     +    else do;
40172     +    TYPE= "ROOT";
40173     +    LABEL= _NAME_;
40174     +    end;
40175     +    label TYPE  =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
40176     +    label LABEL =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
40177     +    label _NAME_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
40178     +    run;
40180     +proc sort data=&outnode;
40181     +     by _NAME_;
40182     +proc sort data=_tmp_GCLUSFREQ;
40183     +     by _NAME_;
40184     +run;
40186     +data  &outnode;
40187     +     merge &outnode _tmp_GCLUSFREQ; by _NAME_;
40188     +     if COUNT=. then COUNT=1;
40189     +run;
40191     +proc datasets lib = work nolist;
40192     +     delete _tmp_outrsquare _tmp_GCLUSFREQ;
40193     +run;
40195     +quit;
40196     +%Mend MakeGClusterConstData;
40199     +%macro CreateGClusterScoreCode(indata=,  globalclusid=, fileref=);
40201     +    data _gscoretmpds;
40202     +          set &indata;
40203     +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = 1 ) or (_TYPE_ in ('MEAN' 'STD'));
40204     +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
40205     +          if _TYPE_ = 'STD' then _NAME_='STD';
40206     +          if _TYPE_ = 'SCORE' then _NAME_ = "GC"||strip(&globalclusid);
40207     +          DROP _TYPE_ _NCL_;
40208     +     run;
40210     +    /*  %let gscorefile =  %bquote(&EM_NODEDIR)&EM_DSEP.gclusterscore.sas;
40211     +        GCluster Component &globalclusid ------ */
40213     +    filename _file_  "&fileref";
40215     +    data _null_;
40216     +        %if &globalclusid eq 1 %then %do;
40217     +          FILE _file_;
40218     +        %end;
40219     +        %else %do;
40220     +          FILE _file_ MOD;
40221     +        %end;
40223     +        %let dsid = %sysfunc(open(work._gscoretmpds));
40224     +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
40225     +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
40227     +        %let k = 1;
40228     +        %do %while(^%sysfunc(fetch(&dsid)));
40229     +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
40230     +                %if &k > 2 %then %do;
40231     +                put "&_name = 0 ; ";
40232     +                %end;
40233     +                %let k = %eval(&k+1);
40234     +        %end;
40236     +        %let rc = %sysfunc(rewind(&dsid));
40237     +        %do i= 2 %to &nvar;
40238     +            %let _varname =  %sysfunc(varname(&dsid, &i));
40239     +            %do %while(^%sysfunc(fetch(&dsid)));
40240     +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
40241     +                %if &_name = MEAN %then
40242     +                %let _mean = %sysfunc(getvarn(&dsid, &i));
40243     +                %else %if &_name = STD %then
40244     +                %let _std = %sysfunc(getvarn(&dsid, &i));
40245     +                %else %do;
40246     +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
40247     +                      %let abscoeff = %sysfunc(abs(&coeff));
40248     +                          %if &abscoeff >  0 %then %do;
40249     +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
40250     +                           %end;
40251     +                 %end;
40252     +             %end;
40253     +             %let rc = %sysfunc(rewind(&dsid));
40255     +         %end;
40257     +        %let dsid= %sysfunc(close(&dsid));
40258     +       run;
40261     +       proc datasets lib=work nolist;
40262     +            delete _gscoretmpds;
40263     +       run;
40264     +      quit;
40266     +%mend CreateGClusterScoreCode;
40269     +%macro MakeGClusterCorrelation(Indata=, ngcluster=, gscorecode=, outrsquare=);
40271     +   %EM_REGISTER(KEY=GSCORE, TYPE=DATA);
40272     +   %EM_GETNAME(KEY=GSCORE, TYPE=DATA);
40273     +   %EM_REGISTER(KEY=GSCORESTAT, TYPE=DATA);
40274     +   %EM_GETNAME(KEY=GSCORESTAT, TYPE=DATA);
40275     +   %EM_REGISTER(KEY=GSCORETREE, TYPE=DATA);
40276     +   %EM_GETNAME(KEY=GSCORETREE, TYPE=DATA);
40277     +   %EM_REGISTER(KEY=GSCORECORR, TYPE=DATA);
40278     +   %EM_GETNAME(KEY=GSCORECORR, TYPE=DATA);
40279     +   %EM_REGISTER(KEY=GSCORECORRPLOT, TYPE=DATA);
40280     +   %EM_GETNAME(KEY=GSCORECORRPLOT, TYPE=DATA);
40281     +   %EM_REGISTER(KEY=GCLUSLINK, TYPE=DATA);
40282     +   %EM_GETNAME(KEY=GCLUSLINK, TYPE=DATA);
40283     +   %EM_REGISTER(KEY=GCLUSNODE, TYPE=DATA);
40284     +   %EM_GETNAME(KEY=GCLUSNODE, TYPE=DATA);
40286     +   filename gsfile "&gscorecode";
40288     +   data &EM_USER_GSCORE;
40289     +             set &indata;
40290     +             %include  gsfile;
40291     +        keep
40292     +        %do i=1 %to &ngcluster;
40293     +         %let gcvarname = GC&i;
40294     +         &gcvarname
40295     +        %end;
40296     +     ;
40297     +   run;
40299     +   proc varclus data=&EM_USER_GSCORE outstat=&EM_USER_GSCORESTAT outtree=&EM_USER_GSCORETREE
40300     +    %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
40301     +    %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
40302     +    %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
40303     +    noprint  ;
40304     +     var
40305     +       %do i=1 %to &ngcluster;
40306     +         %let gcvarname = GC&i;
40307     +         &gcvarname
40308     +        %end;
40309     +   ;
40310     +   run;
40313     +   %MakeVarClusCorrData(statds=&EM_USER_GSCORESTAT, corrds=&EM_USER_GSCORECORR, corrplotds=&EM_USER_GSCORECORRPLOT );
40314     +   data &EM_USER_GSCORECORRPLOT ;
40315     +        set &EM_USER_GSCORECORRPLOT;
40316     +        rename _X_ = X;
40317     +        rename _Y_ = Y;
40318     +        label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
40319     +        label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
40320     +   run;
40322     +   %MakeGClusterConstData(indata=&EM_USER_GSCORETREE, inoutrsq=&outrsquare, outnode=&EM_USER_GCLUSNODE, outlink=&EM_USER_GCLUSLINK);
40324     +   data &EM_USER_GSCORETREE;
40325     +        length _NAME_ $32;
40326     +        length _LABEL_ $100;
40327     +        set &EM_USER_GSCORETREE(DROP=_LABEL_);
40328     +        if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
40329     +         _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
40330     +        end;else do;
40331     +         _LABEL_ = _NAME_;
40332     +        end;
40333     +       label _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
40335     +   run;
40337     +   quit;
40339     +%mend MakeGClusterCorrelation;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
40342      
40343      *------------------------------------------------------------*;
40344      * End UPDATE: VarClus;
40345      *------------------------------------------------------------*;

40346      %em_delMacro;

*------------------------------------------------------------* 
* 
* VarClus : End Update 
* datetime : 16DEC2015:17:09:22 
* 
*------------------------------------------------------------* 
Traverser: Run Completed 
40348      proc printto;
40349      run;

