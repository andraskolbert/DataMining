*------------------------------------------------------------*
User:                -Andris
Date:                15 December 2015
Time:                16:52:51 o'clock
Site:                70107571
Platform:            X64_8PRO
Maintenance Release: 9.03.01M2P081512
EM Version:          12.1
* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "15 December 2015" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16:52:43 o'clock" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                15 December 2015
Time:                16:52:43 o'clock
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2ZJAAJ6 "F:\Dropbox\NOVA\1st\DataMining\Project\DataMining\Songs\SAS_Miner\Songs\Workspaces\EMWS1\Tree\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2ZJAAJ6 new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "F:\Dropbox\NOVA\1st\DataMining\Project\DataMining\Songs\SAS_Miner\Songs\Workspaces\EMWS1\Tree\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "15 December 2015" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16:52:43 o'clock" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                -Andris";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_8PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.03.01M2P081512";
MPRINT(EM_DIAGRAM):   put "EM Version:          12.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "F:\Dropbox\NOVA\1st\DataMining\Project\DataMining\Songs\SAS_Miner\Songs\Workspaces\EMWS1\Tree\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "F:\Dropbox\NOVA\1st\DataMining\Project\DataMining\Songs\SAS_Miner\Songs\Workspaces\EMWS1\Tree\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "F:\Dropbox\NOVA\1st\DataMining\Project\DataMining\Songs\SAS_Miner\Songs\Workspaces\EMWS1\Tree\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "F:\Dropbox\NOVA\1st\DataMining\Project\DataMining\Songs\SAS_Miner\Songs\Workspaces\EMWS1\Tree\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "15 December 2015" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16:52:43 o'clock" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                -Andris";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "F:\Dropbox\NOVA\1st\DataMining\Project\DataMining\Songs\SAS_Miner\Songs\Workspaces\EMWS1\Tree\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "F:\Dropbox\NOVA\1st\DataMining\Project\DataMining\Songs\SAS_Miner\Songs\Workspaces\EMWS1\Tree\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "F:\Dropbox\NOVA\1st\DataMining\Project\DataMining\Songs\SAS_Miner\Songs\Workspaces\EMWS1\Tree\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'F:\Dropbox\NOVA\1st\DataMining\Project\DataMining\Songs\SAS_Miner\Songs\Workspaces\EMWS1\Tree\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
20708      proc freq data=EMWS1.Tree_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS1.Tree_VariableSet noprint;
20709      table ROLE*LEVEL/out=WORK.TreeMETA;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.TreeMETA;
20710      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 15 observations read from the data set EMWS1.TREE_VARIABLESET.
NOTE: The data set WORK.TREEMETA has 3 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.05 seconds
      cpu time            0.01 seconds
 
 
20711      proc print data=WORK.TreeMETA label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.TreeMETA label noobs;
20712      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
20713      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
20714      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
20715      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
20716      run;
 
NOTE: There were 3 observations read from the data set WORK.TREEMETA.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
20717      title10;
MPRINT(EM_DIAGRAM):   title10;
20718      %let EMNORLEN = %DMNORLEN;
MPRINT(EM_DIAGRAM):
EMWS1.GrfExpl_TRAIN EMWS1.GrfExpl_TRAIN
EMWS1.GrfExpl_TRAIN EMWS1.GrfExpl_TRAIN EMWS1 GrfExpl_TRAIN
EMWS1.GrfExpl_TRAIN EMWS1.GrfExpl_TRAIN
EMWS1.GrfExpl_TRAIN EMWS1.GrfExpl_TRAIN EMWS1 GrfExpl_TRAIN
MPRINT(EM_DIAGRAM):    proc dmdb data=EMWS1.GrfExpl_TRAIN classout=WORK._DMDBCLASSTARGET(keep=NAME NRAW CRAW LEVEL FREQUENCY NMISSPERCENT);
MPRINT(EM_DIAGRAM):   class genre(DESC) ;
MPRINT(EM_DIAGRAM):   run;
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set WORK._DMDBCLASSTARGET;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="genre";
MPRINT(EM_DIAGRAM):   if _N_=1 then call symput('_newevent', strip(LEVEL));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DMDBCLASSTARGET out=_TEMPCLASS(keep=LEVEL FREQUENCY NMISSPERCENT rename=(LEVEL=genre));
MPRINT(EM_DIAGRAM):   by LEVEL;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="genre";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _TEMPCLASS;
MPRINT(EM_DIAGRAM):   set _TEMPCLASS;
MPRINT(EM_DIAGRAM):   NMISSPERCENT= NMISSPERCENT/100;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Ids_genre_DD out=_sortedDecdata;
MPRINT(EM_DIAGRAM):   by genre;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   merge _TEMPCLASS(in=_a) _sortedDecdata(in=_b);
MPRINT(EM_DIAGRAM):   by genre;
MPRINT(EM_DIAGRAM):   if (_a and ^_b) or (^_a and _b) then call symput('_emresetDec', '1');
MPRINT(EM_DIAGRAM):   run;
20747      data WORK.Tree_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
MPRINT(EM_DIAGRAM):    data WORK.Tree_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
20748      length ORDER $20;
MPRINT(EM_DIAGRAM):   length ORDER $20;
20749      label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))" EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS = "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
20750         "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER = "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label VARIABLE = "Target" EVENT = "Event" NUMLEVELS = "Number of Levels" LEVEL = "Measurement Level" ORDER = "Order" LABEL = "Label";
20751      set EMWS1.IDS_GENRE_DM( where=(_TYPE_="TARGET"));
MPRINT(EM_DIAGRAM):   set EMWS1.IDS_GENRE_DM( where=(_TYPE_="TARGET"));
20752      NumLevels=5;
MPRINT(EM_DIAGRAM):   NumLevels=5;
20753      select(upcase(ORDER));
MPRINT(EM_DIAGRAM):   select(upcase(ORDER));
20754      when('DESC') ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   when('DESC') ORDER = 'Descending';
20755      when('ASC') ORDER = 'Ascending';
MPRINT(EM_DIAGRAM):   when('ASC') ORDER = 'Ascending';
20756      when('FMTDESC') ORDER = 'Formatted Descending';
MPRINT(EM_DIAGRAM):   when('FMTDESC') ORDER = 'Formatted Descending';
20757      when('FMTASC') ORDER = 'Formatted Ascending';
MPRINT(EM_DIAGRAM):   when('FMTASC') ORDER = 'Formatted Ascending';
20758      otherwise ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   otherwise ORDER = 'Descending';
20759      end;
MPRINT(EM_DIAGRAM):   end;
20760      output;
MPRINT(EM_DIAGRAM):   output;
20761      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.IDS_GENRE_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.TREE_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
20762      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
20763      proc print data=WORK.Tree_EVENT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Tree_EVENT noobs label;
20764      var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
MPRINT(EM_DIAGRAM):   var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
20765      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
20766      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Model Events";
MPRINT(EM_DIAGRAM):   run;
20767      run;
 
NOTE: There were 1 observations read from the data set WORK.TREE_EVENT.
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
20768      title10;
MPRINT(EM_DIAGRAM):   title10;
"No decisions defined for target "genre"."
20769      proc print data = EMWS1.Ids_genre_DM noobs label;
MPRINT(EM_DIAGRAM):    proc print data = EMWS1.Ids_genre_DM noobs label;
20770      var _type_ variable label;
MPRINT(EM_DIAGRAM):   var _type_ variable label;
20771      where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
MPRINT(EM_DIAGRAM):   where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
20772      label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Type" VARIABLE = "Variable" LABEL = "Label";
20773      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
20774      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Predicted and decision variables";
MPRINT(EM_DIAGRAM):   run;
20775      run;
 
NOTE: There were 13 observations read from the data set EMWS1.IDS_GENRE_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
20776      title10;
MPRINT(EM_DIAGRAM):   title10;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree: Preparing metadata for Training;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data WORK.M051LR3W;
MPRINT(EM_DIAGRAM):   set WORK.M051LR3W;
MPRINT(EM_DIAGRAM):   where(use = 'Y' or (role = 'INPUT' and use = 'D'));
MPRINT(EM_DIAGRAM):   if (role = 'REJECTED') then role = 'INPUT';
MPRINT(EM_DIAGRAM):   run;
20785      data work.Tree_tarmetads;
MPRINT(EM_DIAGRAM):    data work.Tree_tarmetads;
20786      set EMWS1.GrfExpl_CMeta_TRAIN(where=(ROLE='TARGET'));
MPRINT(EM_DIAGRAM):   set EMWS1.GrfExpl_CMeta_TRAIN(where=(ROLE='TARGET'));
20787      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.GRFEXPL_CMETA_TRAIN.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TREE_TARMETADS has 1 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
20788      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
20789      set WORK.M051LR3W;
MPRINT(EM_DIAGRAM):   set WORK.M051LR3W;
20790      where role='TARGET' AND use='Y';
MPRINT(EM_DIAGRAM):   where role='TARGET' AND use='Y';
20791      call symput('targetUsed', NAME);
MPRINT(EM_DIAGRAM):   call symput('targetUsed', NAME);
20792      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.M051LR3W.
      WHERE (role='TARGET') and (use='Y');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
20793      data WORK.M051LR3W;
MPRINT(EM_DIAGRAM):    data WORK.M051LR3W;
20794      set WORK.M051LR3W end=eof;
MPRINT(EM_DIAGRAM):   set WORK.M051LR3W end=eof;
20795      output;
MPRINT(EM_DIAGRAM):   output;
20796      if eof then do;
MPRINT(EM_DIAGRAM):   if eof then do;
20797      NAME="";
MPRINT(EM_DIAGRAM):   NAME="";
20798      ROLE="COST";
MPRINT(EM_DIAGRAM):   ROLE="COST";
20799      LEVEL="INTERVAL";
MPRINT(EM_DIAGRAM):   LEVEL="INTERVAL";
20800      TYPE="N";
MPRINT(EM_DIAGRAM):   TYPE="N";
20801      output;
MPRINT(EM_DIAGRAM):   output;
20802      end;
MPRINT(EM_DIAGRAM):   end;
20803      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 6 observations read from the data set WORK.M051LR3W.
NOTE: The data set WORK.M051LR3W has 7 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
NOTE: There were 5 observations read from the data set EMWS1.IDS_GENRE_DD.
NOTE: The data set WORK.GENRE has 5 observations and 10 variables.
20804      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
20805      * Tree: Create decision matrix;
MPRINT(EM_DIAGRAM):   * Tree: Create decision matrix;
20806      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
20807      data WORK.genre;
MPRINT(EM_DIAGRAM):   data WORK.genre;
20808        length   genre                            $  32
20809                 COUNT                                8
20810                 DATAPRIOR                            8
20811                 TRAINPRIOR                           8
20812                 DECPRIOR                             8
20813                 DECISION1                            8
20814                 DECISION2                            8
20815                 DECISION3                            8
20816                 DECISION4                            8
20817                 DECISION5                            8
20818                 ;
MPRINT(EM_DIAGRAM):   length genre $ 32 COUNT 8 DATAPRIOR 8 TRAINPRIOR 8 DECPRIOR 8 DECISION1 8 DECISION2 8 DECISION3 8 DECISION4 8 DECISION5 8 ;
20819
20820        label    COUNT="Level Counts"
20821                 DATAPRIOR="Data Proportions"
20822                 TRAINPRIOR="Training Proportions"
20823                 DECPRIOR="Decision Priors"
20824                 DECISION1="ROCK"
20825                 DECISION2="POP"
20826                 DECISION3="METAL"
20827                 DECISION4="JAZZ"
20828                 DECISION5="CLASSICAL"
20829                 ;
MPRINT(EM_DIAGRAM):   label COUNT= "Level Counts" DATAPRIOR= "Data Proportions" TRAINPRIOR= "Training Proportions" DECPRIOR= "Decision Priors" DECISION1= "ROCK" DECISION2= "POP" DECISION3= "METAL" DECISION4= "JAZZ" DECISION5= "CLASSICAL" ;
20830        format   COUNT 10.
20831                 ;
MPRINT(EM_DIAGRAM):   format COUNT 10. ;
20832      genre="ROCK"; COUNT=445; DATAPRIOR=0.19551845342706; TRAINPRIOR=0.19551845342706; DECPRIOR=.; DECISION1=1; DECISION2=0; DECISION3=0; DECISION4=0; DECISION5=0;
MPRINT(EM_DIAGRAM):   genre="ROCK";
MPRINT(EM_DIAGRAM):   COUNT=445;
MPRINT(EM_DIAGRAM):   DATAPRIOR=0.19551845342706;
MPRINT(EM_DIAGRAM):   TRAINPRIOR=0.19551845342706;
MPRINT(EM_DIAGRAM):   DECPRIOR=.;
MPRINT(EM_DIAGRAM):   DECISION1=1;
MPRINT(EM_DIAGRAM):   DECISION2=0;
MPRINT(EM_DIAGRAM):   DECISION3=0;
MPRINT(EM_DIAGRAM):   DECISION4=0;
MPRINT(EM_DIAGRAM):   DECISION5=0;
20833      output;
MPRINT(EM_DIAGRAM):   output;
20834      genre="POP"; COUNT=465; DATAPRIOR=0.2043057996485; TRAINPRIOR=0.2043057996485; DECPRIOR=.; DECISION1=0; DECISION2=1; DECISION3=0; DECISION4=0; DECISION5=0;
MPRINT(EM_DIAGRAM):   genre="POP";
MPRINT(EM_DIAGRAM):   COUNT=465;
MPRINT(EM_DIAGRAM):   DATAPRIOR=0.2043057996485;
MPRINT(EM_DIAGRAM):   TRAINPRIOR=0.2043057996485;
MPRINT(EM_DIAGRAM):   DECPRIOR=.;
MPRINT(EM_DIAGRAM):   DECISION1=0;
MPRINT(EM_DIAGRAM):   DECISION2=1;
MPRINT(EM_DIAGRAM):   DECISION3=0;
MPRINT(EM_DIAGRAM):   DECISION4=0;
MPRINT(EM_DIAGRAM):   DECISION5=0;
20835      output;
MPRINT(EM_DIAGRAM):   output;
20836      genre="METAL"; COUNT=465; DATAPRIOR=0.2043057996485; TRAINPRIOR=0.2043057996485; DECPRIOR=.; DECISION1=0; DECISION2=0; DECISION3=1; DECISION4=0; DECISION5=0;
MPRINT(EM_DIAGRAM):   genre="METAL";
MPRINT(EM_DIAGRAM):   COUNT=465;
MPRINT(EM_DIAGRAM):   DATAPRIOR=0.2043057996485;
MPRINT(EM_DIAGRAM):   TRAINPRIOR=0.2043057996485;
MPRINT(EM_DIAGRAM):   DECPRIOR=.;
MPRINT(EM_DIAGRAM):   DECISION1=0;
MPRINT(EM_DIAGRAM):   DECISION2=0;
MPRINT(EM_DIAGRAM):   DECISION3=1;
MPRINT(EM_DIAGRAM):   DECISION4=0;
MPRINT(EM_DIAGRAM):   DECISION5=0;
20837      output;
MPRINT(EM_DIAGRAM):   output;
20838      genre="JAZZ"; COUNT=463; DATAPRIOR=0.20342706502636; TRAINPRIOR=0.20342706502636; DECPRIOR=.; DECISION1=0; DECISION2=0; DECISION3=0; DECISION4=1; DECISION5=0;
MPRINT(EM_DIAGRAM):   genre="JAZZ";
MPRINT(EM_DIAGRAM):   COUNT=463;
MPRINT(EM_DIAGRAM):   DATAPRIOR=0.20342706502636;
MPRINT(EM_DIAGRAM):   TRAINPRIOR=0.20342706502636;
MPRINT(EM_DIAGRAM):   DECPRIOR=.;
MPRINT(EM_DIAGRAM):   DECISION1=0;
MPRINT(EM_DIAGRAM):   DECISION2=0;
MPRINT(EM_DIAGRAM):   DECISION3=0;
MPRINT(EM_DIAGRAM):   DECISION4=1;
MPRINT(EM_DIAGRAM):   DECISION5=0;
20839      output;
MPRINT(EM_DIAGRAM):   output;
20840      genre="CLASSICAL"; COUNT=438; DATAPRIOR=0.19244288224956; TRAINPRIOR=0.19244288224956; DECPRIOR=.; DECISION1=0; DECISION2=0; DECISION3=0; DECISION4=0; DECISION5=1;
MPRINT(EM_DIAGRAM):   genre="CLASSICAL";
MPRINT(EM_DIAGRAM):   COUNT=438;
MPRINT(EM_DIAGRAM):   DATAPRIOR=0.19244288224956;
MPRINT(EM_DIAGRAM):   TRAINPRIOR=0.19244288224956;
MPRINT(EM_DIAGRAM):   DECPRIOR=.;
MPRINT(EM_DIAGRAM):   DECISION1=0;
MPRINT(EM_DIAGRAM):   DECISION2=0;
MPRINT(EM_DIAGRAM):   DECISION3=0;
MPRINT(EM_DIAGRAM):   DECISION4=0;
MPRINT(EM_DIAGRAM):   DECISION5=1;
20841      output;
MPRINT(EM_DIAGRAM):   output;
20842      ;
MPRINT(EM_DIAGRAM):   ;
20843      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.GENRE has 5 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
20844      proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
20845      modify genre(type=PROFIT label=genre);
MPRINT(EM_DIAGRAM):   modify genre(type=PROFIT label= genre);
MPRINT(EM_DIAGRAM):   label DECISION1= 'ROCK';
MPRINT(EM_DIAGRAM):   label DECISION2= 'POP';
MPRINT(EM_DIAGRAM):   label DECISION3= 'METAL';
20846      label DECISION1= 'ROCK';
MPRINT(EM_DIAGRAM):   label DECISION4= 'JAZZ';
20847      label DECISION2= 'POP';
MPRINT(EM_DIAGRAM):   label DECISION5= 'CLASSICAL';
20848      label DECISION3= 'METAL';
MPRINT(EM_DIAGRAM):   run;
20849      label DECISION4= 'JAZZ';
20850      label DECISION5= 'CLASSICAL';
20851      run;
 
NOTE: MODIFY was successful for WORK.GENRE.DATA.
20852      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.06 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Tree: Tree Variables Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
20853      *------------------------------------------------------------* ;
20854      * Tree: Tree Variables Macro ;
20855      *------------------------------------------------------------* ;
20856      %macro EM_TREEVARS;
20857          acousticness danceability energy instrumentalness loudness
20858      %mend EM_TREEVARS;
20859      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
20860      * Tree: Tree Targets Macro ;
MPRINT(EM_DIAGRAM):   * Tree: Tree Targets Macro ;
20861      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
20862      %macro EM_TREETARGETS;
20863          genre
20864      %mend EM_TREETARGETS;
20865      data EMWS1.EM_Tree / view=EMWS1.EM_Tree;
MPRINT(EM_DIAGRAM):   data EMWS1.EM_Tree / view=EMWS1.EM_Tree;
20866      set
20866    ! EMWS1.GrfExpl_TRAIN(keep=%EM_TREEVARS %EM_TREETARGETS);
MPRINT(EM_DIAGRAM):   set EMWS1.GrfExpl_TRAIN(keep
MPRINT(EM_DIAGRAM):  =acousticness danceability energy instrumentalness loudness genre);
20867      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: DATA STEP view saved on file EMWS1.EM_TREE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.GRFEXPL_TRAIN.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.08 seconds
      cpu time            0.09 seconds
 
 
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Tree: Interval Inputs Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
20868      *------------------------------------------------------------* ;
20869      * Tree: Interval Inputs Macro ;
20870      *------------------------------------------------------------* ;
20871      %macro INTINPUTS;
20872          acousticness danceability energy instrumentalness loudness
20873      %mend INTINPUTS;
20874      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
20875      * Tree: Binary and Nominal Inputs Macro ;
MPRINT(EM_DIAGRAM):   * Tree: Binary and Nominal Inputs Macro ;
20876      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
20877      %macro NOMINPUTS;
20878
20879      %mend NOMINPUTS;
20880      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
20881      * Tree: Ordinal Inputs Macro ;
MPRINT(EM_DIAGRAM):   * Tree: Ordinal Inputs Macro ;
20882      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
20883      %macro ORDINPUTS;
20884
20885      %mend ORDINPUTS;
20886      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
20887      * Tree: Run ARBOR procedure;
MPRINT(EM_DIAGRAM):   * Tree: Run ARBOR procedure;
20888      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
 
A profit/loss matrix must be defined for AssessMeasure=PROFIT/LOSS
The value for Assessment Measure has been reset to DECISION.
 
20889      proc arbor data=EMWS1.EM_Tree
20890      Leafsize=5
20891      Mincatsize = 5
20892      Maxbranch=2
20893      Maxdepth=6
20894      alpha = 0.2
20895      Padjust=
20896      CHAIDBEFORE
20897      DEPTH
20898      MAXRULES=5
20899      MAXSURRS=0
20900      Missing=USEINSEARCH
20901      Exhaustive=5000
20902      event='ROCK'
20903      ;
MPRINT(EM_DIAGRAM):    proc arbor data=EMWS1.EM_Tree Leafsize=5 Mincatsize = 5 Maxbranch=2 Maxdepth=6 alpha = 0.2 Padjust= CHAIDBEFORE DEPTH MAXRULES=5 MAXSURRS=0 Missing=USEINSEARCH Exhaustive=5000 event='ROCK' ;
20904      ;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_DIAGRAM):   input
20905      input %INTINPUTS
MPRINT(INTINPUTS):   acousticness danceability energy instrumentalness loudness
20906      / level = interval;
MPRINT(EM_DIAGRAM):   / level = interval;
20907      target genre / level=NOMINAL
20908      Criterion=PROBCHISQ
20909      ;
MPRINT(EM_DIAGRAM):   target genre / level=NOMINAL Criterion=PROBCHISQ ;
20910      ;
MPRINT(EM_DIAGRAM):   ;
20911      Performance DISK
20912      NodeSize=20000
20913      ;
MPRINT(EM_DIAGRAM):   Performance DISK NodeSize=20000 ;
20914      Assess
20915      NoValidata
20916      measure=MISC
20917      ;
MPRINT(EM_DIAGRAM):   Assess NoValidata measure=MISC ;
NOTE: 1492316 kilobytes of physical memory.
NOTE: Will use 2276 out of 2276 training cases.
NOTE: Using memory pool with 75289600 bytes.
NOTE: Passed training data 12 times.
NOTE: Training used 371176 bytes of work memory.
NOTE: The subtree sequence contains 24 subtrees. The largest has 47 nodes and 24 leaves.
NOTE: Using subtree with 33 nodes and 17 leaves.
20918      SUBTREE BEST
20919      ;
MPRINT(EM_DIAGRAM):   SUBTREE BEST ;
NOTE: Using subtree with 33 nodes and 17 leaves.
20920      MAKEMACRO NLEAVES=nleaves;
MPRINT(EM_DIAGRAM):   MAKEMACRO NLEAVES=nleaves;
NOTE: Created macro variable NLEAVES equal to 17.
20921      save
20922      MODEL=EMWS1.Tree_EMTREE
20923      SEQUENCE=EMWS1.Tree_OUTSEQ
20924      IMPORTANCE=EMWS1.Tree_OUTIMPORT
20925      NODESTAT=EMWS1.Tree_OUTNODES
20926      SUMMARY=EMWS1.Tree_OUTSUMMARY
20927      STATSBYNODE=EMWS1.Tree_OUTSTATS
20928      Topology=EMWS1.Tree_OUTTOPOLOGY
20929      Pathlistnonmissing = EMWS1.Tree_OUTPATH
20930      Rules = EMWS1.Tree_OUTRULES
20931      ;
MPRINT(EM_DIAGRAM):   save MODEL=EMWS1.Tree_EMTREE SEQUENCE=EMWS1.Tree_OUTSEQ IMPORTANCE=EMWS1.Tree_OUTIMPORT NODESTAT=EMWS1.Tree_OUTNODES SUMMARY=EMWS1.Tree_OUTSUMMARY STATSBYNODE=EMWS1.Tree_OUTSTATS Topology=EMWS1.Tree_OUTTOPOLOGY Pathlistnonmissing =
EMWS1.Tree_OUTPATH Rules = EMWS1.Tree_OUTRULES ;
NOTE: The data set EMWS1.TREE_OUTIMPORT has 5 observations and 4 variables.
NOTE: The data set EMWS1.TREE_EMTREE has 1871 observations and 4 variables.
NOTE: The data set EMWS1.TREE_OUTNODES has 33 observations and 26 variables.
NOTE: The data set EMWS1.TREE_OUTPATH has 163 observations and 7 variables.
NOTE: The data set EMWS1.TREE_OUTRULES has 471 observations and 6 variables.
NOTE: The data set EMWS1.TREE_OUTSEQ has 24 observations and 11 variables.
NOTE: The data set EMWS1.TREE_OUTSTATS has 231 observations and 5 variables.
NOTE: The data set EMWS1.TREE_OUTSUMMARY has 24 observations and 8 variables.
NOTE: The data set EMWS1.TREE_OUTTOPOLOGY has 33 observations and 5 variables.
20932      code file="F:\Dropbox\NOVA\1st\DataMining\Project\DataMining\Songs\SAS_Miner\Songs\Workspaces\EMWS1\Tree\EMPUBLISHSCORE.sas"
20933      group=Tree
20934      ;
MPRINT(EM_DIAGRAM):   code file="F:\Dropbox\NOVA\1st\DataMining\Project\DataMining\Songs\SAS_Miner\Songs\Workspaces\EMWS1\Tree\EMPUBLISHSCORE.sas" group=Tree ;
NOTE: External file F:\Dropbox\NOVA\1st\DataMining\Project\DataMining\Songs\SAS_Miner\Songs\Workspaces\EMWS1\Tree\EMPUBLISHSCORE.sas opened.
20935      code file="F:\Dropbox\NOVA\1st\DataMining\Project\DataMining\Songs\SAS_Miner\Songs\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas"
20936      group=Tree
20937      residual
20938      ;
MPRINT(EM_DIAGRAM):   code file="F:\Dropbox\NOVA\1st\DataMining\Project\DataMining\Songs\SAS_Miner\Songs\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas" group=Tree residual ;
NOTE: External file F:\Dropbox\NOVA\1st\DataMining\Project\DataMining\Songs\SAS_Miner\Songs\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas opened.
20939      score data=EMWS1.EM_Tree out=_NULL_
NOTE: View EMWS1.EM_TREE.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.06 seconds
 
20940      outfit=WORK.FIT1
20941      role=TRAIN
20942      ;
MPRINT(EM_DIAGRAM):   score data=EMWS1.EM_Tree out=_NULL_ outfit=WORK.FIT1 role=TRAIN ;
NOTE: The data set WORK.FIT1 has 1 observations and 10 variables.
NOTE: There were 2276 observations read from the data set DM.SONGS_WITHID.
NOTE: There were 2276 observations read from the data set EMWS1.IDS_DATA.
NOTE: There were 2276 observations read from the data set EMWS1.GRFEXPL_TRAIN.
20943      run;
MPRINT(EM_DIAGRAM):   run;
 
20944      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: There were 2276 observations read from the data set DM.SONGS_WITHID.
NOTE: There were 2276 observations read from the data set EMWS1.IDS_DATA.
NOTE: View EMWS1.EM_TREE.VIEW used (Total process time):
      real time           0.48 seconds
      cpu time            0.45 seconds
 
NOTE: There were 2276 observations read from the data set EMWS1.GRFEXPL_TRAIN.
NOTE: There were 2276 observations read from the data set EMWS1.EM_TREE.
NOTE: The data set WORK._NAMEDAT has 5 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           0.49 seconds
      cpu time            0.45 seconds
 
 
20945      %put &nleaves;
17
20946      data EMWS1.Tree_OUTFIT;
MPRINT(EM_DIAGRAM):    data EMWS1.Tree_OUTFIT;
20947      merge WORK.FIT1;
MPRINT(EM_DIAGRAM):   merge WORK.FIT1;
20948      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.FIT1.
NOTE: The data set EMWS1.TREE_OUTFIT has 1 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
20949      data EMWS1.Tree_OUTIMPORT;
MPRINT(EM_DIAGRAM):   data EMWS1.Tree_OUTIMPORT;
20950      set EMWS1.Tree_OUTIMPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree_OUTIMPORT;
20951      label NAME = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel, noquote))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, noquote))" NRULES = "%sysfunc(sasmsg(sashelp.dmine, rpt_nrules_vlabel, noquote))" IMPORTANCE =
20952         "%sysfunc(sasmsg(sashelp.dmine, rpt_importance_vlabel, noquote))" NSURROGATES = "%sysfunc(sasmsg(sashelp.dmine, rpt_nsurrogates_vlabel, noquote))"
20953      ;
MPRINT(EM_DIAGRAM):   label NAME = "Variable Name" LABEL = "Label" NRULES = "Number of Splitting Rules" IMPORTANCE = "Importance" NSURROGATES = "Number of Surrogate Rules" ;
20954      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable NSURROGATES is uninitialized.
NOTE: There were 5 observations read from the data set EMWS1.TREE_OUTIMPORT.
NOTE: The data set EMWS1.TREE_OUTIMPORT has 5 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
20955      filename x "F:\Dropbox\NOVA\1st\DataMining\Project\DataMining\Songs\SAS_Miner\Songs\Workspaces\EMWS1\Tree\OUTDESCRIBE.txt" encoding='utf-8' NOBOM;
MPRINT(EM_DIAGRAM):   filename x "F:\Dropbox\NOVA\1st\DataMining\Project\DataMining\Songs\SAS_Miner\Songs\Workspaces\EMWS1\Tree\OUTDESCRIBE.txt" encoding='utf-8' NOBOM;
20956      data temp;
MPRINT(EM_DIAGRAM):    data temp;
20957      length varname $16;
MPRINT(EM_DIAGRAM):   length varname $16;
20958      retain varname;
MPRINT(EM_DIAGRAM):   retain varname;
20959      set EMWS1.Tree_OUTPATH;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree_OUTPATH;
20960      if ^missing(variable) then varname=variable;
MPRINT(EM_DIAGRAM):   if ^missing(variable) then varname=variable;
20961      else if ^missing(var_name) then varname=var_name;
MPRINT(EM_DIAGRAM):   else if ^missing(var_name) then varname=var_name;
20962      output;
MPRINT(EM_DIAGRAM):   output;
20963      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 163 observations read from the data set EMWS1.TREE_OUTPATH.
NOTE: The data set WORK.TEMP has 163 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
20964      proc sort data=temp;
MPRINT(EM_DIAGRAM):   proc sort data=temp;
20965      by node;
MPRINT(EM_DIAGRAM):   by node;
20966      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 163 observations read from the data set WORK.TEMP.
NOTE: The data set WORK.TEMP has 163 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
20967      proc sort data=EMWS1.Tree_OUTNODES out=outnodes;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Tree_OUTNODES out=outnodes;
20968      by node;
MPRINT(EM_DIAGRAM):   by node;
20969      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 33 observations read from the data set EMWS1.TREE_OUTNODES.
NOTE: The data set WORK.OUTNODES has 33 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
20970      data temp;
MPRINT(EM_DIAGRAM):   data temp;
20971      merge temp(in=_a) outnodes(keep= node
20972      NPRIORS
20973      P_genreclassical
20974      P_genrerock
20975      P_genrepop
20976      P_genremetal
20977      P_genrejazz
20978      );
MPRINT(EM_DIAGRAM):   merge temp(in=_a) outnodes(keep= node NPRIORS P_genreclassical P_genrerock P_genrepop P_genremetal P_genrejazz );
20979      by node;
MPRINT(EM_DIAGRAM):   by node;
20980      if _a;
MPRINT(EM_DIAGRAM):   if _a;
20981      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 163 observations read from the data set WORK.TEMP.
NOTE: There were 33 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMP has 163 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
20982      proc sort data=temp;
MPRINT(EM_DIAGRAM):   proc sort data=temp;
20983      by node descending varname descending numeric_value;
MPRINT(EM_DIAGRAM):   by node descending varname descending numeric_value;
20984      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 163 observations read from the data set WORK.TEMP.
NOTE: The data set WORK.TEMP has 163 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
20985      data _null_;
MPRINT(EM_DIAGRAM):   data _null_;
20986      file x;
MPRINT(EM_DIAGRAM):   file x;
20987      set temp;
MPRINT(EM_DIAGRAM):   set temp;
20988      by node descending varname;
MPRINT(EM_DIAGRAM):   by node descending varname;
20989      retain origvar oldnode string;
MPRINT(EM_DIAGRAM):   retain origvar oldnode string;
20990      length origvar $32 oldnode 8 string $200;
MPRINT(EM_DIAGRAM):   length origvar $32 oldnode 8 string $200;
20991      if _n_ = 1 then do;
MPRINT(EM_DIAGRAM):   if _n_ = 1 then do;
20992      origvar = varname;
MPRINT(EM_DIAGRAM):   origvar = varname;
20993      oldnode = node;
MPRINT(EM_DIAGRAM):   oldnode = node;
20994      end;
MPRINT(EM_DIAGRAM):   end;
20995      if first.node then do;
MPRINT(EM_DIAGRAM):   if first.node then do;
20996      put "&EM_CODEBAR";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
20997      put " Node = " node;
MPRINT(EM_DIAGRAM):   put " Node = " node;
20998      put "&EM_CODEBAR";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
20999      end;
MPRINT(EM_DIAGRAM):   end;
21000      if first.varname then do;
MPRINT(EM_DIAGRAM):   if first.varname then do;
21001      if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
MPRINT(EM_DIAGRAM):   if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
21002      if MISSING(CHARACTER_VALUE) then do;
MPRINT(EM_DIAGRAM):   if MISSING(CHARACTER_VALUE) then do;
21003      if NUMERIC_VALUE ne . then do;
MPRINT(EM_DIAGRAM):   if NUMERIC_VALUE ne . then do;
21004      if ^first.node then do;
MPRINT(EM_DIAGRAM):   if ^first.node then do;
21005      string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_DIAGRAM):   string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
21006      end;
MPRINT(EM_DIAGRAM):   end;
21007      else do;
MPRINT(EM_DIAGRAM):   else do;
21008      string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_DIAGRAM):   string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
21009      end;
MPRINT(EM_DIAGRAM):   end;
21010      end;
MPRINT(EM_DIAGRAM):   end;
21011      end;
MPRINT(EM_DIAGRAM):   end;
21012      else do;
MPRINT(EM_DIAGRAM):   else do;
21013      if ^first.node then do;
MPRINT(EM_DIAGRAM):   if ^first.node then do;
21014      string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_DIAGRAM):   string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
21015      end;
MPRINT(EM_DIAGRAM):   end;
21016      else do;
MPRINT(EM_DIAGRAM):   else do;
21017      string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_DIAGRAM):   string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
21018      end;
MPRINT(EM_DIAGRAM):   end;
21019      end;
MPRINT(EM_DIAGRAM):   end;
21020      end;
MPRINT(EM_DIAGRAM):   end;
21021      else if RELATION in ("=") then do;
MPRINT(EM_DIAGRAM):   else if RELATION in ("=") then do;
21022      if ^first.node then do;
MPRINT(EM_DIAGRAM):   if ^first.node then do;
21023      string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
MPRINT(EM_DIAGRAM):   string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
21024      end;
MPRINT(EM_DIAGRAM):   end;
21025      else do;
MPRINT(EM_DIAGRAM):   else do;
21026      string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
MPRINT(EM_DIAGRAM):   string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
21027      end;
MPRINT(EM_DIAGRAM):   end;
21028      end;
MPRINT(EM_DIAGRAM):   end;
21029      else if RELATION in ("ISMISSING") then do;
MPRINT(EM_DIAGRAM):   else if RELATION in ("ISMISSING") then do;
21030      if ^first.node then do;
MPRINT(EM_DIAGRAM):   if ^first.node then do;
21031      string = " AND "|| strip(varname) || " equals Missing";
MPRINT(EM_DIAGRAM):   string = " AND "|| strip(varname) || " equals Missing";
21032      end;
MPRINT(EM_DIAGRAM):   end;
21033      else do;
MPRINT(EM_DIAGRAM):   else do;
21034      string = "if "|| strip(varname) ||" equals Missing";
MPRINT(EM_DIAGRAM):   string = "if "|| strip(varname) ||" equals Missing";
21035      end;
MPRINT(EM_DIAGRAM):   end;
21036      end;
MPRINT(EM_DIAGRAM):   end;
21037      else if RELATION in ("ISNOTMISSING") then do;
MPRINT(EM_DIAGRAM):   else if RELATION in ("ISNOTMISSING") then do;
21038      if ^first.node then do;
MPRINT(EM_DIAGRAM):   if ^first.node then do;
21039      string = " AND "|| strip(varname) || " equals All Values";
MPRINT(EM_DIAGRAM):   string = " AND "|| strip(varname) || " equals All Values";
21040      end;
MPRINT(EM_DIAGRAM):   end;
21041      else do;
MPRINT(EM_DIAGRAM):   else do;
21042      string = "if "|| strip(varname) ||" equals All Values";
MPRINT(EM_DIAGRAM):   string = "if "|| strip(varname) ||" equals All Values";
21043      end;
MPRINT(EM_DIAGRAM):   end;
21044      end;
MPRINT(EM_DIAGRAM):   end;
21045      if ^missing(varname) then origvar = varname;
MPRINT(EM_DIAGRAM):   if ^missing(varname) then origvar = varname;
21046      oldnode=node;
MPRINT(EM_DIAGRAM):   oldnode=node;
21047      end;
MPRINT(EM_DIAGRAM):   end;
21048      else do;
MPRINT(EM_DIAGRAM):   else do;
21049      if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
MPRINT(EM_DIAGRAM):   if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
21050      if MISSING(CHARACTER_VALUE) then do;
MPRINT(EM_DIAGRAM):   if MISSING(CHARACTER_VALUE) then do;
21051      if NUMERIC_VALUE ne . then do;
MPRINT(EM_DIAGRAM):   if NUMERIC_VALUE ne . then do;
21052      if ^MISSING(string) then string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_DIAGRAM):   if ^MISSING(string) then string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
21053      else string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_DIAGRAM):   else string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
21054      end;
MPRINT(EM_DIAGRAM):   end;
21055      end;
MPRINT(EM_DIAGRAM):   end;
21056      else do;
MPRINT(EM_DIAGRAM):   else do;
21057      if ^MISSING(string) then string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_DIAGRAM):   if ^MISSING(string) then string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
21058      else string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_DIAGRAM):   else string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
21059      end;
MPRINT(EM_DIAGRAM):   end;
21060      end;
MPRINT(EM_DIAGRAM):   end;
21061      else if RELATION in ("=") then do;
MPRINT(EM_DIAGRAM):   else if RELATION in ("=") then do;
21062      string = strip(string)||", "||strip(character_value);
MPRINT(EM_DIAGRAM):   string = strip(string)||", "||strip(character_value);
21063      end;
MPRINT(EM_DIAGRAM):   end;
21064      else if RELATION in ("ISMISSING") then do;
MPRINT(EM_DIAGRAM):   else if RELATION in ("ISMISSING") then do;
21065      end;
MPRINT(EM_DIAGRAM):   end;
21066      if ^missing(varname) then origvar = varname;
MPRINT(EM_DIAGRAM):   if ^missing(varname) then origvar = varname;
21067      oldnode=node;
MPRINT(EM_DIAGRAM):   oldnode=node;
21068      end;
MPRINT(EM_DIAGRAM):   end;
21069      if last.varname then do;
MPRINT(EM_DIAGRAM):   if last.varname then do;
21070      if RELATION in ("ISMISSING") then do;
MPRINT(EM_DIAGRAM):   if RELATION in ("ISMISSING") then do;
21071      if ^first.varname then do;
MPRINT(EM_DIAGRAM):   if ^first.varname then do;
21072      string = strip(string) || " or MISSING";
MPRINT(EM_DIAGRAM):   string = strip(string) || " or MISSING";
21073      end;
MPRINT(EM_DIAGRAM):   end;
21074      end;
MPRINT(EM_DIAGRAM):   end;
21075      put string;
MPRINT(EM_DIAGRAM):   put string;
21076      if ^missing(varname) then origvar = varname;
MPRINT(EM_DIAGRAM):   if ^missing(varname) then origvar = varname;
21077      oldnode=node;
MPRINT(EM_DIAGRAM):   oldnode=node;
21078      end;
MPRINT(EM_DIAGRAM):   end;
21079      if last.node then do;
MPRINT(EM_DIAGRAM):   if last.node then do;
21080      put "then ";
MPRINT(EM_DIAGRAM):   put "then ";
21081      put " Tree Node Identifier   = " node;
MPRINT(EM_DIAGRAM):   put " Tree Node Identifier   = " node;
21082      put " Number of Observations = " NPRIORS;
MPRINT(EM_DIAGRAM):   put " Number of Observations = " NPRIORS;
21083      put " Predicted: genre=classical  = " P_genreclassical;
MPRINT(EM_DIAGRAM):   put " Predicted: genre=classical  = " P_genreclassical;
21084      put " Predicted: genre=rock  = " P_genrerock;
MPRINT(EM_DIAGRAM):   put " Predicted: genre=rock  = " P_genrerock;
21085      put " Predicted: genre=pop  = " P_genrepop;
MPRINT(EM_DIAGRAM):   put " Predicted: genre=pop  = " P_genrepop;
21086      put " Predicted: genre=metal  = " P_genremetal;
MPRINT(EM_DIAGRAM):   put " Predicted: genre=metal  = " P_genremetal;
21087      put " Predicted: genre=jazz  = " P_genrejazz;
MPRINT(EM_DIAGRAM):   put " Predicted: genre=jazz  = " P_genrejazz;
21088      put " ";
MPRINT(EM_DIAGRAM):   put " ";
21089      if ^missing(varname) then origvar = varname;
MPRINT(EM_DIAGRAM):   if ^missing(varname) then origvar = varname;
21090      oldnode=node;
MPRINT(EM_DIAGRAM):   oldnode=node;
21091      end;
MPRINT(EM_DIAGRAM):   end;
21092      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      21005:67    21008:66    21052:108   21053:72
NOTE: The file X is:
      Filename=F:\Dropbox\NOVA\1st\DataMining\Project\DataMining\Songs\SAS_Miner\Songs\Workspaces\EMWS1\Tree\OUTDESCRIBE.txt,
      RECFM=V,LRECL=1536,File Size (bytes)=0,
      Last Modified=15 December 2015 16:52:46 o'cl,
      Create Time=15 December 2015 16:52:46 o'cl
 
NOTE: 268 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: There were 163 observations read from the data set WORK.TEMP.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
21093      filename x;
MPRINT(EM_DIAGRAM):    filename x;
NOTE: Fileref X has been deassigned.
21094      data WORK.M3V5GYUF;
MPRINT(EM_DIAGRAM):    data WORK.M3V5GYUF;
21095      set WORK.M3V5GYUF;
MPRINT(EM_DIAGRAM):   set WORK.M3V5GYUF;
21096      where(use = 'Y' or (role = 'INPUT' and use = 'D'));
MPRINT(EM_DIAGRAM):   where(use = 'Y' or (role = 'INPUT' and use = 'D'));
21097      if (role = 'REJECTED') then role = 'INPUT';
MPRINT(EM_DIAGRAM):   if (role = 'REJECTED') then role = 'INPUT';
21098      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 6 observations read from the data set WORK.M3V5GYUF.
      WHERE (use='Y') or ((role='INPUT') and (use='D'));
NOTE: The data set WORK.M3V5GYUF has 6 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
21099      data work.Tree_tarmetads;
MPRINT(EM_DIAGRAM):    data work.Tree_tarmetads;
21100      set EMWS1.GrfExpl_CMeta_TRAIN(where=(ROLE='TARGET'));
MPRINT(EM_DIAGRAM):   set EMWS1.GrfExpl_CMeta_TRAIN(where=(ROLE='TARGET'));
21101      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.GRFEXPL_CMETA_TRAIN.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TREE_TARMETADS has 1 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
21102      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_variableImportance_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):    title10 "Variable Importance";
21103      data EMWS1.Tree_OUTIMPORT;
MPRINT(EM_DIAGRAM):   data EMWS1.Tree_OUTIMPORT;
21104      set EMWS1.Tree_OUTIMPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree_OUTIMPORT;
21105      importance=put(importance, 15.4);
MPRINT(EM_DIAGRAM):   importance=put(importance, 15.4);
21106      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      21105:12
NOTE: There were 5 observations read from the data set EMWS1.TREE_OUTIMPORT.
NOTE: The data set EMWS1.TREE_OUTIMPORT has 5 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
21107      proc print data=EMWS1.Tree_OUTIMPORT(where=(nrules>0));
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Tree_OUTIMPORT(where=(nrules>0));
21108      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 5 observations read from the data set EMWS1.TREE_OUTIMPORT.
      WHERE nrules>0;
NOTE: The PROCEDURE PRINT printed page 4.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
21109      title10;
MPRINT(EM_DIAGRAM):   title10;
21110      data EMWS1.Tree_OUTSEQ;
MPRINT(EM_DIAGRAM):    data EMWS1.Tree_OUTSEQ;
21111      set EMWS1.Tree_OUTSEQ;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree_OUTSEQ;
21112      _ASE_ = put(_ASE_, 15.4);
MPRINT(EM_DIAGRAM):   _ASE_ = put(_ASE_, 15.4);
21113      _ASSESS_ = put(_ASSESS_, 15.4);
MPRINT(EM_DIAGRAM):   _ASSESS_ = put(_ASSESS_, 15.4);
21114      _MAX_ = put(_MAX_, 15.4);
MPRINT(EM_DIAGRAM):   _MAX_ = put(_MAX_, 15.4);
21115      _SSE_ = put(_SSE_, 15.4);
MPRINT(EM_DIAGRAM):   _SSE_ = put(_SSE_, 15.4);
21116      _RASE_ = put(_RASE_, 15.4);
MPRINT(EM_DIAGRAM):   _RASE_ = put(_RASE_, 15.4);
21117      _MISC_ = put(_MISC_, 15.4);
MPRINT(EM_DIAGRAM):   _MISC_ = put(_MISC_, 15.4);
21118      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      21112:9    21113:12   21114:9    21115:9    21116:10   21117:10
NOTE: There were 24 observations read from the data set EMWS1.TREE_OUTSEQ.
NOTE: The data set EMWS1.TREE_OUTSEQ has 24 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
21119      data WORK.M3V5GYUF;
MPRINT(EM_DIAGRAM):   data WORK.M3V5GYUF;
21120      set WORK.M3V5GYUF end=eof;
MPRINT(EM_DIAGRAM):   set WORK.M3V5GYUF end=eof;
21121      output;
MPRINT(EM_DIAGRAM):   output;
21122      if eof then do;
MPRINT(EM_DIAGRAM):   if eof then do;
21123      NAME="";
MPRINT(EM_DIAGRAM):   NAME="";
21124      ROLE="COST";
MPRINT(EM_DIAGRAM):   ROLE="COST";
21125      LEVEL="INTERVAL";
MPRINT(EM_DIAGRAM):   LEVEL="INTERVAL";
21126      TYPE="N";
MPRINT(EM_DIAGRAM):   TYPE="N";
21127      output;
MPRINT(EM_DIAGRAM):   output;
21128      end;
MPRINT(EM_DIAGRAM):   end;
21129      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 6 observations read from the data set WORK.M3V5GYUF.
NOTE: The data set WORK.M3V5GYUF has 7 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
21130      /* belowtext */
21131      data templabel;
MPRINT(EM_DIAGRAM):    data templabel;
21132      set EMWS1.Tree_OUTRULES;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree_OUTRULES;
21133      if ((ROLE="PRIMARY") AND (STAT ="LABEL"));
MPRINT(EM_DIAGRAM):   if ((ROLE="PRIMARY") AND (STAT ="LABEL"));
21134      rename character_value = belowtext;
MPRINT(EM_DIAGRAM):   rename character_value = belowtext;
21135      keep NODE character_value;
MPRINT(EM_DIAGRAM):   keep NODE character_value;
21136      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 471 observations read from the data set EMWS1.TREE_OUTRULES.
NOTE: The data set WORK.TEMPLABEL has 0 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
21137      data tempvar;
MPRINT(EM_DIAGRAM):   data tempvar;
21138      set EMWS1.Tree_OUTRULES;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree_OUTRULES;
21139      if ((ROLE="PRIMARY") AND (STAT="VARIABLE"));
MPRINT(EM_DIAGRAM):   if ((ROLE="PRIMARY") AND (STAT="VARIABLE"));
21140      keep NODE character_value;
MPRINT(EM_DIAGRAM):   keep NODE character_value;
21141      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 471 observations read from the data set EMWS1.TREE_OUTRULES.
NOTE: The data set WORK.TEMPVAR has 16 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
21142      proc sort data=templabel;
MPRINT(EM_DIAGRAM):   proc sort data=templabel;
21143      by node;
MPRINT(EM_DIAGRAM):   by node;
21144      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Input data set is empty.
NOTE: The data set WORK.TEMPLABEL has 0 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
21145      proc sort data=tempvar;
MPRINT(EM_DIAGRAM):   proc sort data=tempvar;
21146      by node;
MPRINT(EM_DIAGRAM):   by node;
21147      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 16 observations read from the data set WORK.TEMPVAR.
NOTE: The data set WORK.TEMPVAR has 16 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
21148      data tempbelow;
MPRINT(EM_DIAGRAM):   data tempbelow;
21149      merge templabel tempvar;
MPRINT(EM_DIAGRAM):   merge templabel tempvar;
21150      by node;
MPRINT(EM_DIAGRAM):   by node;
21151      if missing(belowtext) then belowtext= character_value;
MPRINT(EM_DIAGRAM):   if missing(belowtext) then belowtext= character_value;
21152      keep node belowtext;
MPRINT(EM_DIAGRAM):   keep node belowtext;
21153      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set WORK.TEMPLABEL.
NOTE: There were 16 observations read from the data set WORK.TEMPVAR.
NOTE: The data set WORK.TEMPBELOW has 16 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
21154      proc sort data=tempbelow;
MPRINT(EM_DIAGRAM):   proc sort data=tempbelow;
21155      by node;
MPRINT(EM_DIAGRAM):   by node;
21156      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 16 observations read from the data set WORK.TEMPBELOW.
NOTE: The data set WORK.TEMPBELOW has 16 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
21157      /* abovetext */
21158      data tempoutrules;
MPRINT(EM_DIAGRAM):   data tempoutrules;
21159      set EMWS1.Tree_OUTRULES;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree_OUTRULES;
21160      if ((ROLE='PRIMARY') AND(STAT in ("INTERVAL", "ORDINAL", "NOMINAL")));
MPRINT(EM_DIAGRAM):   if ((ROLE='PRIMARY') AND(STAT in ("INTERVAL", "ORDINAL", "NOMINAL")));
21161      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 471 observations read from the data set EMWS1.TREE_OUTRULES.
NOTE: The data set WORK.TEMPOUTRULES has 16 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
21162      proc sort data=tempoutrules;
MPRINT(EM_DIAGRAM):   proc sort data=tempoutrules;
21163      by node numeric_value;
MPRINT(EM_DIAGRAM):   by node numeric_value;
21164      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 16 observations read from the data set WORK.TEMPOUTRULES.
NOTE: The data set WORK.TEMPOUTRULES has 16 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
21165      data tempabove;
MPRINT(EM_DIAGRAM):   data tempabove;
21166      set tempoutrules(rename=(node=parent));
MPRINT(EM_DIAGRAM):   set tempoutrules(rename=(node=parent));
21167      by parent numeric_value;
MPRINT(EM_DIAGRAM):   by parent numeric_value;
21168      retain abovetext tempstring flag branch origval origchar;
MPRINT(EM_DIAGRAM):   retain abovetext tempstring flag branch origval origchar;
21169      length abovetext tempstring origchar $45;
MPRINT(EM_DIAGRAM):   length abovetext tempstring origchar $45;
21170      if STAT in ("INTERVAL", "ORDINAL") then do;
MPRINT(EM_DIAGRAM):   if STAT in ("INTERVAL", "ORDINAL") then do;
21171      if first.parent then do;
MPRINT(EM_DIAGRAM):   if first.parent then do;
21172      if missing(character_value) then do;
MPRINT(EM_DIAGRAM):   if missing(character_value) then do;
21173      numeric_value = round(numeric_value, 0.0001);
MPRINT(EM_DIAGRAM):   numeric_value = round(numeric_value, 0.0001);
21174      abovetext = "< "||strip(NUMERIC_VALUE);
MPRINT(EM_DIAGRAM):   abovetext = "< "||strip(NUMERIC_VALUE);
21175      branch = 1;
MPRINT(EM_DIAGRAM):   branch = 1;
21176      origval = numeric_value;
MPRINT(EM_DIAGRAM):   origval = numeric_value;
21177      output;
MPRINT(EM_DIAGRAM):   output;
21178      end;
MPRINT(EM_DIAGRAM):   end;
21179      else do;
MPRINT(EM_DIAGRAM):   else do;
21180      abovetext = "< "||strip(CHARACTER_VALUE);
MPRINT(EM_DIAGRAM):   abovetext = "< "||strip(CHARACTER_VALUE);
21181      branch = 1;
MPRINT(EM_DIAGRAM):   branch = 1;
21182      origchar = character_value;
MPRINT(EM_DIAGRAM):   origchar = character_value;
21183      output;
MPRINT(EM_DIAGRAM):   output;
21184      end;
MPRINT(EM_DIAGRAM):   end;
21185      if first.parent AND last.parent then do;
MPRINT(EM_DIAGRAM):   if first.parent AND last.parent then do;
21186      if missing(character_value) then do;
MPRINT(EM_DIAGRAM):   if missing(character_value) then do;
21187      numeric_value = round(numeric_value, 0.0001);
MPRINT(EM_DIAGRAM):   numeric_value = round(numeric_value, 0.0001);
21188      branch = branch + 1;
MPRINT(EM_DIAGRAM):   branch = branch + 1;
21189      abovetext = ">= "||strip(NUMERIC_VALUE);
MPRINT(EM_DIAGRAM):   abovetext = ">= "||strip(NUMERIC_VALUE);
21190      output;
MPRINT(EM_DIAGRAM):   output;
21191      end;
MPRINT(EM_DIAGRAM):   end;
21192      else do;
MPRINT(EM_DIAGRAM):   else do;
21193      branch = branch + 1;
MPRINT(EM_DIAGRAM):   branch = branch + 1;
21194      abovetext = ">= "||strip(CHARACTER_VALUE);
MPRINT(EM_DIAGRAM):   abovetext = ">= "||strip(CHARACTER_VALUE);
21195      output;
MPRINT(EM_DIAGRAM):   output;
21196      end;
MPRINT(EM_DIAGRAM):   end;
21197      end;
MPRINT(EM_DIAGRAM):   end;
21198      end;
MPRINT(EM_DIAGRAM):   end;
21199      else if last.parent then do;
MPRINT(EM_DIAGRAM):   else if last.parent then do;
21200      if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
MPRINT(EM_DIAGRAM):   if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
21201      if missing(character_value) then do;
MPRINT(EM_DIAGRAM):   if missing(character_value) then do;
21202      numeric_value = round(numeric_value, 0.0001);
MPRINT(EM_DIAGRAM):   numeric_value = round(numeric_value, 0.0001);
21203      abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
MPRINT(EM_DIAGRAM):   abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
21204      end;
MPRINT(EM_DIAGRAM):   end;
21205      else do;
MPRINT(EM_DIAGRAM):   else do;
21206      abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
MPRINT(EM_DIAGRAM):   abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
21207      end;
MPRINT(EM_DIAGRAM):   end;
21208      branch = branch + 1;
MPRINT(EM_DIAGRAM):   branch = branch + 1;
21209      output;
MPRINT(EM_DIAGRAM):   output;
21210      if missing(character_value) then do;
MPRINT(EM_DIAGRAM):   if missing(character_value) then do;
21211      numeric_value = round(numeric_value, 0.0001);
MPRINT(EM_DIAGRAM):   numeric_value = round(numeric_value, 0.0001);
21212      abovetext = ">= "||strip(NUMERIC_VALUE);
MPRINT(EM_DIAGRAM):   abovetext = ">= "||strip(NUMERIC_VALUE);
21213      end;
MPRINT(EM_DIAGRAM):   end;
21214      else do;
MPRINT(EM_DIAGRAM):   else do;
21215      abovetext = ">= "||strip(CHARACTER_VALUE);
MPRINT(EM_DIAGRAM):   abovetext = ">= "||strip(CHARACTER_VALUE);
21216      end;
MPRINT(EM_DIAGRAM):   end;
21217      branch = branch + 1;
MPRINT(EM_DIAGRAM):   branch = branch + 1;
21218      output;
MPRINT(EM_DIAGRAM):   output;
21219      end;
MPRINT(EM_DIAGRAM):   end;
21220      else do;
MPRINT(EM_DIAGRAM):   else do;
21221      if missing(character_value) then do;
MPRINT(EM_DIAGRAM):   if missing(character_value) then do;
21222      numeric_value = round(numeric_value, 0.0001);
MPRINT(EM_DIAGRAM):   numeric_value = round(numeric_value, 0.0001);
21223      abovetext = ">= "||strip(NUMERIC_VALUE);
MPRINT(EM_DIAGRAM):   abovetext = ">= "||strip(NUMERIC_VALUE);
21224      end;
MPRINT(EM_DIAGRAM):   end;
21225      else do;
MPRINT(EM_DIAGRAM):   else do;
21226      abovetext = ">= "||strip(CHARACTER_VALUE);
MPRINT(EM_DIAGRAM):   abovetext = ">= "||strip(CHARACTER_VALUE);
21227      end;
MPRINT(EM_DIAGRAM):   end;
21228      branch = branch + 1;
MPRINT(EM_DIAGRAM):   branch = branch + 1;
21229      output;
MPRINT(EM_DIAGRAM):   output;
21230      end;
MPRINT(EM_DIAGRAM):   end;
21231      end;
MPRINT(EM_DIAGRAM):   end;
21232      else do;
MPRINT(EM_DIAGRAM):   else do;
21233      if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
MPRINT(EM_DIAGRAM):   if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
21234      if missing(character_value) then do;
MPRINT(EM_DIAGRAM):   if missing(character_value) then do;
21235      numeric_value = round(numeric_value,0.0001);
MPRINT(EM_DIAGRAM):   numeric_value = round(numeric_value,0.0001);
21236      abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
MPRINT(EM_DIAGRAM):   abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
21237      origval = numeric_value;
MPRINT(EM_DIAGRAM):   origval = numeric_value;
21238      end;
MPRINT(EM_DIAGRAM):   end;
21239      else do;
MPRINT(EM_DIAGRAM):   else do;
21240      abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
MPRINT(EM_DIAGRAM):   abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
21241      origchar = character_value;
MPRINT(EM_DIAGRAM):   origchar = character_value;
21242      end;
MPRINT(EM_DIAGRAM):   end;
21243      branch = branch + 1;
MPRINT(EM_DIAGRAM):   branch = branch + 1;
21244      output;
MPRINT(EM_DIAGRAM):   output;
21245      end;
MPRINT(EM_DIAGRAM):   end;
21246      else do;
MPRINT(EM_DIAGRAM):   else do;
21247      if missing(character_value) then do;
MPRINT(EM_DIAGRAM):   if missing(character_value) then do;
21248      numeric_value = round(numeric_value, 0.0001);
MPRINT(EM_DIAGRAM):   numeric_value = round(numeric_value, 0.0001);
21249      abovetext = ">= "||strip(NUMERIC_VALUE);
MPRINT(EM_DIAGRAM):   abovetext = ">= "||strip(NUMERIC_VALUE);
21250      origval = numeric_value;
MPRINT(EM_DIAGRAM):   origval = numeric_value;
21251      end;
MPRINT(EM_DIAGRAM):   end;
21252      else do;
MPRINT(EM_DIAGRAM):   else do;
21253      abovetext = ">= "||strip(CHARACTER_VALUE);
MPRINT(EM_DIAGRAM):   abovetext = ">= "||strip(CHARACTER_VALUE);
21254      origval = character_value;
MPRINT(EM_DIAGRAM):   origval = character_value;
21255      end;
MPRINT(EM_DIAGRAM):   end;
21256      branch = branch + 1;
MPRINT(EM_DIAGRAM):   branch = branch + 1;
21257      output;
MPRINT(EM_DIAGRAM):   output;
21258      end;
MPRINT(EM_DIAGRAM):   end;
21259      end;
MPRINT(EM_DIAGRAM):   end;
21260      end;
MPRINT(EM_DIAGRAM):   end;
21261      else do;
MPRINT(EM_DIAGRAM):   else do;
21262      if first.numeric_value then do;
MPRINT(EM_DIAGRAM):   if first.numeric_value then do;
21263      flag = 0;
MPRINT(EM_DIAGRAM):   flag = 0;
21264      abovetext = CHARACTER_VALUE;
MPRINT(EM_DIAGRAM):   abovetext = CHARACTER_VALUE;
21265      branch = numeric_value;
MPRINT(EM_DIAGRAM):   branch = numeric_value;
21266      if first.numeric_value AND last.numeric_value then do;
MPRINT(EM_DIAGRAM):   if first.numeric_value AND last.numeric_value then do;
21267      output;
MPRINT(EM_DIAGRAM):   output;
21268      end;
MPRINT(EM_DIAGRAM):   end;
21269      end;
MPRINT(EM_DIAGRAM):   end;
21270      else if last.numeric_value then do;
MPRINT(EM_DIAGRAM):   else if last.numeric_value then do;
21271      if flag=0 then do;
MPRINT(EM_DIAGRAM):   if flag=0 then do;
21272      tempstring = strip(abovetext)||", "||CHARACTER_VALUE;
MPRINT(EM_DIAGRAM):   tempstring = strip(abovetext)||", "||CHARACTER_VALUE;
21273      length = length(strip(tempstring));
MPRINT(EM_DIAGRAM):   length = length(strip(tempstring));
21274      if length < 32 then do;
MPRINT(EM_DIAGRAM):   if length < 32 then do;
21275      abovetext = strip(tempstring);
MPRINT(EM_DIAGRAM):   abovetext = strip(tempstring);
21276      end;
MPRINT(EM_DIAGRAM):   end;
21277      else do;
MPRINT(EM_DIAGRAM):   else do;
21278      abovetext = strip(abovetext)||", ...";
MPRINT(EM_DIAGRAM):   abovetext = strip(abovetext)||", ...";
21279      flag = 1;
MPRINT(EM_DIAGRAM):   flag = 1;
21280      end;
MPRINT(EM_DIAGRAM):   end;
21281      end;
MPRINT(EM_DIAGRAM):   end;
21282      branch = numeric_value;
MPRINT(EM_DIAGRAM):   branch = numeric_value;
21283      output;
MPRINT(EM_DIAGRAM):   output;
21284      end;
MPRINT(EM_DIAGRAM):   end;
21285      else do;
MPRINT(EM_DIAGRAM):   else do;
21286      if flag=0 then do;
MPRINT(EM_DIAGRAM):   if flag=0 then do;
21287      tempstring = strip(abovetext)||", "||CHARACTER_VALUE;
MPRINT(EM_DIAGRAM):   tempstring = strip(abovetext)||", "||CHARACTER_VALUE;
21288      length = length(strip(tempstring));
MPRINT(EM_DIAGRAM):   length = length(strip(tempstring));
21289      if length < 32 then do;
MPRINT(EM_DIAGRAM):   if length < 32 then do;
21290      abovetext = strip(tempstring);
MPRINT(EM_DIAGRAM):   abovetext = strip(tempstring);
21291      end;
MPRINT(EM_DIAGRAM):   end;
21292      else do;
MPRINT(EM_DIAGRAM):   else do;
21293      abovetext = strip(abovetext)||", ...";
MPRINT(EM_DIAGRAM):   abovetext = strip(abovetext)||", ...";
21294      flag=1;
MPRINT(EM_DIAGRAM):   flag=1;
21295      end;
MPRINT(EM_DIAGRAM):   end;
21296      end;
MPRINT(EM_DIAGRAM):   end;
21297      branch = numeric_value;
MPRINT(EM_DIAGRAM):   branch = numeric_value;
21298      end;
MPRINT(EM_DIAGRAM):   end;
21299      end;
MPRINT(EM_DIAGRAM):   end;
21300      keep parent branch abovetext;
MPRINT(EM_DIAGRAM):   keep parent branch abovetext;
21301      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      21174:25   21189:26   21203:24   21203:47   21212:26   21223:26   21236:24   21236:47   21249:26
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      21254:11
NOTE: There were 16 observations read from the data set WORK.TEMPOUTRULES.
NOTE: The data set WORK.TEMPABOVE has 32 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
21302      /* MIssing value to abovetext */
21303      data tempmissing;
MPRINT(EM_DIAGRAM):   data tempmissing;
21304      set EMWS1.Tree_OUTRULES;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree_OUTRULES;
21305      if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
MPRINT(EM_DIAGRAM):   if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
21306      rename node=parent numeric_value=branch character_value=misschar;
MPRINT(EM_DIAGRAM):   rename node=parent numeric_value=branch character_value=misschar;
21307      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 471 observations read from the data set EMWS1.TREE_OUTRULES.
NOTE: The data set WORK.TEMPMISSING has 16 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
21308      proc sort data=work.tempabove;
MPRINT(EM_DIAGRAM):   proc sort data=work.tempabove;
21309      by parent branch;
MPRINT(EM_DIAGRAM):   by parent branch;
21310      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 32 observations read from the data set WORK.TEMPABOVE.
NOTE: The data set WORK.TEMPABOVE has 32 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
21311      proc sort data=EMWS1.Tree_OUTNODES out=tempoutnodes;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Tree_OUTNODES out=tempoutnodes;
21312      by parent branch;
MPRINT(EM_DIAGRAM):   by parent branch;
21313      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 33 observations read from the data set EMWS1.TREE_OUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 33 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
21314      proc sort data=tempmissing;
MPRINT(EM_DIAGRAM):   proc sort data=tempmissing;
21315      by parent branch;
MPRINT(EM_DIAGRAM):   by parent branch;
21316      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 16 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPMISSING has 16 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
21317      data WORK.TREE_0VKOEBP_outnodes;
MPRINT(EM_DIAGRAM):   data WORK.TREE_0VKOEBP_outnodes;
21318      merge work.tempabove tempoutNodes(drop=abovetext ) tempmissing(in=_a);
MPRINT(EM_DIAGRAM):   merge work.tempabove tempoutNodes(drop=abovetext ) tempmissing(in=_a);
21319      by parent branch;
MPRINT(EM_DIAGRAM):   by parent branch;
21320      length traintotal validtotal 8;
MPRINT(EM_DIAGRAM):   length traintotal validtotal 8;
21321      retain traintotal validtotal;
MPRINT(EM_DIAGRAM):   retain traintotal validtotal;
21322      if _a then do;
MPRINT(EM_DIAGRAM):   if _a then do;
21323      if ^MISSING(abovetext) then do;
MPRINT(EM_DIAGRAM):   if ^MISSING(abovetext) then do;
21324      abovetext= strip(abovetext)||" %sysfunc(sasmsg(sashelp.dmine, tree_ormiss_vlabel, noquote))";
MPRINT(EM_DIAGRAM):   abovetext= strip(abovetext)||" Or Missing";
21325      end;
MPRINT(EM_DIAGRAM):   end;
21326      else do;
MPRINT(EM_DIAGRAM):   else do;
21327      abovetext = " %sysfunc(sasmsg(sashelp.dmine, tree_missonly_vlabel, noquote))";
MPRINT(EM_DIAGRAM):   abovetext = " Missing Values Only";
21328      end;
MPRINT(EM_DIAGRAM):   end;
21329      end;
MPRINT(EM_DIAGRAM):   end;
21330      if MISSING(abovetext) then abovetext="%sysfunc(sasmsg(sashelp.dmine, tree_nonmiss_vlabel, noquote))";
MPRINT(EM_DIAGRAM):   if MISSING(abovetext) then abovetext="Non-Missing Values";
21331      if node=1 then do;
MPRINT(EM_DIAGRAM):   if node=1 then do;
21332      traintotal = N;
MPRINT(EM_DIAGRAM):   traintotal = N;
21333      validtotal=VN;
MPRINT(EM_DIAGRAM):   validtotal=VN;
21334      end;
MPRINT(EM_DIAGRAM):   end;
21335      drop role rank stat misschar belowtext;
MPRINT(EM_DIAGRAM):   drop role rank stat misschar belowtext;
21336      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable VN is uninitialized.
NOTE: There were 32 observations read from the data set WORK.TEMPABOVE.
NOTE: There were 33 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 16 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TREE_0VKOEBP_OUTNODES has 33 observations and 28 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
21337      proc sort data=WORK.TREE_0VKOEBP_outnodes;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.TREE_0VKOEBP_outnodes;
21338      by node;
MPRINT(EM_DIAGRAM):   by node;
21339      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 33 observations read from the data set WORK.TREE_0VKOEBP_OUTNODES.
NOTE: The data set WORK.TREE_0VKOEBP_OUTNODES has 33 observations and 28 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
21340      proc sort data=tempbelow;
MPRINT(EM_DIAGRAM):   proc sort data=tempbelow;
21341      by node;
MPRINT(EM_DIAGRAM):   by node;
21342      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
21343      data WORK.TREE_0VKOEBP_outnodes;
MPRINT(EM_DIAGRAM):   data WORK.TREE_0VKOEBP_outnodes;
21344      merge WORK.TREE_0VKOEBP_outnodes tempbelow;
MPRINT(EM_DIAGRAM):   merge WORK.TREE_0VKOEBP_outnodes tempbelow;
21345      by node;
MPRINT(EM_DIAGRAM):   by node;
21346      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 33 observations read from the data set WORK.TREE_0VKOEBP_OUTNODES.
NOTE: There were 16 observations read from the data set WORK.TEMPBELOW.
NOTE: The data set WORK.TREE_0VKOEBP_OUTNODES has 33 observations and 29 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
21347      data tempoutstats;
MPRINT(EM_DIAGRAM):    data tempoutstats;
21348      set EMWS1.Tree_OUTSTATS;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree_OUTSTATS;
21349      length tarlevel $8;
MPRINT(EM_DIAGRAM):   length tarlevel $8;
21350      tarlevel ="NOMINAL";
MPRINT(EM_DIAGRAM):   tarlevel ="NOMINAL";
21351      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 231 observations read from the data set EMWS1.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPOUTSTATS has 231 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
21352      data EMWS1.Tree_TREE_PLOT;
MPRINT(EM_DIAGRAM):    data EMWS1.Tree_TREE_PLOT;
21353      length NODETEXT TEXTALL $800 N NODECOLOR 8;
MPRINT(EM_DIAGRAM):   length NODETEXT TEXTALL $800 N NODECOLOR 8;
21354      set WORK.TREE_0VKOEBP_outnodes;
MPRINT(EM_DIAGRAM):   set WORK.TREE_0VKOEBP_outnodes;
21355      label parent = "%sysfunc(sasmsg(sashelp.dmine, rpt_parentID_vlabel, noquote))" depth = "%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel, noquote))" belowtext= "%sysfunc(sasmsg(sashelp.dmine, rpt_belowtext_vlabel, noquote))" abovetext =
21356         "%sysfunc(sasmsg(sashelp.dmine, rpt_abovetext_vlabel, noquote))" linkwidth = "%sysfunc(sasmsg(sashelp.dmine, rpt_linkwidth_vlabel, noquote))" nodetext = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodetext_vlabel, noquote))" textall =
21357         "%sysfunc(sasmsg(sashelp.dmine, rpt_textall_vlabel, noquote))" N = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainn_vlabel, noquote))" nodecolor = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodecolor_vlabel, noquote))" node =
21358         "%sysfunc(sasmsg(sashelp.dmine, rpt_node_vlabel, noquote))";
MPRINT(EM_DIAGRAM):   label parent = "Parent Id" depth = "Depth" belowtext= "Below Text" abovetext = "Above Text" linkwidth = "Link Width" nodetext = "Node Text" textall = "All Text" N = "Train: Number of Observations" nodecolor = "Node Color" node =
"Node";
21359      keep NODE PARENT DEPTH BELOWTEXT ABOVETEXT LINKWIDTH NODETEXT TEXTALL N NODECOLOR;
MPRINT(EM_DIAGRAM):   keep NODE PARENT DEPTH BELOWTEXT ABOVETEXT LINKWIDTH NODETEXT TEXTALL N NODECOLOR;
21360      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable TEXTALL is uninitialized.
NOTE: Variable NODECOLOR is uninitialized.
NOTE: There were 33 observations read from the data set WORK.TREE_0VKOEBP_OUTNODES.
NOTE: The data set EMWS1.TREE_TREE_PLOT has 33 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
21361      proc sort data=EMWS1.Tree_TREE_PLOT;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Tree_TREE_PLOT;
21362      by node;
MPRINT(EM_DIAGRAM):   by node;
21363      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 33 observations read from the data set EMWS1.TREE_TREE_PLOT.
NOTE: The data set EMWS1.TREE_TREE_PLOT has 33 observations and 10 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
21364      proc sort data=tempoutstats;
MPRINT(EM_DIAGRAM):   proc sort data=tempoutstats;
21365      by node;
MPRINT(EM_DIAGRAM):   by node;
21366      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 231 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: The data set WORK.TEMPOUTSTATS has 231 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
21367      data EMWS1.Tree_TREE_PLOT;
MPRINT(EM_DIAGRAM):    data EMWS1.Tree_TREE_PLOT;
21368      merge EMWS1.Tree_TREE_PLOT tempoutstats;
MPRINT(EM_DIAGRAM):   merge EMWS1.Tree_TREE_PLOT tempoutstats;
21369      length text $800 _RASE_ P_genrerock 8;
MPRINT(EM_DIAGRAM):   length text $800 _RASE_ P_genrerock 8;
21370      retain P_genrerock eventlevel;
MPRINT(EM_DIAGRAM):   retain P_genrerock eventlevel;
21371      by node;
MPRINT(EM_DIAGRAM):   by node;
21372      if statname='N' then N=statvalue;
MPRINT(EM_DIAGRAM):   if statname='N' then N=statvalue;
21373      if statname='NPRIORS' then N=statvalue;
MPRINT(EM_DIAGRAM):   if statname='NPRIORS' then N=statvalue;
21374      if statname='PREDICTION' then eventlevel=category;
MPRINT(EM_DIAGRAM):   if statname='PREDICTION' then eventlevel=category;
21375      _RASE_ = .;
MPRINT(EM_DIAGRAM):   _RASE_ = .;
21376      if tarlevel ^= 'INTERVAL' then do;
MPRINT(EM_DIAGRAM):   if tarlevel ^= 'INTERVAL' then do;
21377      if STATNAME = 'PROBABILITY' then do;
MPRINT(EM_DIAGRAM):   if STATNAME = 'PROBABILITY' then do;
21378      if CATEGORY=EVENTLEVEL then do;
MPRINT(EM_DIAGRAM):   if CATEGORY=EVENTLEVEL then do;
21379      nodetext = right(put(strip(CATEGORY)||':', $12.))|| right(put(STATVALUE, percent13.1));
MPRINT(EM_DIAGRAM):   nodetext = right(put(strip(CATEGORY)||':', $12.))|| right(put(STATVALUE, percent13.1));
21380      text = right(put(strip(CATEGORY)||':', $12.))|| right(put(STATVALUE, percent13.1));
MPRINT(EM_DIAGRAM):   text = right(put(strip(CATEGORY)||':', $12.))|| right(put(STATVALUE, percent13.1));
21381      P_genrerock = round(STATVALUE, .01);
MPRINT(EM_DIAGRAM):   P_genrerock = round(STATVALUE, .01);
21382      end;
MPRINT(EM_DIAGRAM):   end;
21383      else do;
MPRINT(EM_DIAGRAM):   else do;
21384      text = right(put(strip(CATEGORY)||':', $12.))|| right(put(STATVALUE, percent13.1));
MPRINT(EM_DIAGRAM):   text = right(put(strip(CATEGORY)||':', $12.))|| right(put(STATVALUE, percent13.1));
21385      end;
MPRINT(EM_DIAGRAM):   end;
21386      textall = strip(textall)||'0A'x||strip( text);
MPRINT(EM_DIAGRAM):   textall = strip(textall)||'0A'x||strip( text);
21387      end;
MPRINT(EM_DIAGRAM):   end;
21388      if last.node then do;
MPRINT(EM_DIAGRAM):   if last.node then do;
21389      nodetext = trim(nodetext)||'0A'x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )):"|| put(N, 13.);
MPRINT(EM_DIAGRAM):   nodetext = trim(nodetext)||'0A'x||" Count:"|| put(N, 13.);
21390      textall = trim(textall)||'0A'x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )):"|| put(N, 13.);
MPRINT(EM_DIAGRAM):   textall = trim(textall)||'0A'x||" Count:"|| put(N, 13.);
21391      output EMWS1.Tree_TREE_PLOT;
MPRINT(EM_DIAGRAM):   output EMWS1.Tree_TREE_PLOT;
21392      end;
MPRINT(EM_DIAGRAM):   end;
21393      end;
MPRINT(EM_DIAGRAM):   end;
21394      else do;
MPRINT(EM_DIAGRAM):   else do;
21395      if statname='RASE' then _RASE_=statvalue;
MPRINT(EM_DIAGRAM):   if statname='RASE' then _RASE_=statvalue;
21396      label _RASE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_trase_vlabel, noquote))";
MPRINT(EM_DIAGRAM):   label _RASE_ = "Train: Root Average Square Error";
21397      if STATNAME = 'PREDICTION' then do;
MPRINT(EM_DIAGRAM):   if STATNAME = 'PREDICTION' then do;
21398      nodetext= "%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote))"|| put(STATVALUE, 13.4)||'0A'x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )):"|| put(N, 13.);
MPRINT(EM_DIAGRAM):   nodetext= "Average"|| put(STATVALUE, 13.4)||'0A'x|| "Count:"|| put(N, 13.);
21399      textall = nodetext;
MPRINT(EM_DIAGRAM):   textall = nodetext;
21400      P_genrerock = STATVALUE;
MPRINT(EM_DIAGRAM):   P_genrerock = STATVALUE;
21401      ;
MPRINT(EM_DIAGRAM):   ;
21402      ;
MPRINT(EM_DIAGRAM):   ;
21403      end;
MPRINT(EM_DIAGRAM):   end;
21404      if last.node then do;
MPRINT(EM_DIAGRAM):   if last.node then do;
21405      output EMWS1.Tree_TREE_PLOT;
MPRINT(EM_DIAGRAM):   output EMWS1.Tree_TREE_PLOT;
21406      end;
MPRINT(EM_DIAGRAM):   end;
21407      ;
MPRINT(EM_DIAGRAM):   ;
21408      end;
MPRINT(EM_DIAGRAM):   end;
21409      label P_genrerock = "%sysfunc(sasmsg(sashelp.dmine, rpt_predictedvar_vlabel, noquote))";
MPRINT(EM_DIAGRAM):   label P_genrerock = "Predicted Variable";
21410      keep NODE PARENT DEPTH BELOWTEXT ABOVETEXT LINKWIDTH NODETEXT TEXTALL N NODECOLOR _RASE_ P_genrerock;
MPRINT(EM_DIAGRAM):   keep NODE PARENT DEPTH BELOWTEXT ABOVETEXT LINKWIDTH NODETEXT TEXTALL N NODECOLOR _RASE_ P_genrerock;
21411      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 33 observations read from the data set EMWS1.TREE_TREE_PLOT.
NOTE: There were 231 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: The data set EMWS1.TREE_TREE_PLOT has 33 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
21412      data tempcolor;
MPRINT(EM_DIAGRAM):   data tempcolor;
21413      set EMWS1.Tree_OUTSTATS;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree_OUTSTATS;
21414      retain eventlevel;
MPRINT(EM_DIAGRAM):   retain eventlevel;
21415      if STATNAME='PREDICTION' then eventlevel=CATEGORY;
MPRINT(EM_DIAGRAM):   if STATNAME='PREDICTION' then eventlevel=CATEGORY;
21416      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 231 observations read from the data set EMWS1.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPCOLOR has 231 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
21417      data tempcolor;
MPRINT(EM_DIAGRAM):   data tempcolor;
21418      set tempcolor;
MPRINT(EM_DIAGRAM):   set tempcolor;
21419      if 'NOMINAL' ne 'INTERVAL' then do;
MPRINT(EM_DIAGRAM):   if 'NOMINAL' ne 'INTERVAL' then do;
21420      if CATEGORY=EVENTLEVEL AND STATNAME="PROBABILITY";
MPRINT(EM_DIAGRAM):   if CATEGORY=EVENTLEVEL AND STATNAME="PROBABILITY";
21421      end;
MPRINT(EM_DIAGRAM):   end;
21422      else do;
MPRINT(EM_DIAGRAM):   else do;
21423      if STATNAME="PREDICTION";
MPRINT(EM_DIAGRAM):   if STATNAME="PREDICTION";
21424      end;
MPRINT(EM_DIAGRAM):   end;
21425      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 231 observations read from the data set WORK.TEMPCOLOR.
NOTE: The data set WORK.TEMPCOLOR has 33 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
21426      data tempcolor;
MPRINT(EM_DIAGRAM):   data tempcolor;
21427      set tempcolor;
MPRINT(EM_DIAGRAM):   set tempcolor;
21428      length nodecolor 8;
MPRINT(EM_DIAGRAM):   length nodecolor 8;
21429      if 'NOMINAL' ne 'INTERVAL' then do;
MPRINT(EM_DIAGRAM):   if 'NOMINAL' ne 'INTERVAL' then do;
21430      nodecolor = round(100*(STATVALUE), .01);
MPRINT(EM_DIAGRAM):   nodecolor = round(100*(STATVALUE), .01);
21431      end;
MPRINT(EM_DIAGRAM):   end;
21432      else do;
MPRINT(EM_DIAGRAM):   else do;
21433      nodecolor=round(statvalue, .01);
MPRINT(EM_DIAGRAM):   nodecolor=round(statvalue, .01);
21434      end;
MPRINT(EM_DIAGRAM):   end;
21435      keep node nodecolor;
MPRINT(EM_DIAGRAM):   keep node nodecolor;
21436      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 33 observations read from the data set WORK.TEMPCOLOR.
NOTE: The data set WORK.TEMPCOLOR has 33 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
21437      proc sort data=EMWS1.Tree_TREE_PLOT;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Tree_TREE_PLOT;
21438      by node;
MPRINT(EM_DIAGRAM):   by node;
21439      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 33 observations read from the data set EMWS1.TREE_TREE_PLOT.
NOTE: The data set EMWS1.TREE_TREE_PLOT has 33 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
21440      proc sort data=tempcolor;
MPRINT(EM_DIAGRAM):   proc sort data=tempcolor;
21441      by node;
MPRINT(EM_DIAGRAM):   by node;
21442      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 33 observations read from the data set WORK.TEMPCOLOR.
NOTE: The data set WORK.TEMPCOLOR has 33 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
21443      data EMWS1.Tree_TREE_PLOT;
MPRINT(EM_DIAGRAM):   data EMWS1.Tree_TREE_PLOT;
21444      merge EMWS1.Tree_TREE_PLOT tempcolor;
MPRINT(EM_DIAGRAM):   merge EMWS1.Tree_TREE_PLOT tempcolor;
21445      by node;
MPRINT(EM_DIAGRAM):   by node;
21446      length traintotal 8;
MPRINT(EM_DIAGRAM):   length traintotal 8;
21447      retain traintotal;
MPRINT(EM_DIAGRAM):   retain traintotal;
21448      if node=1 then do;
MPRINT(EM_DIAGRAM):   if node=1 then do;
21449      traintotal = N;
MPRINT(EM_DIAGRAM):   traintotal = N;
21450      end;
MPRINT(EM_DIAGRAM):   end;
21451      if NODE eq . then delete;
MPRINT(EM_DIAGRAM):   if NODE eq . then delete;
21452      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 33 observations read from the data set EMWS1.TREE_TREE_PLOT.
NOTE: There were 33 observations read from the data set WORK.TEMPCOLOR.
NOTE: The data set EMWS1.TREE_TREE_PLOT has 33 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
21453      data EMWS1.Tree_TREE_PLOT;
MPRINT(EM_DIAGRAM):   data EMWS1.Tree_TREE_PLOT;
21454      set EMWS1.Tree_TREE_PLOT;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree_TREE_PLOT;
21455      textall = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote, )):"|| put(Node, 13.)||'0A'x||trim(textall);
MPRINT(EM_DIAGRAM):   textall = "Node Id:"|| put(Node, 13.)||'0A'x||trim(textall);
21456      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 33 observations read from the data set EMWS1.TREE_TREE_PLOT.
NOTE: The data set EMWS1.TREE_TREE_PLOT has 33 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
21457      data tempout;
MPRINT(EM_DIAGRAM):   data tempout;
21458      set WORK.TREE_0VKOEBP_outnodes;
MPRINT(EM_DIAGRAM):   set WORK.TREE_0VKOEBP_outnodes;
21459      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 33 observations read from the data set WORK.TREE_0VKOEBP_OUTNODES.
NOTE: The data set WORK.TEMPOUT has 33 observations and 29 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
21460      proc sort data=tempout;
MPRINT(EM_DIAGRAM):   proc sort data=tempout;
21461      by descending P_genrerock;
MPRINT(EM_DIAGRAM):   by descending P_genrerock;
21462      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 33 observations read from the data set WORK.TEMPOUT.
NOTE: The data set WORK.TEMPOUT has 33 observations and 29 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
21463      data tree_temp;
MPRINT(EM_DIAGRAM):   data tree_temp;
21464      set tempout;
MPRINT(EM_DIAGRAM):   set tempout;
21465      if LEAF ne .;
MPRINT(EM_DIAGRAM):   if LEAF ne .;
21466      label index="%sysfunc(sasmsg(sashelp.dmine, rpt_leafindex_vlabel  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label index= "Leaf Index";
21467      label percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label percevent_train = "Event Percentage";
21468      label perc_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_train_vlabel  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label perc_train = "Percent Cases";
21469      label tprob="%sysfunc(sasmsg(sashelp.dmine, rpt_prob_vlabel  , NOQUOTE, %nrbquote(ROCK)))";
MPRINT(EM_DIAGRAM):   label tprob= "Training Percent ROCK";
21470      tprob = round(P_genrerock, .01);
MPRINT(EM_DIAGRAM):   tprob = round(P_genrerock, .01);
21471      percevent_train = round ( tprob*100, .01);
MPRINT(EM_DIAGRAM):   percevent_train = round ( tprob*100, .01);
21472      *perc_train =round( ( N / traintotal)*100, .001);
MPRINT(EM_DIAGRAM):   *perc_train =round( ( N / traintotal)*100, .001);
21473      perc_train =round( ( N / traintotal), .01);
MPRINT(EM_DIAGRAM):   perc_train =round( ( N / traintotal), .01);
21474      if missing(perc_train) then perc_train = round( linkwidth*100, .001);
MPRINT(EM_DIAGRAM):   if missing(perc_train) then perc_train = round( linkwidth*100, .001);
21475      index = _n_;
MPRINT(EM_DIAGRAM):   index = _n_;
21476      keep NODE index tprob perc_train percevent_train
21477      ;
MPRINT(EM_DIAGRAM):   keep NODE index tprob perc_train percevent_train ;
21478      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 33 observations read from the data set WORK.TEMPOUT.
NOTE: The data set WORK.TREE_TEMP has 17 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
21479      proc sort data=tree_temp;
MPRINT(EM_DIAGRAM):   proc sort data=tree_temp;
21480      by NODE;
MPRINT(EM_DIAGRAM):   by NODE;
21481      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 17 observations read from the data set WORK.TREE_TEMP.
NOTE: The data set WORK.TREE_TEMP has 17 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
21482      proc sort data=EMWS1.Tree_TREE_PLOT;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Tree_TREE_PLOT;
21483      by NODE;
MPRINT(EM_DIAGRAM):   by NODE;
21484      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 33 observations read from the data set EMWS1.TREE_TREE_PLOT.
NOTE: The data set EMWS1.TREE_TREE_PLOT has 33 observations and 13 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
21485      data EMWS1.Tree_TREE_PLOT;
MPRINT(EM_DIAGRAM):   data EMWS1.Tree_TREE_PLOT;
21486      merge EMWS1.Tree_TREE_PLOT tree_temp;
MPRINT(EM_DIAGRAM):   merge EMWS1.Tree_TREE_PLOT tree_temp;
21487      by NODE;
MPRINT(EM_DIAGRAM):   by NODE;
21488      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 33 observations read from the data set EMWS1.TREE_TREE_PLOT.
NOTE: There were 17 observations read from the data set WORK.TREE_TEMP.
NOTE: The data set EMWS1.TREE_TREE_PLOT has 33 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
21489      proc sort data=EMWS1.Tree_TREE_PLOT;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Tree_TREE_PLOT;
21490      by node index;
MPRINT(EM_DIAGRAM):   by node index;
21491      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 33 observations read from the data set EMWS1.TREE_TREE_PLOT.
NOTE: The data set EMWS1.TREE_TREE_PLOT has 33 observations and 17 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
21492      proc sort data=EMWS1.Tree_TREE_PLOT out=t;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Tree_TREE_PLOT out=t;
21493      by descending N;
MPRINT(EM_DIAGRAM):   by descending N;
21494      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 33 observations read from the data set EMWS1.TREE_TREE_PLOT.
NOTE: The data set WORK.T has 33 observations and 17 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
21495      data t;
MPRINT(EM_DIAGRAM):   data t;
21496      set t;
MPRINT(EM_DIAGRAM):   set t;
21497      label N="%sysfunc(sasmsg(sashelp.dmine, rpt_trainingobs_vlabel  , NOQUOTE))" DEPTH="%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel  , NOQUOTE))"
21498      ;
MPRINT(EM_DIAGRAM):   label N= "Training Observations" DEPTH= "Depth" ;
21499      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 33 observations read from the data set WORK.T.
NOTE: The data set WORK.T has 33 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
21500      title8 "%sysfunc(sasmsg(sashelp.dmine, rpt_treeleafreport_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title8 "Tree Leaf Report";
21501      proc print data=t noobs label;
MPRINT(EM_DIAGRAM):   proc print data=t noobs label;
21502      where tprob ne .;
MPRINT(EM_DIAGRAM):   where tprob ne .;
21503      var node depth N tprob
21504      ;
MPRINT(EM_DIAGRAM):   var node depth N tprob ;
21505      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 17 observations read from the data set WORK.T.
      WHERE tprob not = .;
NOTE: The PROCEDURE PRINT printed page 5.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
21506      title8;
MPRINT(EM_DIAGRAM):   title8;
21507      data EMWS1.Tree_OUTSTATS;
MPRINT(EM_DIAGRAM):    data EMWS1.Tree_OUTSTATS;
21508      set EMWS1.Tree_OUTSTATS;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree_OUTSTATS;
21509      if STATNAME='TARGET' then delete;
MPRINT(EM_DIAGRAM):   if STATNAME='TARGET' then delete;
21510      if STATNAME='PREDICTION' and STATVALUE=. then delete;
MPRINT(EM_DIAGRAM):   if STATNAME='PREDICTION' and STATVALUE=. then delete;
21511      drop LEAF;
MPRINT(EM_DIAGRAM):   drop LEAF;
21512      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 231 observations read from the data set EMWS1.TREE_OUTSTATS.
NOTE: The data set EMWS1.TREE_OUTSTATS has 198 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
21513      proc arbor inmodel=EMWS1.Tree_EMTREE version=10;
MPRINT(EM_DIAGRAM):    proc arbor inmodel=EMWS1.Tree_EMTREE version=10;
NOTE: 1648380 kilobytes of physical memory.
NOTE: The subtree sequence contains 24 subtrees. The largest has 47 nodes and 24 leaves.
21514      save model = EMWS1.Tree_EXPORTTREE;
MPRINT(EM_DIAGRAM):   save model = EMWS1.Tree_EXPORTTREE;
NOTE: The data set EMWS1.TREE_EXPORTTREE has 1870 observations and 4 variables.
21515      run;
MPRINT(EM_DIAGRAM):   run;
 
 
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
 
 
21516      data work.Tree_tarmetads;
MPRINT(EM_DIAGRAM):   data work.Tree_tarmetads;
21517      set EMWS1.GrfExpl_CMeta_TRAIN(where=(ROLE='TARGET'));
MPRINT(EM_DIAGRAM):   set EMWS1.GrfExpl_CMeta_TRAIN(where=(ROLE='TARGET'));
21518      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.GRFEXPL_CMETA_TRAIN.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TREE_TARMETADS has 1 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
NOTE: This SAS session is using a registry in WORK.  All changes will be lost at the end of this session.
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "15 December 2015" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16:52:47 o'clock" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                15 December 2015
Time:                16:52:47 o'clock
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O06N4VIJ "F:\Dropbox\NOVA\1st\DataMining\Project\DataMining\Songs\SAS_Miner\Songs\Workspaces\EMWS1\Tree\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O06N4VIJ new;
MPRINT(EM_DIAGRAM):   run;
21620      filename emflow "F:\Dropbox\NOVA\1st\DataMining\Project\DataMining\Songs\SAS_Miner\Songs\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "F:\Dropbox\NOVA\1st\DataMining\Project\DataMining\Songs\SAS_Miner\Songs\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
21621      *------------------------------------------------------------*;
21622      * Tree: Scoring DATA data;
21623      *------------------------------------------------------------*;
21624      data EMWS1.Tree_TRAIN
21625      / view=EMWS1.Tree_TRAIN
21626      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Tree_TRAIN / view=EMWS1.Tree_TRAIN ;
21627      set EMWS1.GrfExpl_TRAIN
21628      ;
MPRINT(EM_DIAGRAM):   set EMWS1.GrfExpl_TRAIN ;
21629      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file F:\Dropbox\NOVA\1st\DataMining\Project\DataMining\Songs\SAS_Miner\Songs\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas.
21630     +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
21631     +******             DECISION TREE SCORING CODE             ******;
MPRINT(EM_DIAGRAM):   ****** DECISION TREE SCORING CODE ******;
21632     +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
21633     +
21634     +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
MPRINT(EM_DIAGRAM):   ****** LENGTHS OF NEW CHARACTER VARIABLES ******;
21635     +LENGTH F_genre  $    9;
MPRINT(EM_DIAGRAM):   LENGTH F_genre $ 9;
21636     +LENGTH I_genre  $    9;
MPRINT(EM_DIAGRAM):   LENGTH I_genre $ 9;
21637     +LENGTH U_genre  $    9;
MPRINT(EM_DIAGRAM):   LENGTH U_genre $ 9;
21638     +LENGTH _WARN_  $    4;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $ 4;
21639     +
21640     +******              LABELS FOR NEW VARIABLES              ******;
MPRINT(EM_DIAGRAM):   ****** LABELS FOR NEW VARIABLES ******;
21641     +LABEL _NODE_  = 'Node' ;
MPRINT(EM_DIAGRAM):   LABEL _NODE_ = 'Node' ;
21642     +LABEL _LEAF_  = 'Leaf' ;
MPRINT(EM_DIAGRAM):   LABEL _LEAF_ = 'Leaf' ;
21643     +LABEL P_genreclassical  = 'Predicted: genre=classical' ;
MPRINT(EM_DIAGRAM):   LABEL P_genreclassical = 'Predicted: genre=classical' ;
21644     +LABEL P_genrerock  = 'Predicted: genre=rock' ;
MPRINT(EM_DIAGRAM):   LABEL P_genrerock = 'Predicted: genre=rock' ;
21645     +LABEL P_genrepop  = 'Predicted: genre=pop' ;
MPRINT(EM_DIAGRAM):   LABEL P_genrepop = 'Predicted: genre=pop' ;
21646     +LABEL P_genremetal  = 'Predicted: genre=metal' ;
MPRINT(EM_DIAGRAM):   LABEL P_genremetal = 'Predicted: genre=metal' ;
21647     +LABEL P_genrejazz  = 'Predicted: genre=jazz' ;
MPRINT(EM_DIAGRAM):   LABEL P_genrejazz = 'Predicted: genre=jazz' ;
21648     +LABEL Q_genreclassical  = 'Unadjusted P: genre=classical' ;
MPRINT(EM_DIAGRAM):   LABEL Q_genreclassical = 'Unadjusted P: genre=classical' ;
21649     +LABEL Q_genrerock  = 'Unadjusted P: genre=rock' ;
MPRINT(EM_DIAGRAM):   LABEL Q_genrerock = 'Unadjusted P: genre=rock' ;
21650     +LABEL Q_genrepop  = 'Unadjusted P: genre=pop' ;
MPRINT(EM_DIAGRAM):   LABEL Q_genrepop = 'Unadjusted P: genre=pop' ;
21651     +LABEL Q_genremetal  = 'Unadjusted P: genre=metal' ;
MPRINT(EM_DIAGRAM):   LABEL Q_genremetal = 'Unadjusted P: genre=metal' ;
21652     +LABEL Q_genrejazz  = 'Unadjusted P: genre=jazz' ;
MPRINT(EM_DIAGRAM):   LABEL Q_genrejazz = 'Unadjusted P: genre=jazz' ;
21653     +LABEL R_genreclassical  = 'Residual: genre=classical' ;
MPRINT(EM_DIAGRAM):   LABEL R_genreclassical = 'Residual: genre=classical' ;
21654     +LABEL R_genrerock  = 'Residual: genre=rock' ;
MPRINT(EM_DIAGRAM):   LABEL R_genrerock = 'Residual: genre=rock' ;
21655     +LABEL R_genrepop  = 'Residual: genre=pop' ;
MPRINT(EM_DIAGRAM):   LABEL R_genrepop = 'Residual: genre=pop' ;
21656     +LABEL R_genremetal  = 'Residual: genre=metal' ;
MPRINT(EM_DIAGRAM):   LABEL R_genremetal = 'Residual: genre=metal' ;
21657     +LABEL R_genrejazz  = 'Residual: genre=jazz' ;
MPRINT(EM_DIAGRAM):   LABEL R_genrejazz = 'Residual: genre=jazz' ;
21658     +LABEL F_genre  = 'From: genre' ;
MPRINT(EM_DIAGRAM):   LABEL F_genre = 'From: genre' ;
21659     +LABEL I_genre  = 'Into: genre' ;
MPRINT(EM_DIAGRAM):   LABEL I_genre = 'Into: genre' ;
21660     +LABEL U_genre  = 'Unnormalized Into: genre' ;
MPRINT(EM_DIAGRAM):   LABEL U_genre = 'Unnormalized Into: genre' ;
21661     +LABEL _WARN_  = 'Warnings' ;
MPRINT(EM_DIAGRAM):   LABEL _WARN_ = 'Warnings' ;
21662     +
21663     +
21664     +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
MPRINT(EM_DIAGRAM):   ****** TEMPORARY VARIABLES FOR FORMATTED VALUES ******;
21665     +LENGTH _ARBFMT_9 $      9; DROP _ARBFMT_9;
MPRINT(EM_DIAGRAM):   LENGTH _ARBFMT_9 $ 9;
MPRINT(EM_DIAGRAM):   DROP _ARBFMT_9;
21666     +_ARBFMT_9 = ' '; /* Initialize to avoid warning. */
MPRINT(EM_DIAGRAM):   _ARBFMT_9 = ' ';
21667     +
21668     +
21669     +_ARBFMT_9 = PUT( genre , $CHAR9.);
MPRINT(EM_DIAGRAM):   _ARBFMT_9 = PUT( genre , $CHAR9.);
21670     + %DMNORMCP( _ARBFMT_9, F_genre );
MPRINT(DMNORMCP):   F_genre=dmnorm(_ARBFMT_9,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   ****** ASSIGN OBSERVATION TO NODE ******;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(acousticness ) AND 0.4735715 <= acousticness THEN DO;
21671     +
MPRINT(EM_DIAGRAM):   IF NOT MISSING(danceability ) AND danceability < 0.344749 THEN DO;
21672     +******             ASSIGN OBSERVATION TO NODE             ******;
21673     +IF  NOT MISSING(acousticness ) AND
MPRINT(EM_DIAGRAM):   IF NOT MISSING(loudness ) AND -7.374 <= loudness THEN DO;
21674     +             0.4735715 <= acousticness  THEN DO;
MPRINT(EM_DIAGRAM):   _NODE_ = 13;
21675     +  IF  NOT MISSING(danceability ) AND
MPRINT(EM_DIAGRAM):   _LEAF_ = 13;
21676     +    danceability  <             0.344749 THEN DO;
MPRINT(EM_DIAGRAM):   P_genreclassical = 0;
21677     +    IF  NOT MISSING(loudness ) AND
MPRINT(EM_DIAGRAM):   P_genrerock = 0.6;
21678     +                    -7.374 <= loudness  THEN DO;
MPRINT(EM_DIAGRAM):   P_genrepop = 0;
21679     +      _NODE_  =                   13;
MPRINT(EM_DIAGRAM):   P_genremetal = 0.2;
21680     +      _LEAF_  =                   13;
MPRINT(EM_DIAGRAM):   P_genrejazz = 0.2;
21681     +      P_genreclassical  =                    0;
MPRINT(EM_DIAGRAM):   Q_genreclassical = 0;
21682     +      P_genrerock  =                  0.6;
MPRINT(EM_DIAGRAM):   Q_genrerock = 0.6;
21683     +      P_genrepop  =                    0;
MPRINT(EM_DIAGRAM):   Q_genrepop = 0;
21684     +      P_genremetal  =                  0.2;
MPRINT(EM_DIAGRAM):   Q_genremetal = 0.2;
21685     +      P_genrejazz  =                  0.2;
MPRINT(EM_DIAGRAM):   Q_genrejazz = 0.2;
21686     +      Q_genreclassical  =                    0;
MPRINT(EM_DIAGRAM):   I_genre = 'ROCK' ;
21687     +      Q_genrerock  =                  0.6;
MPRINT(EM_DIAGRAM):   U_genre = 'rock' ;
21688     +      Q_genrepop  =                    0;
MPRINT(EM_DIAGRAM):   END;
21689     +      Q_genremetal  =                  0.2;
21690     +      Q_genrejazz  =                  0.2;
MPRINT(EM_DIAGRAM):   ELSE DO;
21691     +      I_genre  = 'ROCK' ;
MPRINT(EM_DIAGRAM):   _NODE_ = 12;
21692     +      U_genre  = 'rock' ;
MPRINT(EM_DIAGRAM):   _LEAF_ = 12;
21693     +      END;
MPRINT(EM_DIAGRAM):   P_genreclassical = 0.93059936908517;
21694     +    ELSE DO;
MPRINT(EM_DIAGRAM):   P_genrerock = 0.00946372239747;
MPRINT(EM_DIAGRAM):   P_genrepop = 0.00946372239747;
21695     +      _NODE_  =                   12;
MPRINT(EM_DIAGRAM):   P_genremetal = 0;
21696     +      _LEAF_  =                   12;
MPRINT(EM_DIAGRAM):   P_genrejazz = 0.05047318611987;
21697     +      P_genreclassical  =     0.93059936908517;
MPRINT(EM_DIAGRAM):   Q_genreclassical = 0.93059936908517;
21698     +      P_genrerock  =     0.00946372239747;
MPRINT(EM_DIAGRAM):   Q_genrerock = 0.00946372239747;
21699     +      P_genrepop  =     0.00946372239747;
MPRINT(EM_DIAGRAM):   Q_genrepop = 0.00946372239747;
21700     +      P_genremetal  =                    0;
MPRINT(EM_DIAGRAM):   Q_genremetal = 0;
21701     +      P_genrejazz  =     0.05047318611987;
MPRINT(EM_DIAGRAM):   Q_genrejazz = 0.05047318611987;
21702     +      Q_genreclassical  =     0.93059936908517;
MPRINT(EM_DIAGRAM):   I_genre = 'CLASSICAL' ;
21703     +      Q_genrerock  =     0.00946372239747;
MPRINT(EM_DIAGRAM):   U_genre = 'classical' ;
21704     +      Q_genrepop  =     0.00946372239747;
MPRINT(EM_DIAGRAM):   END;
21705     +      Q_genremetal  =                    0;
MPRINT(EM_DIAGRAM):   END;
21706     +      Q_genrejazz  =     0.05047318611987;
21707     +      I_genre  = 'CLASSICAL' ;
MPRINT(EM_DIAGRAM):   ELSE DO;
21708     +      U_genre  = 'classical' ;
21709     +      END;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(instrumentalness ) AND instrumentalness < 0.0000395 THEN DO;
21710     +    END;
21711     +  ELSE DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(loudness ) AND loudness < -10.354 THEN DO;
MPRINT(EM_DIAGRAM):   _NODE_ = 22;
21712     +    IF  NOT MISSING(instrumentalness ) AND
MPRINT(EM_DIAGRAM):   _LEAF_ = 14;
21713     +      instrumentalness  <            0.0000395 THEN DO;
MPRINT(EM_DIAGRAM):   P_genreclassical = 0.33333333333333;
21714     +      IF  NOT MISSING(loudness ) AND
MPRINT(EM_DIAGRAM):   P_genrerock = 0.19047619047619;
21715     +        loudness  <              -10.354 THEN DO;
MPRINT(EM_DIAGRAM):   P_genrepop = 0.04761904761904;
21716     +        _NODE_  =                   22;
MPRINT(EM_DIAGRAM):   P_genremetal = 0;
21717     +        _LEAF_  =                   14;
MPRINT(EM_DIAGRAM):   P_genrejazz = 0.42857142857142;
21718     +        P_genreclassical  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   Q_genreclassical = 0.33333333333333;
21719     +        P_genrerock  =     0.19047619047619;
MPRINT(EM_DIAGRAM):   Q_genrerock = 0.19047619047619;
21720     +        P_genrepop  =     0.04761904761904;
MPRINT(EM_DIAGRAM):   Q_genrepop = 0.04761904761904;
21721     +        P_genremetal  =                    0;
MPRINT(EM_DIAGRAM):   Q_genremetal = 0;
21722     +        P_genrejazz  =     0.42857142857142;
MPRINT(EM_DIAGRAM):   Q_genrejazz = 0.42857142857142;
21723     +        Q_genreclassical  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   I_genre = 'JAZZ' ;
21724     +        Q_genrerock  =     0.19047619047619;
MPRINT(EM_DIAGRAM):   U_genre = 'jazz' ;
21725     +        Q_genrepop  =     0.04761904761904;
MPRINT(EM_DIAGRAM):   END;
21726     +        Q_genremetal  =                    0;
21727     +        Q_genrejazz  =     0.42857142857142;
MPRINT(EM_DIAGRAM):   ELSE DO;
21728     +        I_genre  = 'JAZZ' ;
MPRINT(EM_DIAGRAM):   _NODE_ = 23;
21729     +        U_genre  = 'jazz' ;
MPRINT(EM_DIAGRAM):   _LEAF_ = 15;
21730     +        END;
MPRINT(EM_DIAGRAM):   P_genreclassical = 0;
21731     +      ELSE DO;
MPRINT(EM_DIAGRAM):   P_genrerock = 0.23529411764705;
MPRINT(EM_DIAGRAM):   P_genrepop = 0.73529411764705;
21732     +        _NODE_  =                   23;
MPRINT(EM_DIAGRAM):   P_genremetal = 0.02941176470588;
21733     +        _LEAF_  =                   15;
MPRINT(EM_DIAGRAM):   P_genrejazz = 0;
21734     +        P_genreclassical  =                    0;
MPRINT(EM_DIAGRAM):   Q_genreclassical = 0;
21735     +        P_genrerock  =     0.23529411764705;
MPRINT(EM_DIAGRAM):   Q_genrerock = 0.23529411764705;
21736     +        P_genrepop  =     0.73529411764705;
MPRINT(EM_DIAGRAM):   Q_genrepop = 0.73529411764705;
21737     +        P_genremetal  =     0.02941176470588;
MPRINT(EM_DIAGRAM):   Q_genremetal = 0.02941176470588;
21738     +        P_genrejazz  =                    0;
MPRINT(EM_DIAGRAM):   Q_genrejazz = 0;
21739     +        Q_genreclassical  =                    0;
MPRINT(EM_DIAGRAM):   I_genre = 'POP' ;
21740     +        Q_genrerock  =     0.23529411764705;
MPRINT(EM_DIAGRAM):   U_genre = 'pop' ;
21741     +        Q_genrepop  =     0.73529411764705;
MPRINT(EM_DIAGRAM):   END;
21742     +        Q_genremetal  =     0.02941176470588;
MPRINT(EM_DIAGRAM):   END;
21743     +        Q_genrejazz  =                    0;
21744     +        I_genre  = 'POP' ;
MPRINT(EM_DIAGRAM):   ELSE DO;
21745     +        U_genre  = 'pop' ;
21746     +        END;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(loudness ) AND -5.6925 <= loudness THEN DO;
21747     +      END;
MPRINT(EM_DIAGRAM):   _NODE_ = 25;
21748     +    ELSE DO;
MPRINT(EM_DIAGRAM):   _LEAF_ = 17;
MPRINT(EM_DIAGRAM):   P_genreclassical = 0.11111111111111;
21749     +      IF  NOT MISSING(loudness ) AND
MPRINT(EM_DIAGRAM):   P_genrerock = 0.11111111111111;
21750     +                     -5.6925 <= loudness  THEN DO;
MPRINT(EM_DIAGRAM):   P_genrepop = 0.44444444444444;
21751     +        _NODE_  =                   25;
MPRINT(EM_DIAGRAM):   P_genremetal = 0;
21752     +        _LEAF_  =                   17;
MPRINT(EM_DIAGRAM):   P_genrejazz = 0.33333333333333;
21753     +        P_genreclassical  =     0.11111111111111;
MPRINT(EM_DIAGRAM):   Q_genreclassical = 0.11111111111111;
21754     +        P_genrerock  =     0.11111111111111;
MPRINT(EM_DIAGRAM):   Q_genrerock = 0.11111111111111;
21755     +        P_genrepop  =     0.44444444444444;
MPRINT(EM_DIAGRAM):   Q_genrepop = 0.44444444444444;
21756     +        P_genremetal  =                    0;
MPRINT(EM_DIAGRAM):   Q_genremetal = 0;
21757     +        P_genrejazz  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   Q_genrejazz = 0.33333333333333;
21758     +        Q_genreclassical  =     0.11111111111111;
MPRINT(EM_DIAGRAM):   I_genre = 'POP' ;
21759     +        Q_genrerock  =     0.11111111111111;
MPRINT(EM_DIAGRAM):   U_genre = 'pop' ;
21760     +        Q_genrepop  =     0.44444444444444;
MPRINT(EM_DIAGRAM):   END;
21761     +        Q_genremetal  =                    0;
21762     +        Q_genrejazz  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   ELSE DO;
21763     +        I_genre  = 'POP' ;
MPRINT(EM_DIAGRAM):   _NODE_ = 24;
21764     +        U_genre  = 'pop' ;
MPRINT(EM_DIAGRAM):   _LEAF_ = 16;
21765     +        END;
MPRINT(EM_DIAGRAM):   P_genreclassical = 0.23062015503875;
21766     +      ELSE DO;
MPRINT(EM_DIAGRAM):   P_genrerock = 0.0329457364341;
MPRINT(EM_DIAGRAM):   P_genrepop = 0.00581395348837;
21767     +        _NODE_  =                   24;
MPRINT(EM_DIAGRAM):   P_genremetal = 0.01162790697674;
21768     +        _LEAF_  =                   16;
MPRINT(EM_DIAGRAM):   P_genrejazz = 0.71899224806201;
21769     +        P_genreclassical  =     0.23062015503875;
MPRINT(EM_DIAGRAM):   Q_genreclassical = 0.23062015503875;
21770     +        P_genrerock  =      0.0329457364341;
MPRINT(EM_DIAGRAM):   Q_genrerock = 0.0329457364341;
21771     +        P_genrepop  =     0.00581395348837;
MPRINT(EM_DIAGRAM):   Q_genrepop = 0.00581395348837;
21772     +        P_genremetal  =     0.01162790697674;
MPRINT(EM_DIAGRAM):   Q_genremetal = 0.01162790697674;
21773     +        P_genrejazz  =     0.71899224806201;
MPRINT(EM_DIAGRAM):   Q_genrejazz = 0.71899224806201;
21774     +        Q_genreclassical  =     0.23062015503875;
MPRINT(EM_DIAGRAM):   I_genre = 'JAZZ' ;
21775     +        Q_genrerock  =      0.0329457364341;
MPRINT(EM_DIAGRAM):   U_genre = 'jazz' ;
21776     +        Q_genrepop  =     0.00581395348837;
MPRINT(EM_DIAGRAM):   END;
21777     +        Q_genremetal  =     0.01162790697674;
MPRINT(EM_DIAGRAM):   END;
21778     +        Q_genrejazz  =     0.71899224806201;
MPRINT(EM_DIAGRAM):   END;
21779     +        I_genre  = 'JAZZ' ;
MPRINT(EM_DIAGRAM):   END;
21780     +        U_genre  = 'jazz' ;
21781     +        END;
MPRINT(EM_DIAGRAM):   ELSE DO;
21782     +      END;
21783     +    END;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(danceability ) AND 0.546611 <= danceability THEN DO;
21784     +  END;
21785     +ELSE DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(instrumentalness ) AND 0.874341 <= instrumentalness THEN DO;
MPRINT(EM_DIAGRAM):   _NODE_ = 11;
21786     +  IF  NOT MISSING(danceability ) AND
MPRINT(EM_DIAGRAM):   _LEAF_ = 11;
21787     +                0.546611 <= danceability  THEN DO;
MPRINT(EM_DIAGRAM):   P_genreclassical = 0.6;
21788     +    IF  NOT MISSING(instrumentalness ) AND
MPRINT(EM_DIAGRAM):   P_genrerock = 0;
21789     +                  0.874341 <= instrumentalness  THEN DO;
MPRINT(EM_DIAGRAM):   P_genrepop = 0;
21790     +      _NODE_  =                   11;
MPRINT(EM_DIAGRAM):   P_genremetal = 0;
21791     +      _LEAF_  =                   11;
MPRINT(EM_DIAGRAM):   P_genrejazz = 0.4;
21792     +      P_genreclassical  =                  0.6;
MPRINT(EM_DIAGRAM):   Q_genreclassical = 0.6;
21793     +      P_genrerock  =                    0;
MPRINT(EM_DIAGRAM):   Q_genrerock = 0;
21794     +      P_genrepop  =                    0;
MPRINT(EM_DIAGRAM):   Q_genrepop = 0;
21795     +      P_genremetal  =                    0;
MPRINT(EM_DIAGRAM):   Q_genremetal = 0;
21796     +      P_genrejazz  =                  0.4;
MPRINT(EM_DIAGRAM):   Q_genrejazz = 0.4;
21797     +      Q_genreclassical  =                  0.6;
MPRINT(EM_DIAGRAM):   I_genre = 'CLASSICAL' ;
21798     +      Q_genrerock  =                    0;
MPRINT(EM_DIAGRAM):   U_genre = 'classical' ;
21799     +      Q_genrepop  =                    0;
MPRINT(EM_DIAGRAM):   END;
21800     +      Q_genremetal  =                    0;
21801     +      Q_genrejazz  =                  0.4;
MPRINT(EM_DIAGRAM):   ELSE DO;
21802     +      I_genre  = 'CLASSICAL' ;
21803     +      U_genre  = 'classical' ;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(acousticness ) AND acousticness < 0.0008825 THEN DO;
21804     +      END;
MPRINT(EM_DIAGRAM):   _NODE_ = 18;
21805     +    ELSE DO;
MPRINT(EM_DIAGRAM):   _LEAF_ = 7;
MPRINT(EM_DIAGRAM):   P_genreclassical = 0;
21806     +      IF  NOT MISSING(acousticness ) AND
MPRINT(EM_DIAGRAM):   P_genrerock = 0.125;
21807     +        acousticness  <            0.0008825 THEN DO;
MPRINT(EM_DIAGRAM):   P_genrepop = 0.275;
21808     +        _NODE_  =                   18;
MPRINT(EM_DIAGRAM):   P_genremetal = 0.6;
21809     +        _LEAF_  =                    7;
MPRINT(EM_DIAGRAM):   P_genrejazz = 0;
21810     +        P_genreclassical  =                    0;
MPRINT(EM_DIAGRAM):   Q_genreclassical = 0;
21811     +        P_genrerock  =                0.125;
MPRINT(EM_DIAGRAM):   Q_genrerock = 0.125;
21812     +        P_genrepop  =                0.275;
MPRINT(EM_DIAGRAM):   Q_genrepop = 0.275;
21813     +        P_genremetal  =                  0.6;
MPRINT(EM_DIAGRAM):   Q_genremetal = 0.6;
21814     +        P_genrejazz  =                    0;
MPRINT(EM_DIAGRAM):   Q_genrejazz = 0;
21815     +        Q_genreclassical  =                    0;
MPRINT(EM_DIAGRAM):   I_genre = 'METAL' ;
21816     +        Q_genrerock  =                0.125;
MPRINT(EM_DIAGRAM):   U_genre = 'metal' ;
21817     +        Q_genrepop  =                0.275;
MPRINT(EM_DIAGRAM):   END;
21818     +        Q_genremetal  =                  0.6;
21819     +        Q_genrejazz  =                    0;
MPRINT(EM_DIAGRAM):   ELSE DO;
21820     +        I_genre  = 'METAL' ;
21821     +        U_genre  = 'metal' ;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(loudness ) AND loudness < -8.4785 THEN DO;
21822     +        END;
21823     +      ELSE DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(energy ) AND energy < 0.3868935 THEN DO;
MPRINT(EM_DIAGRAM):   _NODE_ = 40;
21824     +        IF  NOT MISSING(loudness ) AND
MPRINT(EM_DIAGRAM):   _LEAF_ = 8;
21825     +          loudness  <              -8.4785 THEN DO;
MPRINT(EM_DIAGRAM):   P_genreclassical = 0;
21826     +          IF  NOT MISSING(energy ) AND
MPRINT(EM_DIAGRAM):   P_genrerock = 0;
21827     +            energy  <            0.3868935 THEN DO;
MPRINT(EM_DIAGRAM):   P_genrepop = 0.33333333333333;
21828     +            _NODE_  =                   40;
MPRINT(EM_DIAGRAM):   P_genremetal = 0;
21829     +            _LEAF_  =                    8;
MPRINT(EM_DIAGRAM):   P_genrejazz = 0.66666666666666;
21830     +            P_genreclassical  =                    0;
MPRINT(EM_DIAGRAM):   Q_genreclassical = 0;
21831     +            P_genrerock  =                    0;
MPRINT(EM_DIAGRAM):   Q_genrerock = 0;
21832     +            P_genrepop  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   Q_genrepop = 0.33333333333333;
21833     +            P_genremetal  =                    0;
MPRINT(EM_DIAGRAM):   Q_genremetal = 0;
21834     +            P_genrejazz  =     0.66666666666666;
MPRINT(EM_DIAGRAM):   Q_genrejazz = 0.66666666666666;
21835     +            Q_genreclassical  =                    0;
MPRINT(EM_DIAGRAM):   I_genre = 'JAZZ' ;
21836     +            Q_genrerock  =                    0;
MPRINT(EM_DIAGRAM):   U_genre = 'jazz' ;
21837     +            Q_genrepop  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   END;
21838     +            Q_genremetal  =                    0;
21839     +            Q_genrejazz  =     0.66666666666666;
MPRINT(EM_DIAGRAM):   ELSE DO;
21840     +            I_genre  = 'JAZZ' ;
MPRINT(EM_DIAGRAM):   _NODE_ = 41;
21841     +            U_genre  = 'jazz' ;
MPRINT(EM_DIAGRAM):   _LEAF_ = 9;
21842     +            END;
MPRINT(EM_DIAGRAM):   P_genreclassical = 0.02325581395348;
21843     +          ELSE DO;
MPRINT(EM_DIAGRAM):   P_genrerock = 0.62790697674418;
MPRINT(EM_DIAGRAM):   P_genrepop = 0.19767441860465;
21844     +            _NODE_  =                   41;
MPRINT(EM_DIAGRAM):   P_genremetal = 0.04651162790697;
21845     +            _LEAF_  =                    9;
MPRINT(EM_DIAGRAM):   P_genrejazz = 0.10465116279069;
21846     +            P_genreclassical  =     0.02325581395348;
MPRINT(EM_DIAGRAM):   Q_genreclassical = 0.02325581395348;
21847     +            P_genrerock  =     0.62790697674418;
MPRINT(EM_DIAGRAM):   Q_genrerock = 0.62790697674418;
21848     +            P_genrepop  =     0.19767441860465;
MPRINT(EM_DIAGRAM):   Q_genrepop = 0.19767441860465;
21849     +            P_genremetal  =     0.04651162790697;
MPRINT(EM_DIAGRAM):   Q_genremetal = 0.04651162790697;
21850     +            P_genrejazz  =     0.10465116279069;
MPRINT(EM_DIAGRAM):   Q_genrejazz = 0.10465116279069;
21851     +            Q_genreclassical  =     0.02325581395348;
MPRINT(EM_DIAGRAM):   I_genre = 'ROCK' ;
21852     +            Q_genrerock  =     0.62790697674418;
MPRINT(EM_DIAGRAM):   U_genre = 'rock' ;
21853     +            Q_genrepop  =     0.19767441860465;
MPRINT(EM_DIAGRAM):   END;
21854     +            Q_genremetal  =     0.04651162790697;
MPRINT(EM_DIAGRAM):   END;
21855     +            Q_genrejazz  =     0.10465116279069;
21856     +            I_genre  = 'ROCK' ;
MPRINT(EM_DIAGRAM):   ELSE DO;
21857     +            U_genre  = 'rock' ;
MPRINT(EM_DIAGRAM):   _NODE_ = 31;
21858     +            END;
MPRINT(EM_DIAGRAM):   _LEAF_ = 10;
21859     +          END;
MPRINT(EM_DIAGRAM):   P_genreclassical = 0.002457002457;
21860     +        ELSE DO;
MPRINT(EM_DIAGRAM):   P_genrerock = 0.14987714987714;
MPRINT(EM_DIAGRAM):   P_genrepop = 0.8034398034398;
21861     +          _NODE_  =                   31;
MPRINT(EM_DIAGRAM):   P_genremetal = 0.03685503685503;
21862     +          _LEAF_  =                   10;
MPRINT(EM_DIAGRAM):   P_genrejazz = 0.007371007371;
21863     +          P_genreclassical  =       0.002457002457;
MPRINT(EM_DIAGRAM):   Q_genreclassical = 0.002457002457;
21864     +          P_genrerock  =     0.14987714987714;
MPRINT(EM_DIAGRAM):   Q_genrerock = 0.14987714987714;
21865     +          P_genrepop  =      0.8034398034398;
MPRINT(EM_DIAGRAM):   Q_genrepop = 0.8034398034398;
21866     +          P_genremetal  =     0.03685503685503;
MPRINT(EM_DIAGRAM):   Q_genremetal = 0.03685503685503;
21867     +          P_genrejazz  =       0.007371007371;
MPRINT(EM_DIAGRAM):   Q_genrejazz = 0.007371007371;
21868     +          Q_genreclassical  =       0.002457002457;
MPRINT(EM_DIAGRAM):   I_genre = 'POP' ;
21869     +          Q_genrerock  =     0.14987714987714;
MPRINT(EM_DIAGRAM):   U_genre = 'pop' ;
21870     +          Q_genrepop  =      0.8034398034398;
MPRINT(EM_DIAGRAM):   END;
21871     +          Q_genremetal  =     0.03685503685503;
MPRINT(EM_DIAGRAM):   END;
21872     +          Q_genrejazz  =       0.007371007371;
MPRINT(EM_DIAGRAM):   END;
21873     +          I_genre  = 'POP' ;
MPRINT(EM_DIAGRAM):   END;
21874     +          U_genre  = 'pop' ;
21875     +          END;
MPRINT(EM_DIAGRAM):   ELSE DO;
21876     +        END;
21877     +      END;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(energy ) AND energy < 0.253875 THEN DO;
21878     +    END;
MPRINT(EM_DIAGRAM):   _NODE_ = 8;
21879     +  ELSE DO;
MPRINT(EM_DIAGRAM):   _LEAF_ = 1;
MPRINT(EM_DIAGRAM):   P_genreclassical = 0.6;
21880     +    IF  NOT MISSING(energy ) AND
MPRINT(EM_DIAGRAM):   P_genrerock = 0;
21881     +      energy  <             0.253875 THEN DO;
MPRINT(EM_DIAGRAM):   P_genrepop = 0.1;
21882     +      _NODE_  =                    8;
MPRINT(EM_DIAGRAM):   P_genremetal = 0;
21883     +      _LEAF_  =                    1;
MPRINT(EM_DIAGRAM):   P_genrejazz = 0.3;
21884     +      P_genreclassical  =                  0.6;
MPRINT(EM_DIAGRAM):   Q_genreclassical = 0.6;
21885     +      P_genrerock  =                    0;
MPRINT(EM_DIAGRAM):   Q_genrerock = 0;
21886     +      P_genrepop  =                  0.1;
MPRINT(EM_DIAGRAM):   Q_genrepop = 0.1;
21887     +      P_genremetal  =                    0;
MPRINT(EM_DIAGRAM):   Q_genremetal = 0;
21888     +      P_genrejazz  =                  0.3;
MPRINT(EM_DIAGRAM):   Q_genrejazz = 0.3;
21889     +      Q_genreclassical  =                  0.6;
MPRINT(EM_DIAGRAM):   I_genre = 'CLASSICAL' ;
21890     +      Q_genrerock  =                    0;
MPRINT(EM_DIAGRAM):   U_genre = 'classical' ;
21891     +      Q_genrepop  =                  0.1;
MPRINT(EM_DIAGRAM):   END;
21892     +      Q_genremetal  =                    0;
21893     +      Q_genrejazz  =                  0.3;
MPRINT(EM_DIAGRAM):   ELSE DO;
21894     +      I_genre  = 'CLASSICAL' ;
21895     +      U_genre  = 'classical' ;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(acousticness ) AND 0.046963 <= acousticness THEN DO;
21896     +      END;
21897     +    ELSE DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(instrumentalness ) AND 0.756626 <= instrumentalness THEN DO;
MPRINT(EM_DIAGRAM):   _NODE_ = 29;
21898     +      IF  NOT MISSING(acousticness ) AND
MPRINT(EM_DIAGRAM):   _LEAF_ = 6;
21899     +                    0.046963 <= acousticness  THEN DO;
MPRINT(EM_DIAGRAM):   P_genreclassical = 0.27272727272727;
21900     +        IF  NOT MISSING(instrumentalness ) AND
MPRINT(EM_DIAGRAM):   P_genrerock = 0.18181818181818;
21901     +                      0.756626 <= instrumentalness  THEN DO;
MPRINT(EM_DIAGRAM):   P_genrepop = 0;
21902     +          _NODE_  =                   29;
MPRINT(EM_DIAGRAM):   P_genremetal = 0.18181818181818;
21903     +          _LEAF_  =                    6;
MPRINT(EM_DIAGRAM):   P_genrejazz = 0.36363636363636;
21904     +          P_genreclassical  =     0.27272727272727;
MPRINT(EM_DIAGRAM):   Q_genreclassical = 0.27272727272727;
21905     +          P_genrerock  =     0.18181818181818;
MPRINT(EM_DIAGRAM):   Q_genrerock = 0.18181818181818;
21906     +          P_genrepop  =                    0;
MPRINT(EM_DIAGRAM):   Q_genrepop = 0;
21907     +          P_genremetal  =     0.18181818181818;
MPRINT(EM_DIAGRAM):   Q_genremetal = 0.18181818181818;
21908     +          P_genrejazz  =     0.36363636363636;
MPRINT(EM_DIAGRAM):   Q_genrejazz = 0.36363636363636;
21909     +          Q_genreclassical  =     0.27272727272727;
MPRINT(EM_DIAGRAM):   I_genre = 'JAZZ' ;
21910     +          Q_genrerock  =     0.18181818181818;
MPRINT(EM_DIAGRAM):   U_genre = 'jazz' ;
21911     +          Q_genrepop  =                    0;
MPRINT(EM_DIAGRAM):   END;
21912     +          Q_genremetal  =     0.18181818181818;
21913     +          Q_genrejazz  =     0.36363636363636;
MPRINT(EM_DIAGRAM):   ELSE DO;
21914     +          I_genre  = 'JAZZ' ;
MPRINT(EM_DIAGRAM):   _NODE_ = 28;
21915     +          U_genre  = 'jazz' ;
MPRINT(EM_DIAGRAM):   _LEAF_ = 5;
21916     +          END;
MPRINT(EM_DIAGRAM):   P_genreclassical = 0;
21917     +        ELSE DO;
MPRINT(EM_DIAGRAM):   P_genrerock = 0.52;
MPRINT(EM_DIAGRAM):   P_genrepop = 0.22;
21918     +          _NODE_  =                   28;
MPRINT(EM_DIAGRAM):   P_genremetal = 0.095;
21919     +          _LEAF_  =                    5;
MPRINT(EM_DIAGRAM):   P_genrejazz = 0.165;
21920     +          P_genreclassical  =                    0;
MPRINT(EM_DIAGRAM):   Q_genreclassical = 0;
21921     +          P_genrerock  =                 0.52;
MPRINT(EM_DIAGRAM):   Q_genrerock = 0.52;
21922     +          P_genrepop  =                 0.22;
MPRINT(EM_DIAGRAM):   Q_genrepop = 0.22;
21923     +          P_genremetal  =                0.095;
MPRINT(EM_DIAGRAM):   Q_genremetal = 0.095;
21924     +          P_genrejazz  =                0.165;
MPRINT(EM_DIAGRAM):   Q_genrejazz = 0.165;
21925     +          Q_genreclassical  =                    0;
MPRINT(EM_DIAGRAM):   I_genre = 'ROCK' ;
21926     +          Q_genrerock  =                 0.52;
MPRINT(EM_DIAGRAM):   U_genre = 'rock' ;
21927     +          Q_genrepop  =                 0.22;
MPRINT(EM_DIAGRAM):   END;
21928     +          Q_genremetal  =                0.095;
MPRINT(EM_DIAGRAM):   END;
21929     +          Q_genrejazz  =                0.165;
21930     +          I_genre  = 'ROCK' ;
MPRINT(EM_DIAGRAM):   ELSE DO;
21931     +          U_genre  = 'rock' ;
21932     +          END;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(energy ) AND energy < 0.4821155 THEN DO;
21933     +        END;
MPRINT(EM_DIAGRAM):   _NODE_ = 26;
21934     +      ELSE DO;
MPRINT(EM_DIAGRAM):   _LEAF_ = 2;
MPRINT(EM_DIAGRAM):   P_genreclassical = 0.2;
21935     +        IF  NOT MISSING(energy ) AND
MPRINT(EM_DIAGRAM):   P_genrerock = 0.2;
21936     +          energy  <            0.4821155 THEN DO;
MPRINT(EM_DIAGRAM):   P_genrepop = 0;
21937     +          _NODE_  =                   26;
MPRINT(EM_DIAGRAM):   P_genremetal = 0.2;
21938     +          _LEAF_  =                    2;
MPRINT(EM_DIAGRAM):   P_genrejazz = 0.4;
21939     +          P_genreclassical  =                  0.2;
MPRINT(EM_DIAGRAM):   Q_genreclassical = 0.2;
21940     +          P_genrerock  =                  0.2;
MPRINT(EM_DIAGRAM):   Q_genrerock = 0.2;
21941     +          P_genrepop  =                    0;
MPRINT(EM_DIAGRAM):   Q_genrepop = 0;
21942     +          P_genremetal  =                  0.2;
MPRINT(EM_DIAGRAM):   Q_genremetal = 0.2;
21943     +          P_genrejazz  =                  0.4;
MPRINT(EM_DIAGRAM):   Q_genrejazz = 0.4;
21944     +          Q_genreclassical  =                  0.2;
MPRINT(EM_DIAGRAM):   I_genre = 'JAZZ' ;
21945     +          Q_genrerock  =                  0.2;
MPRINT(EM_DIAGRAM):   U_genre = 'jazz' ;
21946     +          Q_genrepop  =                    0;
MPRINT(EM_DIAGRAM):   END;
21947     +          Q_genremetal  =                  0.2;
21948     +          Q_genrejazz  =                  0.4;
MPRINT(EM_DIAGRAM):   ELSE DO;
21949     +          I_genre  = 'JAZZ' ;
21950     +          U_genre  = 'jazz' ;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(instrumentalness ) AND instrumentalness < 5E-7 THEN DO;
21951     +          END;
MPRINT(EM_DIAGRAM):   _NODE_ = 36;
21952     +        ELSE DO;
MPRINT(EM_DIAGRAM):   _LEAF_ = 3;
MPRINT(EM_DIAGRAM):   P_genreclassical = 0;
21953     +          IF  NOT MISSING(instrumentalness ) AND
MPRINT(EM_DIAGRAM):   P_genrerock = 0.36585365853658;
21954     +            instrumentalness  <                 5E-7 THEN DO;
MPRINT(EM_DIAGRAM):   P_genrepop = 0.4390243902439;
21955     +            _NODE_  =                   36;
MPRINT(EM_DIAGRAM):   P_genremetal = 0.19512195121951;
21956     +            _LEAF_  =                    3;
MPRINT(EM_DIAGRAM):   P_genrejazz = 0;
21957     +            P_genreclassical  =                    0;
MPRINT(EM_DIAGRAM):   Q_genreclassical = 0;
21958     +            P_genrerock  =     0.36585365853658;
MPRINT(EM_DIAGRAM):   Q_genrerock = 0.36585365853658;
21959     +            P_genrepop  =      0.4390243902439;
MPRINT(EM_DIAGRAM):   Q_genrepop = 0.4390243902439;
21960     +            P_genremetal  =     0.19512195121951;
MPRINT(EM_DIAGRAM):   Q_genremetal = 0.19512195121951;
21961     +            P_genrejazz  =                    0;
MPRINT(EM_DIAGRAM):   Q_genrejazz = 0;
21962     +            Q_genreclassical  =                    0;
MPRINT(EM_DIAGRAM):   I_genre = 'POP' ;
21963     +            Q_genrerock  =     0.36585365853658;
MPRINT(EM_DIAGRAM):   U_genre = 'pop' ;
21964     +            Q_genrepop  =      0.4390243902439;
MPRINT(EM_DIAGRAM):   END;
21965     +            Q_genremetal  =     0.19512195121951;
21966     +            Q_genrejazz  =                    0;
MPRINT(EM_DIAGRAM):   ELSE DO;
21967     +            I_genre  = 'POP' ;
MPRINT(EM_DIAGRAM):   _NODE_ = 37;
21968     +            U_genre  = 'pop' ;
MPRINT(EM_DIAGRAM):   _LEAF_ = 4;
21969     +            END;
MPRINT(EM_DIAGRAM):   P_genreclassical = 0;
21970     +          ELSE DO;
MPRINT(EM_DIAGRAM):   P_genrerock = 0.29821428571428;
MPRINT(EM_DIAGRAM):   P_genrepop = 0.01428571428571;
21971     +            _NODE_  =                   37;
MPRINT(EM_DIAGRAM):   P_genremetal = 0.68571428571428;
21972     +            _LEAF_  =                    4;
MPRINT(EM_DIAGRAM):   P_genrejazz = 0.00178571428571;
21973     +            P_genreclassical  =                    0;
MPRINT(EM_DIAGRAM):   Q_genreclassical = 0;
21974     +            P_genrerock  =     0.29821428571428;
MPRINT(EM_DIAGRAM):   Q_genrerock = 0.29821428571428;
21975     +            P_genrepop  =     0.01428571428571;
MPRINT(EM_DIAGRAM):   Q_genrepop = 0.01428571428571;
21976     +            P_genremetal  =     0.68571428571428;
MPRINT(EM_DIAGRAM):   Q_genremetal = 0.68571428571428;
21977     +            P_genrejazz  =     0.00178571428571;
MPRINT(EM_DIAGRAM):   Q_genrejazz = 0.00178571428571;
21978     +            Q_genreclassical  =                    0;
MPRINT(EM_DIAGRAM):   I_genre = 'METAL' ;
21979     +            Q_genrerock  =     0.29821428571428;
MPRINT(EM_DIAGRAM):   U_genre = 'metal' ;
21980     +            Q_genrepop  =     0.01428571428571;
MPRINT(EM_DIAGRAM):   END;
21981     +            Q_genremetal  =     0.68571428571428;
MPRINT(EM_DIAGRAM):   END;
21982     +            Q_genrejazz  =     0.00178571428571;
MPRINT(EM_DIAGRAM):   END;
21983     +            I_genre  = 'METAL' ;
MPRINT(EM_DIAGRAM):   END;
21984     +            U_genre  = 'metal' ;
MPRINT(EM_DIAGRAM):   END;
21985     +            END;
MPRINT(EM_DIAGRAM):   END;
21986     +          END;
21987     +        END;
MPRINT(EM_DIAGRAM):   ***** RESIDUALS R_ *************;
21988     +      END;
21989     +    END;
21990     +  END;
21991     +
21992     +*****  RESIDUALS R_ *************;
MPRINT(EM_DIAGRAM):   IF F_genre NE 'CLASSICAL' AND F_genre NE 'ROCK' AND F_genre NE 'POP' AND F_genre NE 'METAL' AND F_genre NE 'JAZZ' THEN DO;
21993     +IF  F_genre  NE 'CLASSICAL'
MPRINT(EM_DIAGRAM):   R_genreclassical = .;
21994     +AND F_genre  NE 'ROCK'
MPRINT(EM_DIAGRAM):   R_genrerock = .;
21995     +AND F_genre  NE 'POP'
MPRINT(EM_DIAGRAM):   R_genrepop = .;
21996     +AND F_genre  NE 'METAL'
MPRINT(EM_DIAGRAM):   R_genremetal = .;
21997     +AND F_genre  NE 'JAZZ'  THEN DO;
MPRINT(EM_DIAGRAM):   R_genrejazz = .;
21998     +        R_genreclassical  = .;
MPRINT(EM_DIAGRAM):   END;
21999     +        R_genrerock  = .;
22000     +        R_genrepop  = .;
MPRINT(EM_DIAGRAM):   ELSE DO;
22001     +        R_genremetal  = .;
MPRINT(EM_DIAGRAM):   R_genreclassical = -P_genreclassical ;
22002     +        R_genrejazz  = .;
MPRINT(EM_DIAGRAM):   R_genrerock = -P_genrerock ;
22003     + END;
MPRINT(EM_DIAGRAM):   R_genrepop = -P_genrepop ;
22004     + ELSE DO;
MPRINT(EM_DIAGRAM):   R_genremetal = -P_genremetal ;
MPRINT(EM_DIAGRAM):   R_genrejazz = -P_genrejazz ;
22005     +       R_genreclassical  =  -P_genreclassical ;
MPRINT(EM_DIAGRAM):   SELECT( F_genre );
22006     +       R_genrerock  =  -P_genrerock ;
MPRINT(EM_DIAGRAM):   WHEN( 'CLASSICAL' ) R_genreclassical = R_genreclassical +1;
22007     +       R_genrepop  =  -P_genrepop ;
MPRINT(EM_DIAGRAM):   WHEN( 'ROCK' ) R_genrerock = R_genrerock +1;
22008     +       R_genremetal  =  -P_genremetal ;
MPRINT(EM_DIAGRAM):   WHEN( 'POP' ) R_genrepop = R_genrepop +1;
22009     +       R_genrejazz  =  -P_genrejazz ;
MPRINT(EM_DIAGRAM):   WHEN( 'METAL' ) R_genremetal = R_genremetal +1;
22010     +       SELECT( F_genre  );
MPRINT(EM_DIAGRAM):   WHEN( 'JAZZ' ) R_genrejazz = R_genrejazz +1;
22011     +          WHEN( 'CLASSICAL'  ) R_genreclassical  = R_genreclassical  +1;
MPRINT(EM_DIAGRAM):   END;
22012     +          WHEN( 'ROCK'  ) R_genrerock  = R_genrerock  +1;
MPRINT(EM_DIAGRAM):   END;
22013     +          WHEN( 'POP'  ) R_genrepop  = R_genrepop  +1;
22014     +          WHEN( 'METAL'  ) R_genremetal  = R_genremetal  +1;
MPRINT(EM_DIAGRAM):   ****************************************************************;
22015     +          WHEN( 'JAZZ'  ) R_genrejazz  = R_genrejazz  +1;
MPRINT(EM_DIAGRAM):   ****** END OF DECISION TREE SCORING CODE ******;
22016     +       END;
MPRINT(EM_DIAGRAM):   ****************************************************************;
22017     + END;
MPRINT(EM_DIAGRAM):   drop _LEAF_;
22018     +
22019     +****************************************************************;
22020     +******          END OF DECISION TREE SCORING CODE         ******;
22021     +****************************************************************;
22022     +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
22023      run;
 
NOTE: DATA STEP view saved on file EMWS1.TREE_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.GRFEXPL_TRAIN.VIEW used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.10 seconds
      cpu time            0.10 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
22024      quit;
22025      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
22026      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
22027      * Tree: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Tree: Computing metadata for TRAIN data;
22028      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
NOTE: View EMWS1.TREE_TRAIN.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "F:\Dropbox\NOVA\1st\DataMining\Project\DataMining\Songs\SAS_Miner\Songs\Workspaces\EMWS1\Tree\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.Tree_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.Tree_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.Tree_TRAIN out=WORK.M2C6TTIV noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2C6TTIV;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M2C6TTIV(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2C6TTIV;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M2C6TTIV;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M3VKVKS0 NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3VKVKS0;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M3VKVKS0;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0NDYFO8(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M3VKVKS0;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3VKVKS0;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M3VKVKS0;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX"
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3VKVKS0;
MPRINT(EMADVISECOLUMNS):   set WORK.M3VKVKS0;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.GrfExpl_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.GrfExpl_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Tree_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Tree";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_GENREROCK") creator = "Tree";
MPRINT(EM_DIAGRAM):   when("R_GENREROCK") creator = "Tree";
MPRINT(EM_DIAGRAM):   when("P_GENREPOP") creator = "Tree";
MPRINT(EM_DIAGRAM):   when("R_GENREPOP") creator = "Tree";
MPRINT(EM_DIAGRAM):   when("P_GENREMETAL") creator = "Tree";
MPRINT(EM_DIAGRAM):   when("R_GENREMETAL") creator = "Tree";
MPRINT(EM_DIAGRAM):   when("P_GENREJAZZ") creator = "Tree";
MPRINT(EM_DIAGRAM):   when("R_GENREJAZZ") creator = "Tree";
MPRINT(EM_DIAGRAM):   when("P_GENRECLASSICAL") creator = "Tree";
MPRINT(EM_DIAGRAM):   when("R_GENRECLASSICAL") creator = "Tree";
MPRINT(EM_DIAGRAM):   when("F_GENRE") creator = "Tree";
MPRINT(EM_DIAGRAM):   when("I_GENRE") creator = "Tree";
MPRINT(EM_DIAGRAM):   when("U_GENRE") creator = "Tree";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Tree";
MPRINT(EM_DIAGRAM):   when("GENRE") model = "Tree";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if name = '_NODE_' then do;
MPRINT(EM_DIAGRAM):   role = 'SEGMENT';
MPRINT(EM_DIAGRAM):   level = 'NOMINAL';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if upcase(name) = 'ACOUSTICNESS' then role = 'INPUT';
MPRINT(EM_DIAGRAM):   else if upcase(name) = 'DANCEABILITY' then role = 'INPUT';
MPRINT(EM_DIAGRAM):   else if upcase(name) = 'LOUDNESS' then role = 'INPUT';
MPRINT(EM_DIAGRAM):   else if upcase(name) = 'INSTRUMENTALNESS' then role = 'INPUT';
MPRINT(EM_DIAGRAM):   else if upcase(name) = 'ENERGY' then role = 'INPUT';
MPRINT(EM_DIAGRAM):   if upcase(name) = 'Q_genrerock' then role = "ASSESS";
MPRINT(EM_DIAGRAM):   if upcase(name) = 'Q_genrepop' then role = "ASSESS";
MPRINT(EM_DIAGRAM):   if upcase(name) = 'Q_genremetal' then role = "ASSESS";
MPRINT(EM_DIAGRAM):   if upcase(name) = 'Q_genrejazz' then role = "ASSESS";
MPRINT(EM_DIAGRAM):   if upcase(name) = 'Q_genreclassical' then role = "ASSESS";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
22364      data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
22365      set EMWS1.Tree_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree_EMINFO;
22366      where DATA='Tree' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Tree' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
22367      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.TREE_EMINFO.
      WHERE (DATA='Tree') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
22368      data EMWS1.Tree_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS1.Tree_EMINFO;
22369      length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
22370      input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
22371      cards;
MPRINT(EM_DIAGRAM):   cards;
 
NOTE: The data set EMWS1.TREE_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   run;
22375      run;
22376      data EMWS1.Tree_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.Tree_EMINFO;
22377      set EMWS1.Tree_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree_EMINFO WORK.MODELTEMP_INFO;
22378      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS1.TREE_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS1.TREE_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
22379      proc sort data = EMWS1.Tree_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.Tree_EMINFO NOTHREADS;
22380      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
22381      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS1.TREE_EMINFO.
NOTE: The data set EMWS1.TREE_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
22382      proc sort data = EMWS1.Ids_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.Ids_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
22383      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
22384      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS1.IDS_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
22385      proc sort data = EMWS1.Tree_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS1.Tree_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
22386      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
22387      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS1.TREE_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
22388      data EMWS1.Tree_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.Tree_EMINFO;
22389      merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
22390      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
22391      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS1.TREE_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
22392      proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
22393      delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
22394      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
22395      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: View EMWS1.TREE_TRAIN.VIEW used (Total process time):
      real time           0.08 seconds
      cpu time            0.09 seconds
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "15 December 2015" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16:52:49 o'clock" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Report Log
Date:                15 December 2015
Time:                16:52:49 o'clock
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O33ZHWBG "F:\Dropbox\NOVA\1st\DataMining\Project\DataMining\Songs\SAS_Miner\Songs\Workspaces\EMWS1\Tree\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O33ZHWBG new;
MPRINT(EM_DIAGRAM):   run;
22419      data work.Tree_tarmetads;
MPRINT(EM_DIAGRAM):    data work.Tree_tarmetads;
22420      set EMWS1.GrfExpl_CMeta_TRAIN(where=(ROLE='TARGET'));
MPRINT(EM_DIAGRAM):   set EMWS1.GrfExpl_CMeta_TRAIN(where=(ROLE='TARGET'));
22421      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.GRFEXPL_CMETA_TRAIN.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TREE_TARMETADS has 1 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
22422      data EMWS1.Tree_EMOUTFIT;
MPRINT(EM_DIAGRAM):    data EMWS1.Tree_EMOUTFIT;
22423      length target $32;
MPRINT(EM_DIAGRAM):   length target $32;
22424      set EMWS1.Tree_OUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree_OUTFIT;
22425      drop _NW_ _SUMW_
22426      ;
MPRINT(EM_DIAGRAM):   drop _NW_ _SUMW_ ;
22427      target = "genre";
MPRINT(EM_DIAGRAM):   target = "genre";
22428      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_OUTFIT.
NOTE: The data set EMWS1.TREE_EMOUTFIT has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
22429      data EMWS1.Tree_EMOUTFIT;
MPRINT(EM_DIAGRAM):    data EMWS1.Tree_EMOUTFIT;
22430      set EMWS1.Tree_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree_EMOUTFIT;
22431      length TargetLabel $200;
MPRINT(EM_DIAGRAM):   length TargetLabel $200;
22432      label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label targetLabel = "Target Label";
22433      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable TargetLabel is uninitialized.
NOTE: There were 1 observations read from the data set EMWS1.TREE_EMOUTFIT.
NOTE: The data set EMWS1.TREE_EMOUTFIT has 1 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
22434      proc sort data=EMWS1.Tree_EMREPORTFIT nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Tree_EMREPORTFIT nothreads;
22435      by TARGET;
MPRINT(EM_DIAGRAM):   by TARGET;
22436      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set EMWS1.TREE_EMREPORTFIT.
NOTE: The data set EMWS1.TREE_EMREPORTFIT has 8 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
22437      %let _EMwarndup = 0;
22438      %let _EMtargetdup =;
22439      %let _EMASEtargetdup =;
22440      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
22441      set EMWS1.Tree_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree_EMOUTFIT;
22442      if .<_ASE_<0.000001 then do;
MPRINT(EM_DIAGRAM):   if .<_ASE_<0.000001 then do;
22443      call symput('_EMwarndup', '1');
MPRINT(EM_DIAGRAM):   call symput('_EMwarndup', '1');
22444      call symput('_EMtargetdup', target);
MPRINT(EM_DIAGRAM):   call symput('_EMtargetdup', target);
22445      call symput('_EMASEtargetdup', put(_ASE_, best.));
MPRINT(EM_DIAGRAM):   call symput('_EMASEtargetdup', put(_ASE_, best.));
22446      end;
MPRINT(EM_DIAGRAM):   end;
22447      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
22448      proc sort data=EMWS1.GrfExpl_CMeta_TRAIN out=WORK.SUBSETINMETA;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.GrfExpl_CMeta_TRAIN out=WORK.SUBSETINMETA;
22449      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
22450      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 17 observations read from the data set EMWS1.GRFEXPL_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 17 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
22451      proc sort data=EMWS1.Tree_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Tree_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
22452      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
22453      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 15 observations read from the data set EMWS1.TREE_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 15 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
22454      data WORK.ASSESS_META;
MPRINT(EM_DIAGRAM):   data WORK.ASSESS_META;
22455      merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
MPRINT(EM_DIAGRAM):   merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
22456      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
22457      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 17 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 15 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 17 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
22458      data EM_temp_assessMeta;
MPRINT(EM_DIAGRAM):    data EM_temp_assessMeta;
22459      set EMWS1.Tree_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree_CMeta_TRAIN;
22460      where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
MPRINT(EM_DIAGRAM):   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
22461      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 14 observations read from the data set EMWS1.TREE_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 14 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
22462      data EM_temp_assessdata;
MPRINT(EM_DIAGRAM):    data EM_temp_assessdata;
22463      set EMWS1.Tree_TRAIN(keep=
22464      F_genre
22465      I_genre
22466      P_genreclassical
22467      P_genrejazz
22468      P_genremetal
22469      P_genrepop
22470      P_genrerock
22471      R_genreclassical
22472      R_genrejazz
22473      R_genremetal
22474      R_genrepop
22475      R_genrerock
22476      U_genre
22477      _WARN_
22478      genre
22479      );
MPRINT(EM_DIAGRAM):   set EMWS1.Tree_TRAIN(keep= F_genre I_genre P_genreclassical P_genrejazz P_genremetal P_genrepop P_genrerock R_genreclassical R_genrejazz R_genremetal R_genrepop R_genrerock U_genre _WARN_ genre );
22480      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: There were 2276 observations read from the data set DM.SONGS_WITHID.
NOTE: There were 2276 observations read from the data set EMWS1.IDS_DATA.
NOTE: View EMWS1.TREE_TRAIN.VIEW used (Total process time):
      real time           0.13 seconds
      cpu time            0.14 seconds
 
NOTE: There were 2276 observations read from the data set EMWS1.GRFEXPL_TRAIN.
NOTE: There were 2276 observations read from the data set EMWS1.TREE_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 2276 observations and 15 variables.
NOTE: DATA statement used (Total process time):
      real time           0.16 seconds
      cpu time            0.15 seconds
 
 
MPRINT(EM_DIAGRAM):    proc freq data=EM_temp_assessdata noprint;
MPRINT(EM_DIAGRAM):   table I_genre*F_genre / out = WORK.Tree_1H1NUI2 nocol norow outpct;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Tree_1H1NUI2;
MPRINT(EM_DIAGRAM):   length _TYPE_ $10 DATAROLE TARGET $32 TARGETLABEL $200 FROM INTO $32 CORRECTTEXT $40 ;
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Outcome Type";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role";
MPRINT(EM_DIAGRAM):   label TARGET = "Target Variable";
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
MPRINT(EM_DIAGRAM):   label CORRECTTEXT = "Correct Text";
MPRINT(EM_DIAGRAM):   label CORRECT = "Correct";
MPRINT(EM_DIAGRAM):   set WORK.Tree_1H1NUI2(rename=(F_genre=FROM I_genre=INTO));
MPRINT(EM_DIAGRAM):   retain _TYPE_ 'PREDICTION' DATAROLE "TRAIN" TARGET "genre";
MPRINT(EM_DIAGRAM):   if FROM eq INTO then do;
MPRINT(EM_DIAGRAM):   CORRECT = 0;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Correct";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CORRECT = 1;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Incorrect";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.Tree_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set WORK.Tree_1H1NUI2;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   set WORK.Tree_1H1NUI2;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT(drop=INTO FROM _TYPE_);
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   length MISC $12;
MPRINT(EM_DIAGRAM):   if FROM='ROCK' and INTO='ROCK' then MISC='TRUEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM='ROCK' and INTO ne 'ROCK' then MISC='FALSENEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne 'ROCK' and INTO='ROCK' then MISC='FALSEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne'ROCK' and INTO ne 'ROCK' then MISC='TRUENEVENT';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.MISCREPORT nothreads;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc summary data=WORK.MISCREPORT NWAY;
MPRINT(EM_DIAGRAM):   output out=WORK.MISCCOUNT(drop=_FREQ_ _TYPE_) SUM=COUNT;
MPRINT(EM_DIAGRAM):   CLASS MISC;
MPRINT(EM_DIAGRAM):   VAR COUNT;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.MISCCOUNT out=WORK.MISCREPORT(drop=_NAME_ _LABEL_);
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   ID MISC;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.Tree_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree_VariableSet;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Ids_genre_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', strip(event));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EM_temp_assessdata;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("F_genre") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("F_genre") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D CLASSOUT = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   CLASS F_genre ;
 
MPRINT(EM_ASSESS):   VAR P_genrerock _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _auxeventname (keep = __event__) ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;
 
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;
 
MPRINT(EM_ASSESS):   SET _ASSMT_CLASSOUT END = EOF;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....... LEVEL = BINARY OR NOMINAL OR ORDINAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE ("F_genre") THEN DO;
MPRINT(EM_ASSESS):   CUMFREQ + FREQUENCY;
MPRINT(EM_ASSESS):   IF LEVEL NE "." THEN DO;
MPRINT(EM_ASSESS):   N1 + 1;
MPRINT(EM_ASSESS):   IF (NRAW NE 0 AND NRAW NE 1) OR TYPE NE "N" OR "" > " " THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ......................... IF EVENT NE BLANK;
MPRINT(EM_ASSESS):   * ....................LEVEL IS CHAR VAR ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   IF UPCASE("ROCK") = UPCASE(LEVEL) THEN DO;
MPRINT(EM_ASSESS):   NUM1 = FREQUENCY;
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", CRAW );
MPRINT(EM_ASSESS):   __event__ = craw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   ELSE do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", NRAW );
MPRINT(EM_ASSESS):   __event__ = nraw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF LAST.NAME THEN DO;
 
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * .............. IN NOMINAL CASE, NEED TO GROUP ALL '0' ;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   NUM0 = SUM (CUMFREQ, - NUM1);
MPRINT(EM_ASSESS):   IF NUM0 < 0 THEN NUM0 = 0;
MPRINT(EM_ASSESS):   IF NUM1 = . THEN NUM1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM0", NUM0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM1", NUM1);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM1", NUM1 / CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM0", (CUMFREQ - NUM1) / CUMFREQ);
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN DO;
MPRINT(EM_ASSESS):   FLAG0_1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "C" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF "" = " " THEN DO;
MPRINT(EM_ASSESS):   IF "ROCK" NE "1" THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ................... IF TYPE = N;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", FLAG0_1 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................IF LAST.NAME ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ...............IF LEVEL NE '.' ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * .............. IF NAME = TARGET;
MPRINT(EM_ASSESS):   ELSE IF "" > " " AND UPCASE(NAME) = UPCASE("") THEN DO;
MPRINT(EM_ASSESS):   NUMDECISIONS + 1;
MPRINT(EM_ASSESS):   LEVEL = TRANSLATE (LEVEL, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_LABEL" || LEFT (PUT (NUMDECISIONS, 3.)), LEVEL );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................... ELSE IF UPCASE;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   output _auxeventname;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", NUMDECISIONS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_genrerock") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _ANY0;
MPRINT(EM_ASSESS):   SET _ea_tmpdata (KEEP = F_genre P_genrerock _tmpfreqvar_ );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... No Formats;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF LEFT ( F_genre ) = "ROCK" THEN NTARGET = 1;
MPRINT(EM_ASSESS):   ELSE NTARGET = 0;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Before proc summary of binary case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ANY0 (KEEP = P_genrerock NTARGET _tmpfreqvar_ WHERE = (NTARGET > . )) NWAY MISSING;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   CLASS P_genrerock ;
MPRINT(EM_ASSESS):   VAR NTARGET ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET _MEANFREQVAR ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... Main Data Set Processing, Binary case;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK (KEEP = BASECAPC BASECAP __EVENT__ BASEEVENTS BASEGAIN BASELIFT BASERESP BASERESPC BESTCAP BESTCAPC BESTGAIN BESTLIFT BESTLIFTC BESTNUMEVENTS BESTRESP BESTRESPC BIN CBASELIFT C_LIFT C_P_CAPT_RESP C_P_RESP GAIN LIFT
MAXPROB MINPROB MNPROB NUMNONRESP NUMOBS NUMRESP PERCENTILE P_CAPT_RESP P_RESP ) WORK._TEMPSCOREDIST (KEEP = BIN LOWERPROB UPPERPROB EVENTVALUE SCR_NUMEVENTS MODELSCORE SCR_NUMNONEVENTS RANGE NUMOBSINGROUP PERCOBSINGROUP C_PERCOBSINGROUP SCR_P_EVENTS
SCR_CP_EVENTS SCR_P_NONEVENTS SCR_CP_NONEVENTS SCR_MNPROB SCR_MINPROB SCR_MAXPROB ) ;
 
MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;
 
MPRINT(EM_ASSESS):   IF _N_ = 1 THEN SET _AUXEVENTNAME;
 
MPRINT(EM_ASSESS):   RETAIN MINPROB1 - MINPROB20 1 MAXPROB1 - MAXPROB20 0 MNPROB1 - MNPROB20 0 NUMOBS1 - NUMOBS20 0 NUMRESP1 - NUMRESP20 0 TRUEPOS1 - TRUEPOS100 0 TRUENEG1 - TRUENEG100 0 FALSEPOS1 - FALSEPOS100 0 FALSENEG1 - FALSENEG100 0 EVENTS1 -
EVENTS100 NONEVENTS1 - NONEVENTS100 0 FIRSTIN1 - FIRSTIN100 . LASTIN1 - LASTIN100 . RESPRATE 0.1955184534 _NEVENTS 445 _NNONEVENTS 1831 TARGET "NTARGET" ;
MPRINT(EM_ASSESS):   ARRAY MINPROBS (20) MINPROB1 - MINPROB20;
MPRINT(EM_ASSESS):   ARRAY MAXPROBS (20) MAXPROB1 - MAXPROB20;
MPRINT(EM_ASSESS):   ARRAY MNPROBS (20) MNPROB1 - MNPROB20;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY NUMRESPS (20) NUMRESP1 - NUMRESP20;
MPRINT(EM_ASSESS):   ARRAY TRUEPOSX (100) TRUEPOS1 - TRUEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSEPOSX (100) FALSEPOS1 - FALSEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSENEGX (100) FALSENEG1 - FALSENEG100;
MPRINT(EM_ASSESS):   ARRAY TRUENEGX (100) TRUENEG1 - TRUENEG100;
MPRINT(EM_ASSESS):   ARRAY _EVENTS (100) EVENTS1 - EVENTS100;
MPRINT(EM_ASSESS):   ARRAY NONEVENTS (100) NONEVENTS1 - NONEVENTS100;
MPRINT(EM_ASSESS):   ARRAY FIRSTIN (100) FIRSTIN1 - FIRSTIN100;
MPRINT(EM_ASSESS):   ARRAY LASTIN (100) LASTIN1 - LASTIN100;
MPRINT(EM_ASSESS):   RETAIN SCR_MNPROB1 - SCR_MNPROB100 0 SCR_MINPROB1 - SCR_MINPROB100 1 SCR_MAXPROB1 - SCR_MAXPROB100 0;
MPRINT(EM_ASSESS):   ARRAY SCR_MNPROBS (100) SCR_MNPROB1 - SCR_MNPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MINPROBS (100) SCR_MINPROB1 - SCR_MINPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MAXPROBS (100) SCR_MAXPROB1 - SCR_MAXPROB100;
MPRINT(EM_ASSESS):   DROP SCR_MINPROB1 - SCR_MINPROB100 SCR_MAXPROB1 - SCR_MAXPROB100 SCR_MNPROB1 - SCR_MNPROB100 ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... Area For 8 Financials ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF _MEANTARGET = . THEN _MEANTARGET = RESPRATE;
MPRINT(EM_ASSESS):   DROP N1 _K SUMWEIGHTS ;
MPRINT(EM_ASSESS):   SUMWEIGHTS = 1;
 
MPRINT(EM_ASSESS):   DO _K = 1 TO CEIL (_FREQ_);
MPRINT(EM_ASSESS):   IF _K = CEIL (_FREQ_) THEN DO;
MPRINT(EM_ASSESS):   IF _FREQ_ < CEIL (_FREQ_) THEN _WEIGHT = _FREQ_ - FLOOR (_FREQ_);
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   N1 + _WEIGHT;
MPRINT(EM_ASSESS):   NTARGET = _MEANTARGET ;
MPRINT(EM_ASSESS):   DECILE = MIN (20, CEIL (N1 * 20 / 2276));
MPRINT(EM_ASSESS):   MINPROBS ( DECILE) = MIN (MINPROBS ( DECILE), P_genrerock );
MPRINT(EM_ASSESS):   MAXPROBS ( DECILE) = MAX (MAXPROBS ( DECILE), P_genrerock );
MPRINT(EM_ASSESS):   MNPROBS ( DECILE) = SUM (MNPROBS ( DECILE), P_genrerock * _WEIGHT);
MPRINT(EM_ASSESS):   NUMOBSS ( DECILE) = NUMOBSS ( DECILE) + _WEIGHT;
MPRINT(EM_ASSESS):   NUMRESPS ( DECILE) = NUMRESPS ( DECILE) + _MEANTARGET * _WEIGHT;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ outside of do loop, Area for final ROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RANKDELTA = (ROUND ( _FREQ_ ) + 1) / 2;
MPRINT(EM_ASSESS):   RANK = UNTIEDRANK + RANKDELTA;
MPRINT(EM_ASSESS):   DROP RANK ;
MPRINT(EM_ASSESS):   SUMRANK1 + RANK * ROUND (_MEANTARGET * _FREQ_, .0000001);
MPRINT(EM_ASSESS):   UNTIEDRANK + ROUND (_FREQ_, .00000001);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Area For ROC Curve;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 100;
MPRINT(EM_ASSESS):   IF P_genrerock * 100 >= _K THEN DO;
MPRINT(EM_ASSESS):   TRUEPOSX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   FALSEPOSX ( _K ) + _FREQ_ * (1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   TRUENEGX ( _K ) + _FREQ_ * ( 1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   FALSENEGX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SLOT = MIN (MAX (CEIL (P_genrerock * 100), 1), 100) ;
MPRINT(EM_ASSESS):   DROP SLOT;
MPRINT(EM_ASSESS):   FIRSTIN ( SLOT ) = MIN ( FIRSTIN ( SLOT ), P_genrerock);
MPRINT(EM_ASSESS):   LASTIN ( SLOT ) = MAX ( LASTIN ( SLOT ), P_genrerock);
MPRINT(EM_ASSESS):   _EVENTS ( SLOT) = _EVENTS ( SLOT) + _FREQ_ * _MEANTARGET;
MPRINT(EM_ASSESS):   NONEVENTS ( SLOT) = NONEVENTS ( SLOT) + _FREQ_ * (1 - _MEANTARGET);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ START OF OUTDIST IN BINARY CASE MAIN DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   SCR_MNPROBS ( SLOT ) = SUM (SCR_MNPROBS (SLOT), P_genrerock * _FREQ_ );
MPRINT(EM_ASSESS):   SCR_MINPROBS ( SLOT ) = MIN (SCR_MINPROBS (SLOT), P_genrerock );
MPRINT(EM_ASSESS):   SCR_MAXPROBS ( SLOT ) = MAX (SCR_MAXPROBS (SLOT), P_genrerock );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ End of Outdist in Binary case main DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   PUT //;
MPRINT(EM_ASSESS):   DO K = 1 TO 20;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LENGTH EVENTVALUE $ 32;
MPRINT(EM_ASSESS):   RETAIN EVENTVALUE "ROCK" ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ......... Start of EOF area of BINARY processing of main data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SUMRANK1", SUMRANK1);
MPRINT(EM_ASSESS):   LENGTH DATAROLE $ 10;
MPRINT(EM_ASSESS):   RETAIN DATAROLE "TRAIN" ;
MPRINT(EM_ASSESS):   RETAIN OVLMIN 0 OVLMAX 0.6279069767 ;
MPRINT(EM_ASSESS):   DROP OVLMIN OVLMAX ;
MPRINT(EM_ASSESS):   C_NUMOBS = 0;
MPRINT(EM_ASSESS):   C_NUM_RESP = 0;
MPRINT(EM_ASSESS):   C_NUM_NONRESP = 0;
MPRINT(EM_ASSESS):   C_P_RESP = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   PREVIOUSPROFIT = 0;
MPRINT(EM_ASSESS):   MAXPROFIT = 0;
MPRINT(EM_ASSESS):   _KS_BIN_ = 0;
MPRINT(EM_ASSESS):   DROP _KS_BIN_;
MPRINT(EM_ASSESS):   AVGNUMRESP = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASERESP = 100 * RESPRATE;
MPRINT(EM_ASSESS):   BASERESPC = BASERESP;
MPRINT(EM_ASSESS):   BASECAP = 100 / 20;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................Start OF Gainschart = Outranks Area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = 0;
MPRINT(EM_ASSESS):   DO GROUP = 20 TO 1 BY -1;
 
MPRINT(EM_ASSESS):   BASECAPC + BASECAP;
MPRINT(EM_ASSESS):   PERCENTILE = GROUP * (100 / 20);
MPRINT(EM_ASSESS):   MINPROB = MINPROBS ( GROUP);
MPRINT(EM_ASSESS):   MAXPROB = MAXPROBS ( GROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB" || LEFT ( PUT (GROUP, 3.)), MINPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB" || LEFT ( PUT (GROUP, 3.)), MAXPROB);
MPRINT(EM_ASSESS):   NUMOBS = NUMOBSS ( GROUP);
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN MNPROB = MNPROBS ( GROUP) / NUMOBS;
MPRINT(EM_ASSESS):   ELSE MNPROB = .;
MPRINT(EM_ASSESS):   C_NUMOBS = SUM (NUMOBS, C_NUMOBS);
MPRINT(EM_ASSESS):   NUMRESP = NUMRESPS ( GROUP);
MPRINT(EM_ASSESS):   NUMNONRESP = NUMOBS - NUMRESP;
MPRINT(EM_ASSESS):   C_AVGNUM_RESP + AVGNUMRESP;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   BESTCAPC = C_NUMOBS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BASEEVENTS = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASENONEVENTS = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   FLAG + 1;
MPRINT(EM_ASSESS):   DROP FLAG;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = _NEVENTS - C_NUMOBS + NUMOBS;
MPRINT(EM_ASSESS):   IF FLAG > 1 THEN BESTNUMEVENTS = 0;
MPRINT(EM_ASSESS):   BESTCAPC = 100;
MPRINT(EM_ASSESS):   IF C_NUMOBS - _NEVENTS <= NUMOBS THEN DO;
MPRINT(EM_ASSESS):   BASEEVENTS = C_NUMOBS - _NEVENTS;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS - C_NUMOBS + _NEVENTS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BASEEVENTS = 0;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTCAP = BESTNUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BESTLIFT = BESTNUMEVENTS / AVGNUMRESP;
MPRINT(EM_ASSESS):   C_BESTNUMEVENTS + BESTNUMEVENTS;
MPRINT(EM_ASSESS):   DROP C_BESTNUMEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN BESTLIFTC = C_BESTNUMEVENTS / (_NEVENTS / 2276 * C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE BESTLIFTC = .;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESP = BESTNUMEVENTS * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_RESP = NUMRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_NONRESP = NUMNONRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESP = .;
MPRINT(EM_ASSESS):   P_RESP = .;
MPRINT(EM_ASSESS):   P_NONRESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESPC = C_BESTNUMEVENTS * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   BESTGAIN = MAX (0, ((C_BESTNUMEVENTS / C_NUMOBS ) / ( AVGNUMRESP / NUMOBS) - 1) * 100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESPC = .;
MPRINT(EM_ASSESS):   BESTGAIN = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMNONRESP > 0 THEN ODDS = NUMRESP / NUMNONRESP;
MPRINT(EM_ASSESS):   ELSE ODDS = .;
MPRINT(EM_ASSESS):   C_NUM_RESP = SUM (C_NUM_RESP , NUMRESP );
MPRINT(EM_ASSESS):   C_NUM_NONRESP = SUM (C_NUM_NONRESP, NUMNONRESP );
MPRINT(EM_ASSESS):   IF C_NUM_NONRESP > 0 THEN C_ODDS = C_NUM_RESP / C_NUM_NONRESP;
MPRINT(EM_ASSESS):   ELSE C_ODDS = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   C_P_RESP = C_NUM_RESP * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   GAIN = ABS(100 * (((C_NUM_RESP / C_NUMOBS ) / (_NEVENTS / 2276)) - 1));
MPRINT(EM_ASSESS):   BASEGAIN = 100 * (( (C_AVGNUM_RESP / C_NUMOBS) / ( AVGNUMRESP / NUMOBS)) - 1);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   GAIN = .;
MPRINT(EM_ASSESS):   BASEGAIN = .;
MPRINT(EM_ASSESS):   C_P_RESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF BASEGAIN <= 0 THEN BASEGAIN = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = NUMRESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   P_CAPT_NONRESP = NUMNONRESP * 100 / ( 2276 - _NEVENTS);
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = C_NUM_RESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   C_P_CAPT_NONRESP = C_NUM_NONRESP * 100 / ( 2276 - _NEVENTS);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Area For Binned KS in Outranks area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _DIFFERENCE = C_P_CAPT_RESP - C_P_CAPT_NONRESP ;
MPRINT(EM_ASSESS):   IF _KS_BIN_ < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   _KS_BIN_ = _DIFFERENCE;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = MINPROB + (MAXPROB - MINPROB) / 2 ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LIFT = P_RESP * .01 / RESPRATE ;
MPRINT(EM_ASSESS):   C_LIFT = C_P_RESP * .01 / RESPRATE;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BASELIFT = AVGNUMRESP / ( RESPRATE * NUMOBS );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE BASELIFT = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN CBASELIFT = C_AVGNUM_RESP / (RESPRATE * C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE CBASELIFT = .;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ WITHIN DO LOOP FOR OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 + 1 - GROUP;
MPRINT(EM_ASSESS):   PERCENTILE = BIN * (100 / 20);
MPRINT(EM_ASSESS):   B_C_P_RESP = PERCENTILE;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPRANK ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................ END OF GAINSCHART = OUTRANKS AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFITGROUP" , MAXPROFITGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFIT" , MAXPROFIT );
MPRINT(EM_ASSESS):   KS_ABSDIFF = 0 ;
MPRINT(EM_ASSESS):   MINPRECTPR = 9999;
MPRINT(EM_ASSESS):   Y0 = 1 - RESPRATE;
MPRINT(EM_ASSESS):   Y1 = RESPRATE;
MPRINT(EM_ASSESS):   MAXMUTUAL = 0;
MPRINT(EM_ASSESS):   DROP MAXMUTUAL KSPROB Y0 Y1 KS_ABSDIFF MINPRECTPR;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .....................About to start Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................... Finished Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Outdist ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS96 - EVENTS100 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS96 - NONEVENTS100);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB96 - SCR_MNPROB100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB96 - SCR_MINPROB100) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB96 - SCR_MAXPROB100) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2276;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 20;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 19 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS91 - EVENTS95 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS91 - NONEVENTS95);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB91 - SCR_MNPROB95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB91 - SCR_MINPROB95) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB91 - SCR_MAXPROB95) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2276;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 19;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 18 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS86 - EVENTS90 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS86 - NONEVENTS90);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB86 - SCR_MNPROB90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB86 - SCR_MINPROB90) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB86 - SCR_MAXPROB90) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2276;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 18;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 17 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS81 - EVENTS85 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS81 - NONEVENTS85);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB81 - SCR_MNPROB85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB81 - SCR_MINPROB85) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB81 - SCR_MAXPROB85) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2276;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 17;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 16 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS76 - EVENTS80 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS76 - NONEVENTS80);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB76 - SCR_MNPROB80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB76 - SCR_MINPROB80) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB76 - SCR_MAXPROB80) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2276;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 16;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 15 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS71 - EVENTS75 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS71 - NONEVENTS75);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB71 - SCR_MNPROB75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB71 - SCR_MINPROB75) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB71 - SCR_MAXPROB75) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2276;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 15;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 14 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS66 - EVENTS70 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS66 - NONEVENTS70);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB66 - SCR_MNPROB70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB66 - SCR_MINPROB70) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB66 - SCR_MAXPROB70) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2276;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 14;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 13 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS61 - EVENTS65 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS61 - NONEVENTS65);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB61 - SCR_MNPROB65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB61 - SCR_MINPROB65) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB61 - SCR_MAXPROB65) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2276;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 13;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 12 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS56 - EVENTS60 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS56 - NONEVENTS60);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB56 - SCR_MNPROB60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB56 - SCR_MINPROB60) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB56 - SCR_MAXPROB60) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2276;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 12;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 11 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS51 - EVENTS55 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS51 - NONEVENTS55);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB51 - SCR_MNPROB55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB51 - SCR_MINPROB55) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB51 - SCR_MAXPROB55) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2276;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 11;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 10 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS46 - EVENTS50 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS46 - NONEVENTS50);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB46 - SCR_MNPROB50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB46 - SCR_MINPROB50) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB46 - SCR_MAXPROB50) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2276;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 10;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 9 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS41 - EVENTS45 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS41 - NONEVENTS45);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB41 - SCR_MNPROB45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB41 - SCR_MINPROB45) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB41 - SCR_MAXPROB45) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2276;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 9;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 8 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS36 - EVENTS40 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS36 - NONEVENTS40);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB36 - SCR_MNPROB40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB36 - SCR_MINPROB40) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB36 - SCR_MAXPROB40) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2276;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 8;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 7 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS31 - EVENTS35 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS31 - NONEVENTS35);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB31 - SCR_MNPROB35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB31 - SCR_MINPROB35) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB31 - SCR_MAXPROB35) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2276;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 7;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 6 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS26 - EVENTS30 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS26 - NONEVENTS30);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB26 - SCR_MNPROB30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB26 - SCR_MINPROB30) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB26 - SCR_MAXPROB30) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2276;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 6;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 5 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS21 - EVENTS25 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS21 - NONEVENTS25);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB21 - SCR_MNPROB25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB21 - SCR_MINPROB25) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB21 - SCR_MAXPROB25) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2276;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 5;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 4 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS16 - EVENTS20 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS16 - NONEVENTS20);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB16 - SCR_MNPROB20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB16 - SCR_MINPROB20) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB16 - SCR_MAXPROB20) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2276;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 4;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 3 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS11 - EVENTS15 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS11 - NONEVENTS15);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB11 - SCR_MNPROB15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB11 - SCR_MINPROB15) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB11 - SCR_MAXPROB15) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2276;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 3;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 2 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS6 - EVENTS10 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS6 - NONEVENTS10);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB6 - SCR_MNPROB10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB6 - SCR_MINPROB10) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB6 - SCR_MAXPROB10) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2276;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 2;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 1 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS1 - EVENTS5 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS1 - NONEVENTS5);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB1 - SCR_MNPROB5) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB1 - SCR_MINPROB5) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB1 - SCR_MAXPROB5) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2276;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 1;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSPROB" , PUT (KSPROB, 5.3 ) );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_PROB" , _KS_BIN_PROB );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_" , _KS_BIN_ / 100 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSDIFF" , KS_ABSDIFF );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PRECTPR" , PRECTPR );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXMUTUALPROB" , MAXMUTUALPROB);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LABEL __EVENT__ = "Event" DECILE = "Depth" BIN = "Bin" NUMOBS = "Number of Observations" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * RUN for large data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST;
MPRINT(EM_ASSESS):   DELETE _AUXEVENTNAME;
MPRINT(EM_ASSESS):   QUIT;
 
MPRINT(EM_ASSESS):   OPTION NOCENTER LS = 95;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Report Vars Area.;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start OF Outdist Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPSCOREDIST;
MPRINT(EM_ASSESS):   RENAME MODELSCORE = SCORE UPPERPROB = UPPOSTERIOR SCR_CP_EVENTS =
CUMULATIVEPERCENTAGEOFEVENTS SCR_CP_NONEVENTS = CUMULATIVEPERCENTAGEOFNONEVENTS EVENTVALUE =
EVENT LOWERPROB = LOWPOSTERIOR NUMOBSINGROUP = N PERCOBSINGROUP = PERCENTAGE SCR_MINPROB =
_MINP_ SCR_MAXPROB = _MAXP_ SCR_MNPROB = _MEANP_ RANGE = P_LABEL C_PERCOBSINGROUP =
CUMULATIVEPERCENTAGE SCR_NUMEVENTS = NUMBEROFEVENTS SCR_NUMNONEVENTS = NUMBEROFNONEVENTS
SCR_P_EVENTS = PERCENTAGEOFEVENTS SCR_P_NONEVENTS = PERCENTAGEOFNONEVENTS ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... OUTDIST MODIFICATION LABEL AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL BIN = "Bin" N = "Number of Observations" P_LABEL = "Posterior
Probability Range" EVENT = "Event" LOWPOSTERIOR = "Lower Bound Posterior Probability"
PERCENTAGEOFEVENTS = "Percentage of Events" CUMULATIVEPERCENTAGEOFNONEVENTS = "Cumulative
Percentage of Nonevents" CUMULATIVEPERCENTAGE = "Cumulative Percentage" PERCENTAGEOFEVENTS =
"Percentage of Events" PERCENTAGEOFNONEVENTS = "Percentage of Nonevents"
CUMULATIVEPERCENTAGEOFEVENTS = "Cumulative Percentage of Events" UPPOSTERIOR = "Upper Bound
Posterior Probability" NUMBEROFEVENTS = "Number of Events" PERCENTAGE = "Percentage"
NUMBEROFNONEVENTS = "Number of Nonevents" _MEANP_ = "Mean Posterior Probability" _MINP_ = "Min
Posterior Probability" _MAXP_ = "Max Posterior Probability" SCORE = "Model Score" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   SET WORK._TEMPSCOREDIST (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........... END OF OUTDIST MODIFICATION;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start of OUTRANKS Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPRANK;
MPRINT(EM_ASSESS):   RENAME __EVENT__ = EVENT P_RESP = RESP C_P_CAPT_RESP = CAPC P_CAPT_RESP =
CAP NUMNONRESP = NUMNEVENT NUMRESP = NUMEVENT BASEEVENTS = BASENUMBEROFEVENTS BESTNUMEVENTS =
BESTNUMBEROFEVENTS MAXPROB = _MAXP_ MINPROB = _MINP_ CBASELIFT = BASELIFTC C_LIFT = LIFTC
MNPROB = _MEANP_ PERCENTILE = DECILE NUMOBS = N NUMEVENT = NUMBEROFEVENTS C_P_RESP = RESPC ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................. OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL _MAXP_ = "Max Posterior Probability" _MINP_ = "Min Posterior
Probability" _MEANP_ = "Mean Posterior Probability" BASECAP = "Baseline % Captured Response"
BASECAPC = "Baseline Cumulative % Captured Response" BASENUMBEROFEVENTS = "Baseline Number of
Events" BASEGAIN = "Baseline Gain" BASELIFT = "Baseline Lift" BASELIFTC = "Baseline Cumulative
Lift" BASERESP = "Baseline % Response" BASERESPC = "Baseline Cumulative % Response" BASELIFTC
= "Baseline Cumulative Lift" BESTCAP = "Best % Captured Response" BESTCAPC = "Best Cumulative
% Captured Response" BESTGAIN = "Best Gain" BESTRESP = "Best % Response" BESTRESPC = "Best
Cumulative % Response" BESTLIFT = "Best Lift" BESTLIFTC = "Best Cumulative Lift"
BESTNUMBEROFEVENTS = "Best Number of Events" CAP = "% Captured Response" CAPC = "Cumulative %
Captured Response" DECILE = "Depth" GAIN = "Gain" LIFT = "Lift" LIFTC = "Cumulative Lift"
NUMNEVENT = "Number of Nonevents" N = "Number of Observations" EVENT = "Event" RESPC =
"Cumulative % Response" NUMBEROFEVENTS = "Number of Events" RESP = "% Response" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK;
MPRINT(EM_ASSESS):   SET WORK._TEMPRANK (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   retain target "genre";
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Tree_EMRANK;
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   retain target "genre";
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Tree_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   run;
26742      %let _cn = %sysfunc(getoption(CENTER));
26743      options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
26744      proc print data=EMWS1.Tree_EMREPORTFIT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Tree_EMREPORTFIT noobs label;
26745      var STAT LABEL TRAIN
26746      ;
MPRINT(EM_DIAGRAM):   var STAT LABEL TRAIN ;
26747      by TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by TARGET TARGETLABEL;
26748      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
26749      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Fit Statistics";
MPRINT(EM_DIAGRAM):   run;
26750      run;
 
NOTE: There were 8 observations read from the data set EMWS1.TREE_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 6.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
26751      title10;
MPRINT(EM_DIAGRAM):   title10;
26752      options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
26753      proc sort data=EMWS1.Tree_EMCLASSIFICATION nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Tree_EMCLASSIFICATION nothreads;
26754      by DATAROLE TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET TARGETLABEL;
26755      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 23 observations read from the data set EMWS1.TREE_EMCLASSIFICATION.
NOTE: The data set EMWS1.TREE_EMCLASSIFICATION has 23 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
26756      %let _cn = %sysfunc(getoption(CENTER));
26757      options nocenter;
MPRINT(EM_DIAGRAM):   options nocenter;
26758      proc print data=EMWS1.Tree_EMCLASSIFICATION noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Tree_EMCLASSIFICATION noobs label;
26759      var from into pct_row pct_col count percent
26760      ;
MPRINT(EM_DIAGRAM):   var from into pct_row pct_col count percent ;
26761      by DATAROLE TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET TARGETLABEL;
26762      label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
26763      label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
26764      label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
26765      label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
26766      label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
26767      label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
26768      where _TYPE_='PREDICTION';
MPRINT(EM_DIAGRAM):   where _TYPE_='PREDICTION';
26769      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
26770      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Classification Table";
MPRINT(EM_DIAGRAM):   run;
26771      run;
 
NOTE: There were 23 observations read from the data set EMWS1.TREE_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 7.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
26772      title9;
MPRINT(EM_DIAGRAM):   title9;
26773      title10;
MPRINT(EM_DIAGRAM):   title10;
26774      options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
26775      %let _cn = %sysfunc(getoption(CENTER));
26776      options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
26777      data EMWS1.Tree_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   data EMWS1.Tree_EMEVENTREPORT;
26778      length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT
26778    ! TRUEEVENT 8;
MPRINT(EM_DIAGRAM):   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT
FALSEEVENT TRUEEVENT 8;
26779      label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
26779    !  TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))"
26779    ! TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
26779    ! FALSEEVENT
26780      = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT =
26780    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT =
26780    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
26781         "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role" TARGET = "Target" TARGETLABEL = "Target
Label" FALSEEVENT = "False Positive" FALSENEVENT = "False Negative" TRUEEVENT = "True
Positive" TRUENEVENT = "True Negative";
26782      FALSEEVENT=0;
MPRINT(EM_DIAGRAM):   FALSEEVENT=0;
26783      FALSENEVENT=0;
MPRINT(EM_DIAGRAM):   FALSENEVENT=0;
26784      TRUEEVENT=0;
MPRINT(EM_DIAGRAM):   TRUEEVENT=0;
26785      TRUENEVENT=0;
MPRINT(EM_DIAGRAM):   TRUENEVENT=0;
26786      set EMWS1.Tree_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree_EMEVENTREPORT;
26787      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_EMEVENTREPORT.
NOTE: The data set EMWS1.TREE_EMEVENTREPORT has 1 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
26788      proc print data=EMWS1.Tree_EMEVENTREPORT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Tree_EMEVENTREPORT noobs label;
26789      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
26790      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Event Classification Table";
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
MPRINT(EM_DIAGRAM):   run;
26791      by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
26792      run;
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 8.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
26793      title10;
MPRINT(EM_DIAGRAM):   title10;
26794      options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
26795      proc datasets library=EMWS1 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS1 nolist;
26796      modify Tree_EMRANK;
MPRINT(EM_DIAGRAM):   modify Tree_EMRANK;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
26797      label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
26798      label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
26798    ! ;
MPRINT(EM_DIAGRAM):   run;
26799      run;
 
NOTE: MODIFY was successful for EMWS1.TREE_EMRANK.DATA.
26800      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
26801      %let _cn = %sysfunc(getoption(CENTER));
26802      options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
26803      proc print data=EMWS1.Tree_EMRANK label noobs;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Tree_EMRANK label noobs;
26804      var
26805      decile gain lift liftc resp respc N _meanP_;
MPRINT(EM_DIAGRAM):   var decile gain lift liftc resp respc N _meanP_;
26806      by
26807      notsorted DATAROLE
26808      notsorted TARGET
26809      notsorted TARGETLABEL
26810      ;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL ;
26811      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
26812      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Assessment Score Rankings";
MPRINT(EM_DIAGRAM):   run;
26813      run;
 
NOTE: There were 20 observations read from the data set EMWS1.TREE_EMRANK.
NOTE: The PROCEDURE PRINT printed page 9.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
26814      title10;
MPRINT(EM_DIAGRAM):   title10;
26815      options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
26816      proc datasets library=EMWS1 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS1 nolist;
26817      modify Tree_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   modify Tree_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
26818      label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,
26818    ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
26819      label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
26819    ! ;
MPRINT(EM_DIAGRAM):   run;
26820      run;
 
NOTE: MODIFY was successful for EMWS1.TREE_EMSCOREDIST.DATA.
26821      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):    options nocenter;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Tree_EMSCOREDIST label noobs;
MPRINT(EM_DIAGRAM):   var p_label numberOfEvents numberOfNonEvents _meanp_ percentage;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL ;
MPRINT(EM_DIAGRAM):   where TARGET in( "genre" );
MPRINT(EM_DIAGRAM):   title9 ' ';
MPRINT(EM_DIAGRAM):   title10 "Assessment Score Distribution";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   title10;
MPRINT(EM_DIAGRAM):   options NOCENTER;
MPRINT(EM_DIAGRAM):   proc printto;
MPRINT(EM_DIAGRAM):   run;
